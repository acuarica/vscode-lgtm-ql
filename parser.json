{"data":"var QL =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t/**\n\t * This file is packaged up with the antlr4 JavaScript runtime and a parser\n\t * lexer for QL to form `target/general/lgtm-lab-antlr4-QL/output/QL.js`.\n\t * This single JavaScript file that is produced is then served to the lgtm\n\t * client for use for client-side parsing.\n\t *\n\t * This is designed to model as closely as possible the output of the\n\t * equivalent java code for handling antlr parsing errors. This can be\n\t * found at and around `com.semmle.frontend.util.antlr.GeneralErrorStrategy`.\n\t * Because of these being written in different languages it is hard to share\n\t * code unfortunately, so this may become out of date occasionally and\n\t * need to be updated.\n\t *\n\t * The antlr4 JavaScript runtime can be found at:\n\t * - https://github.com/antlr/antlr4/tree/master/runtime/JavaScript/src/antlr4\n\t * - http://www.antlr.org/download/antlr-javascript-runtime-4.5.zip\n\t * - https://www.npmjs.com/package/antlr4\n\t *\n\t * The runtime and other files needed for packaging are located at\n\t * `resources/lib/codingstars/antlr4-javascript-runtime-buildenv.zip`.\n\t * Ideally these other files will rarely if ever need to change and\n\t * all functionality changes can be accomplished in this file.\n\t */\n\n\tvar antlr4 = __webpack_require__(1);\n\tvar ErrorListener = __webpack_require__(24);\n\tvar Errors = __webpack_require__(26);\n\n\tvar QLLexer = __webpack_require__(49);\n\tvar QLParser = __webpack_require__(50);\n\tvar QLParserVisitor = __webpack_require__(51);\n\n\t// Disable the console error listener\n\tErrorListener.ConsoleErrorListener.INSTANCE.syntaxError = function () {};\n\n\tfunction GeneralErrorListener(errorsList) {\n\t    ErrorListener.ErrorListener.call(this);\n\t    this.errorsList = errorsList;\n\t}\n\n\tGeneralErrorListener.prototype = Object.create(ErrorListener.ErrorListener.prototype);\n\tGeneralErrorListener.prototype.constructor = GeneralErrorListener;\n\n\t/**\n\t * Return a short description of the exception.\n\t * Should end in a space and make sense when followed by the offending input.\n\t */\n\tfunction getMsgProblem(e) {\n\t    if (e instanceof Errors.NoViableAltException) {\n\t        return \"no viable parse for input \";\n\t    } else if (e instanceof Errors.LexerNoViableAltException) {\n\t        return \"no viable lex for input \";\n\t    } else if (e instanceof Errors.InputMismatchException) {\n\t        return \"unexpected input \";\n\t    } else if (e instanceof Errors.FailedPredicateException) {\n\t        return \"failed predicate for input \";\n\t    }\n\t    return \"Error parsing input \";\n\t}\n\n\t/**\n\t * Return the text between two tokens (inclusive except when start != end and\n\t * the end token is EOF in which the EOF is not appended).\n\t * Should be pretty robust to bad input, `tokens` and `startToken` may be undefined.\n\t */\n\tfunction getTextFromTokens(tokens, startToken, endToken) {\n\t    if (!tokens) {\n\t        return \"<unknown input>\";\n\t    }\n\t    if (!startToken) {\n\t        startToken = endToken;\n\t    }\n\t    if (startToken.type === antlr4.Token.EOF) {\n\t        return \"<EOF>\";\n\t    }\n\n\t    var buf = [];\n\t    for (var i = startToken.tokenIndex; i < endToken.tokenIndex; ++i) {\n\t        buf.push(tokens[i].text);\n\t    }\n\t    if (endToken.type !== antlr4.Token.EOF) {\n\t        buf.push(tokens[endToken.tokenIndex].text);\n\t    }\n\t    return buf.join(\"\");\n\t}\n\n\tfunction escapeAndQuote(s) {\n\t    s = s.replace(\"\\n\", \"\\\\n\");\n\t    s = s.replace(\"\\r\", \"\\\\r\");\n\t    s = s.replace(\"\\t\", \"\\\\t\");\n\t    return \"'\" + s + \"'\";\n\t}\n\n\t/**\n\t * Return a string listing the tokens that were expected at this point.\n\t */\n\tfunction getExpectedTokens(e) {\n\t    var result = e.getExpectedTokens().toString(e.recognizer.literalNames, e.recognizer.symbolicNames);\n\t    if (result.startsWith(\"{\")) {\n\t        result = result.substring(1);\n\t    }\n\t    return result;\n\t}\n\n\t/**\n\t * Return a position from the startToken (inclusive) to endToken (exclusive).\n\t * Both tokens must be non-null.\n\t */\n\tfunction getTokenPosition(startToken, endToken) {\n\t    return {\n\t        line: startToken.line,\n\t        column: startToken.column + 1,\n\t        endLine: endToken.line,\n\t        endColumn: endToken.column + 1\n\t    };\n\t}\n\n\t/**\n\t * Return a position describing a single spot with no length.\n\t */\n\tfunction getRawPosition(line, column) {\n\t    return {\n\t        line: line,\n\t        column: column + 1,\n\t        endLine: line,\n\t        endColumn: column + 1\n\t    };\n\t}\n\n\t/**\n\t * Return an error with the given message and position.\n\t */\n\tfunction makeError(message, position) {\n\t    return {\n\t        message: message,\n\t        severity: \"ERROR\",\n\t        libraryError: false,\n\t        position: position\n\t    };\n\t}\n\n\tGeneralErrorListener.prototype.syntaxError = function (recognizer, offendingSymbol, line, column, msg, e) {\n\t    var message;\n\t    var position;\n\n\t    if (e) {\n\t        var input = getTextFromTokens(e.input.tokens, e.startToken, e.offendingToken);\n\t        message = getMsgProblem(e) + escapeAndQuote(input) + \", expecting one of : \" + getExpectedTokens(e);\n\t        position = e.startToken && e.offendingToken ? getTokenPosition(e.startToken, e.offendingToken) : getRawPosition(line, column);\n\t    } else {\n\t        message = msg;\n\t        position = getRawPosition(line, column);\n\t    }\n\n\t    this.errorsList.push(makeError(message, position));\n\t};\n\n\t/**\n\t * Define a visitor that checks that a script only contains\n\t * at most one query (a.k.a. select clause) and doesn't\n\t * contain any query predicates.\n\t * Any errors are appended to the given list.\n\t */\n\tfunction MultipleQueriesVisitor(errorsList) {\n\t    QLParserVisitor.QLParserVisitor.call(this);\n\t    this.errorsList = errorsList;\n\t    return this;\n\t}\n\n\tMultipleQueriesVisitor.prototype = Object.create(QLParserVisitor.QLParserVisitor.prototype);\n\tMultipleQueriesVisitor.prototype.constructor = MultipleQueriesVisitor;\n\n\t/** Visit an annotation */\n\tMultipleQueriesVisitor.prototype.visitSimpleAnnotation = function (ctx) {\n\t    if (ctx.start.text === 'query') {\n\t        var message = \"Query predicates are not supported\";\n\t        var position = {\n\t            line: ctx.start.line,\n\t            // +1 because of going from 0-indexing to 1-indexing\n\t            column: ctx.start.column + 1,\n\t            // a token can not span multiple lines\n\t            endLine: ctx.start.line,\n\t            // +1 because of going from 0-indexing to 1-indexing,\n\t            // and another +1 because of going from an inclusive to an exclusive end point.\n\t            endColumn: ctx.start.column + ctx.start.stop - ctx.start.start + 2\n\t        };\n\t        this.errorsList.push(makeError(message, position));\n\t    }\n\t};\n\n\t// TODO: remove once Antlr's generated visitor doesn't break\n\t// See https://github.com/antlr/antlr4/pull/2196\n\tMultipleQueriesVisitor.prototype.visitChildren = function (ctx) {\n\t    if (ctx.children) {\n\t        return this.visit(ctx.children);\n\t    }\n\t};\n\n\tfunction parse(input) {\n\t    var chars = new antlr4.InputStream(input);\n\t    var lexer = new QLLexer.QLLexer(chars);\n\t    var tokens = new antlr4.CommonTokenStream(lexer);\n\t    var parser = new QLParser.QLParser(tokens);\n\n\t    var errors = [];\n\t    parser.addErrorListener(new GeneralErrorListener(errors));\n\n\t    // This function actually does the parsing.\n\t    // \"script\" is the name of the root rule.\n\t    // Also store the output as it's important that\n\t    // parser.script() is only called once.\n\t    var tree = parser.script();\n\n\t    if (errors.length === 0) {\n\t        // TODO: remove once multiple queries are supported\n\t        // This function adds errors if there are multiple\n\t        // select statements or any query predicates.\n\t        new MultipleQueriesVisitor(errors).visitFileModule(tree);\n\t    }\n\n\t    return errors;\n\t}\n\n\tmodule.exports = { 'parse': parse };\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\texports.atn = __webpack_require__(2);\n\texports.codepointat = __webpack_require__(33);\n\texports.dfa = __webpack_require__(34);\n\texports.fromcodepoint = __webpack_require__(37);\n\texports.tree = __webpack_require__(38);\n\texports.error = __webpack_require__(39);\n\texports.Token = __webpack_require__(6).Token;\n\texports.CharStreams = __webpack_require__(42).CharStreams;\n\texports.CommonToken = __webpack_require__(6).CommonToken;\n\texports.InputStream = __webpack_require__(43).InputStream;\n\texports.FileStream = __webpack_require__(45).FileStream;\n\texports.CommonTokenStream = __webpack_require__(46).CommonTokenStream;\n\texports.Lexer = __webpack_require__(22).Lexer;\n\texports.Parser = __webpack_require__(48).Parser;\n\tvar pc = __webpack_require__(12);\n\texports.PredictionContextCache = pc.PredictionContextCache;\n\texports.ParserRuleContext = __webpack_require__(16).ParserRuleContext;\n\texports.Interval = __webpack_require__(10).Interval;\n\texports.Utils = __webpack_require__(5);\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\n\texports.ATN = __webpack_require__(3).ATN;\n\texports.ATNDeserializer = __webpack_require__(17).ATNDeserializer;\n\texports.LexerATNSimulator = __webpack_require__(21).LexerATNSimulator;\n\texports.ParserATNSimulator = __webpack_require__(31).ParserATNSimulator;\n\texports.PredictionMode = __webpack_require__(32).PredictionMode;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\n\tvar LL1Analyzer = __webpack_require__(4).LL1Analyzer;\n\tvar IntervalSet = __webpack_require__(10).IntervalSet;\n\n\tfunction ATN(grammarType, maxTokenType) {\n\n\t    // Used for runtime deserialization of ATNs from strings///\n\t    // The type of the ATN.\n\t    this.grammarType = grammarType;\n\t    // The maximum value for any symbol recognized by a transition in the ATN.\n\t    this.maxTokenType = maxTokenType;\n\t    this.states = [];\n\t    // Each subrule/rule is a decision point and we must track them so we\n\t    //  can go back later and build DFA predictors for them.  This includes\n\t    //  all the rules, subrules, optional blocks, ()+, ()* etc...\n\t    this.decisionToState = [];\n\t    // Maps from rule index to starting state number.\n\t    this.ruleToStartState = [];\n\t    // Maps from rule index to stop state number.\n\t    this.ruleToStopState = null;\n\t    this.modeNameToStartState = {};\n\t    // For lexer ATNs, this maps the rule index to the resulting token type.\n\t    // For parser ATNs, this maps the rule index to the generated bypass token\n\t    // type if the\n\t    // {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}\n\t    // deserialization option was specified; otherwise, this is {@code null}.\n\t    this.ruleToTokenType = null;\n\t    // For lexer ATNs, this is an array of {@link LexerAction} objects which may\n\t    // be referenced by action transitions in the ATN.\n\t    this.lexerActions = null;\n\t    this.modeToStartState = [];\n\n\t    return this;\n\t}\n\n\t// Compute the set of valid tokens that can occur starting in state {@code s}.\n\t//  If {@code ctx} is null, the set of tokens will not include what can follow\n\t//  the rule surrounding {@code s}. In other words, the set will be\n\t//  restricted to tokens reachable staying within {@code s}'s rule.\n\tATN.prototype.nextTokensInContext = function (s, ctx) {\n\t    var anal = new LL1Analyzer(this);\n\t    return anal.LOOK(s, null, ctx);\n\t};\n\n\t// Compute the set of valid tokens that can occur starting in {@code s} and\n\t// staying in same rule. {@link Token//EPSILON} is in set if we reach end of\n\t// rule.\n\tATN.prototype.nextTokensNoContext = function (s) {\n\t    if (s.nextTokenWithinRule !== null) {\n\t        return s.nextTokenWithinRule;\n\t    }\n\t    s.nextTokenWithinRule = this.nextTokensInContext(s, null);\n\t    s.nextTokenWithinRule.readOnly = true;\n\t    return s.nextTokenWithinRule;\n\t};\n\n\tATN.prototype.nextTokens = function (s, ctx) {\n\t    if (ctx === undefined) {\n\t        return this.nextTokensNoContext(s);\n\t    } else {\n\t        return this.nextTokensInContext(s, ctx);\n\t    }\n\t};\n\n\tATN.prototype.addState = function (state) {\n\t    if (state !== null) {\n\t        state.atn = this;\n\t        state.stateNumber = this.states.length;\n\t    }\n\t    this.states.push(state);\n\t};\n\n\tATN.prototype.removeState = function (state) {\n\t    this.states[state.stateNumber] = null; // just free mem, don't shift states in list\n\t};\n\n\tATN.prototype.defineDecisionState = function (s) {\n\t    this.decisionToState.push(s);\n\t    s.decision = this.decisionToState.length - 1;\n\t    return s.decision;\n\t};\n\n\tATN.prototype.getDecisionState = function (decision) {\n\t    if (this.decisionToState.length === 0) {\n\t        return null;\n\t    } else {\n\t        return this.decisionToState[decision];\n\t    }\n\t};\n\n\t// Computes the set of input symbols which could follow ATN state number\n\t// {@code stateNumber} in the specified full {@code context}. This method\n\t// considers the complete parser context, but does not evaluate semantic\n\t// predicates (i.e. all predicates encountered during the calculation are\n\t// assumed true). If a path in the ATN exists from the starting state to the\n\t// {@link RuleStopState} of the outermost context without matching any\n\t// symbols, {@link Token//EOF} is added to the returned set.\n\t//\n\t// <p>If {@code context} is {@code null}, it is treated as\n\t// {@link ParserRuleContext//EMPTY}.</p>\n\t//\n\t// @param stateNumber the ATN state number\n\t// @param context the full parse context\n\t// @return The set of potentially valid input symbols which could follow the\n\t// specified state in the specified context.\n\t// @throws IllegalArgumentException if the ATN does not contain a state with\n\t// number {@code stateNumber}\n\tvar Token = __webpack_require__(6).Token;\n\n\tATN.prototype.getExpectedTokens = function (stateNumber, ctx) {\n\t    if (stateNumber < 0 || stateNumber >= this.states.length) {\n\t        throw \"Invalid state number.\";\n\t    }\n\t    var s = this.states[stateNumber];\n\t    var following = this.nextTokens(s);\n\t    if (!following.contains(Token.EPSILON)) {\n\t        return following;\n\t    }\n\t    var expected = new IntervalSet();\n\t    expected.addSet(following);\n\t    expected.removeOne(Token.EPSILON);\n\t    while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {\n\t        var invokingState = this.states[ctx.invokingState];\n\t        var rt = invokingState.transitions[0];\n\t        following = this.nextTokens(rt.followState);\n\t        expected.addSet(following);\n\t        expected.removeOne(Token.EPSILON);\n\t        ctx = ctx.parentCtx;\n\t    }\n\t    if (following.contains(Token.EPSILON)) {\n\t        expected.addOne(Token.EOF);\n\t    }\n\t    return expected;\n\t};\n\n\tATN.INVALID_ALT_NUMBER = 0;\n\n\texports.ATN = ATN;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t///\n\n\tvar Set = __webpack_require__(5).Set;\n\tvar BitSet = __webpack_require__(5).BitSet;\n\tvar Token = __webpack_require__(6).Token;\n\tvar ATNConfig = __webpack_require__(7).ATNConfig;\n\tvar Interval = __webpack_require__(10).Interval;\n\tvar IntervalSet = __webpack_require__(10).IntervalSet;\n\tvar RuleStopState = __webpack_require__(8).RuleStopState;\n\tvar RuleTransition = __webpack_require__(11).RuleTransition;\n\tvar NotSetTransition = __webpack_require__(11).NotSetTransition;\n\tvar WildcardTransition = __webpack_require__(11).WildcardTransition;\n\tvar AbstractPredicateTransition = __webpack_require__(11).AbstractPredicateTransition;\n\n\tvar pc = __webpack_require__(12);\n\tvar predictionContextFromRuleContext = pc.predictionContextFromRuleContext;\n\tvar PredictionContext = pc.PredictionContext;\n\tvar SingletonPredictionContext = pc.SingletonPredictionContext;\n\n\tfunction LL1Analyzer(atn) {\n\t    this.atn = atn;\n\t}\n\n\t//* Special value added to the lookahead sets to indicate that we hit\n\t//  a predicate during analysis if {@code seeThruPreds==false}.\n\t///\n\tLL1Analyzer.HIT_PRED = Token.INVALID_TYPE;\n\n\t//*\n\t// Calculates the SLL(1) expected lookahead set for each outgoing transition\n\t// of an {@link ATNState}. The returned array has one element for each\n\t// outgoing transition in {@code s}. If the closure from transition\n\t// <em>i</em> leads to a semantic predicate before matching a symbol, the\n\t// element at index <em>i</em> of the result will be {@code null}.\n\t//\n\t// @param s the ATN state\n\t// @return the expected symbols for each outgoing transition of {@code s}.\n\t///\n\tLL1Analyzer.prototype.getDecisionLookahead = function (s) {\n\t    if (s === null) {\n\t        return null;\n\t    }\n\t    var count = s.transitions.length;\n\t    var look = [];\n\t    for (var alt = 0; alt < count; alt++) {\n\t        look[alt] = new IntervalSet();\n\t        var lookBusy = new Set();\n\t        var seeThruPreds = false; // fail to get lookahead upon pred\n\t        this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY, look[alt], lookBusy, new BitSet(), seeThruPreds, false);\n\t        // Wipe out lookahead for this alternative if we found nothing\n\t        // or we had a predicate when we !seeThruPreds\n\t        if (look[alt].length === 0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {\n\t            look[alt] = null;\n\t        }\n\t    }\n\t    return look;\n\t};\n\n\t//*\n\t// Compute set of tokens that can follow {@code s} in the ATN in the\n\t// specified {@code ctx}.\n\t//\n\t// <p>If {@code ctx} is {@code null} and the end of the rule containing\n\t// {@code s} is reached, {@link Token//EPSILON} is added to the result set.\n\t// If {@code ctx} is not {@code null} and the end of the outermost rule is\n\t// reached, {@link Token//EOF} is added to the result set.</p>\n\t//\n\t// @param s the ATN state\n\t// @param stopState the ATN state to stop at. This can be a\n\t// {@link BlockEndState} to detect epsilon paths through a closure.\n\t// @param ctx the complete parser context, or {@code null} if the context\n\t// should be ignored\n\t//\n\t// @return The set of tokens that can follow {@code s} in the ATN in the\n\t// specified {@code ctx}.\n\t///\n\tLL1Analyzer.prototype.LOOK = function (s, stopState, ctx) {\n\t    var r = new IntervalSet();\n\t    var seeThruPreds = true; // ignore preds; get all lookahead\n\t    ctx = ctx || null;\n\t    var lookContext = ctx !== null ? predictionContextFromRuleContext(s.atn, ctx) : null;\n\t    this._LOOK(s, stopState, lookContext, r, new Set(), new BitSet(), seeThruPreds, true);\n\t    return r;\n\t};\n\n\t//*\n\t// Compute set of tokens that can follow {@code s} in the ATN in the\n\t// specified {@code ctx}.\n\t//\n\t// <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the\n\t// rule containing {@code s} is reached, {@link Token//EPSILON} is added to\n\t// the result set. If {@code ctx} is not {@code null} and {@code addEOF} is\n\t// {@code true} and {@code stopState} or the end of the outermost rule is\n\t// reached, {@link Token//EOF} is added to the result set.</p>\n\t//\n\t// @param s the ATN state.\n\t// @param stopState the ATN state to stop at. This can be a\n\t// {@link BlockEndState} to detect epsilon paths through a closure.\n\t// @param ctx The outer context, or {@code null} if the outer context should\n\t// not be used.\n\t// @param look The result lookahead set.\n\t// @param lookBusy A set used for preventing epsilon closures in the ATN\n\t// from causing a stack overflow. Outside code should pass\n\t// {@code new Set<ATNConfig>} for this argument.\n\t// @param calledRuleStack A set used for preventing left recursion in the\n\t// ATN from causing a stack overflow. Outside code should pass\n\t// {@code new BitSet()} for this argument.\n\t// @param seeThruPreds {@code true} to true semantic predicates as\n\t// implicitly {@code true} and \"see through them\", otherwise {@code false}\n\t// to treat semantic predicates as opaque and add {@link //HIT_PRED} to the\n\t// result if one is encountered.\n\t// @param addEOF Add {@link Token//EOF} to the result if the end of the\n\t// outermost context is reached. This parameter has no effect if {@code ctx}\n\t// is {@code null}.\n\t///\n\tLL1Analyzer.prototype._LOOK = function (s, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {\n\t    var c = new ATNConfig({ state: s, alt: 0, context: ctx }, null);\n\t    if (lookBusy.contains(c)) {\n\t        return;\n\t    }\n\t    lookBusy.add(c);\n\t    if (s === stopState) {\n\t        if (ctx === null) {\n\t            look.addOne(Token.EPSILON);\n\t            return;\n\t        } else if (ctx.isEmpty() && addEOF) {\n\t            look.addOne(Token.EOF);\n\t            return;\n\t        }\n\t    }\n\t    if (s instanceof RuleStopState) {\n\t        if (ctx === null) {\n\t            look.addOne(Token.EPSILON);\n\t            return;\n\t        } else if (ctx.isEmpty() && addEOF) {\n\t            look.addOne(Token.EOF);\n\t            return;\n\t        }\n\t        if (ctx !== PredictionContext.EMPTY) {\n\t            // run thru all possible stack tops in ctx\n\t            for (var i = 0; i < ctx.length; i++) {\n\t                var returnState = this.atn.states[ctx.getReturnState(i)];\n\t                var removed = calledRuleStack.contains(returnState.ruleIndex);\n\t                try {\n\t                    calledRuleStack.remove(returnState.ruleIndex);\n\t                    this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n\t                } finally {\n\t                    if (removed) {\n\t                        calledRuleStack.add(returnState.ruleIndex);\n\t                    }\n\t                }\n\t            }\n\t            return;\n\t        }\n\t    }\n\t    for (var j = 0; j < s.transitions.length; j++) {\n\t        var t = s.transitions[j];\n\t        if (t.constructor === RuleTransition) {\n\t            if (calledRuleStack.contains(t.target.ruleIndex)) {\n\t                continue;\n\t            }\n\t            var newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);\n\t            try {\n\t                calledRuleStack.add(t.target.ruleIndex);\n\t                this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n\t            } finally {\n\t                calledRuleStack.remove(t.target.ruleIndex);\n\t            }\n\t        } else if (t instanceof AbstractPredicateTransition) {\n\t            if (seeThruPreds) {\n\t                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n\t            } else {\n\t                look.addOne(LL1Analyzer.HIT_PRED);\n\t            }\n\t        } else if (t.isEpsilon) {\n\t            this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n\t        } else if (t.constructor === WildcardTransition) {\n\t            look.addRange(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);\n\t        } else {\n\t            var set = t.label;\n\t            if (set !== null) {\n\t                if (t instanceof NotSetTransition) {\n\t                    set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);\n\t                }\n\t                look.addSet(set);\n\t            }\n\t        }\n\t    }\n\t};\n\n\texports.LL1Analyzer = LL1Analyzer;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\n\tfunction arrayToString(a) {\n\t    return \"[\" + a.join(\", \") + \"]\";\n\t}\n\n\tString.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));\n\n\tString.prototype.hashCode = function () {\n\t    var remainder,\n\t        bytes,\n\t        h1,\n\t        h1b,\n\t        c1,\n\t        c1b,\n\t        c2,\n\t        c2b,\n\t        k1,\n\t        i,\n\t        key = this.toString();\n\n\t    remainder = key.length & 3; // key.length % 4\n\t    bytes = key.length - remainder;\n\t    h1 = String.prototype.seed;\n\t    c1 = 0xcc9e2d51;\n\t    c2 = 0x1b873593;\n\t    i = 0;\n\n\t    while (i < bytes) {\n\t        k1 = key.charCodeAt(i) & 0xff | (key.charCodeAt(++i) & 0xff) << 8 | (key.charCodeAt(++i) & 0xff) << 16 | (key.charCodeAt(++i) & 0xff) << 24;\n\t        ++i;\n\n\t        k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;\n\t        k1 = k1 << 15 | k1 >>> 17;\n\t        k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;\n\n\t        h1 ^= k1;\n\t        h1 = h1 << 13 | h1 >>> 19;\n\t        h1b = (h1 & 0xffff) * 5 + (((h1 >>> 16) * 5 & 0xffff) << 16) & 0xffffffff;\n\t        h1 = (h1b & 0xffff) + 0x6b64 + (((h1b >>> 16) + 0xe654 & 0xffff) << 16);\n\t    }\n\n\t    k1 = 0;\n\n\t    switch (remainder) {\n\t        case 3:\n\t            k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n\t        case 2:\n\t            k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n\t        case 1:\n\t            k1 ^= key.charCodeAt(i) & 0xff;\n\n\t            k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;\n\t            k1 = k1 << 15 | k1 >>> 17;\n\t            k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;\n\t            h1 ^= k1;\n\t    }\n\n\t    h1 ^= key.length;\n\n\t    h1 ^= h1 >>> 16;\n\t    h1 = (h1 & 0xffff) * 0x85ebca6b + (((h1 >>> 16) * 0x85ebca6b & 0xffff) << 16) & 0xffffffff;\n\t    h1 ^= h1 >>> 13;\n\t    h1 = (h1 & 0xffff) * 0xc2b2ae35 + (((h1 >>> 16) * 0xc2b2ae35 & 0xffff) << 16) & 0xffffffff;\n\t    h1 ^= h1 >>> 16;\n\n\t    return h1 >>> 0;\n\t};\n\n\tfunction standardEqualsFunction(a, b) {\n\t    return a.equals(b);\n\t}\n\n\tfunction standardHashCodeFunction(a) {\n\t    return a.hashCode();\n\t}\n\n\tfunction Set(hashFunction, equalsFunction) {\n\t    this.data = {};\n\t    this.hashFunction = hashFunction || standardHashCodeFunction;\n\t    this.equalsFunction = equalsFunction || standardEqualsFunction;\n\t    return this;\n\t}\n\n\tObject.defineProperty(Set.prototype, \"length\", {\n\t    get: function get() {\n\t        var l = 0;\n\t        for (var key in this.data) {\n\t            if (key.indexOf(\"hash_\") === 0) {\n\t                l = l + this.data[key].length;\n\t            }\n\t        }\n\t        return l;\n\t    }\n\t});\n\n\tSet.prototype.add = function (value) {\n\t    var hash = this.hashFunction(value);\n\t    var key = \"hash_\" + hash;\n\t    if (key in this.data) {\n\t        var values = this.data[key];\n\t        for (var i = 0; i < values.length; i++) {\n\t            if (this.equalsFunction(value, values[i])) {\n\t                return values[i];\n\t            }\n\t        }\n\t        values.push(value);\n\t        return value;\n\t    } else {\n\t        this.data[key] = [value];\n\t        return value;\n\t    }\n\t};\n\n\tSet.prototype.contains = function (value) {\n\t    return this.get(value) != null;\n\t};\n\n\tSet.prototype.get = function (value) {\n\t    var hash = this.hashFunction(value);\n\t    var key = \"hash_\" + hash;\n\t    if (key in this.data) {\n\t        var values = this.data[key];\n\t        for (var i = 0; i < values.length; i++) {\n\t            if (this.equalsFunction(value, values[i])) {\n\t                return values[i];\n\t            }\n\t        }\n\t    }\n\t    return null;\n\t};\n\n\tSet.prototype.values = function () {\n\t    var l = [];\n\t    for (var key in this.data) {\n\t        if (key.indexOf(\"hash_\") === 0) {\n\t            l = l.concat(this.data[key]);\n\t        }\n\t    }\n\t    return l;\n\t};\n\n\tSet.prototype.toString = function () {\n\t    return arrayToString(this.values());\n\t};\n\n\tfunction BitSet() {\n\t    this.data = [];\n\t    return this;\n\t}\n\n\tBitSet.prototype.add = function (value) {\n\t    this.data[value] = true;\n\t};\n\n\tBitSet.prototype.or = function (set) {\n\t    var bits = this;\n\t    Object.keys(set.data).map(function (alt) {\n\t        bits.add(alt);\n\t    });\n\t};\n\n\tBitSet.prototype.remove = function (value) {\n\t    delete this.data[value];\n\t};\n\n\tBitSet.prototype.contains = function (value) {\n\t    return this.data[value] === true;\n\t};\n\n\tBitSet.prototype.values = function () {\n\t    return Object.keys(this.data);\n\t};\n\n\tBitSet.prototype.minValue = function () {\n\t    return Math.min.apply(null, this.values());\n\t};\n\n\tBitSet.prototype.hashCode = function () {\n\t    var hash = new Hash();\n\t    hash.update(this.values());\n\t    return hash.finish();\n\t};\n\n\tBitSet.prototype.equals = function (other) {\n\t    if (!(other instanceof BitSet)) {\n\t        return false;\n\t    }\n\t    return this.hashCode() === other.hashCode();\n\t};\n\n\tObject.defineProperty(BitSet.prototype, \"length\", {\n\t    get: function get() {\n\t        return this.values().length;\n\t    }\n\t});\n\n\tBitSet.prototype.toString = function () {\n\t    return \"{\" + this.values().join(\", \") + \"}\";\n\t};\n\n\tfunction Map(hashFunction, equalsFunction) {\n\t    this.data = {};\n\t    this.hashFunction = hashFunction || standardHashCodeFunction;\n\t    this.equalsFunction = equalsFunction || standardEqualsFunction;\n\t    return this;\n\t}\n\n\tObject.defineProperty(Map.prototype, \"length\", {\n\t    get: function get() {\n\t        var l = 0;\n\t        for (var hashKey in this.data) {\n\t            if (hashKey.indexOf(\"hash_\") === 0) {\n\t                l = l + this.data[hashKey].length;\n\t            }\n\t        }\n\t        return l;\n\t    }\n\t});\n\n\tMap.prototype.put = function (key, value) {\n\t    var hashKey = \"hash_\" + this.hashFunction(key);\n\t    if (hashKey in this.data) {\n\t        var entries = this.data[hashKey];\n\t        for (var i = 0; i < entries.length; i++) {\n\t            var entry = entries[i];\n\t            if (this.equalsFunction(key, entry.key)) {\n\t                var oldValue = entry.value;\n\t                entry.value = value;\n\t                return oldValue;\n\t            }\n\t        }\n\t        entries.push({ key: key, value: value });\n\t        return value;\n\t    } else {\n\t        this.data[hashKey] = [{ key: key, value: value }];\n\t        return value;\n\t    }\n\t};\n\n\tMap.prototype.containsKey = function (key) {\n\t    var hashKey = \"hash_\" + this.hashFunction(key);\n\t    if (hashKey in this.data) {\n\t        var entries = this.data[hashKey];\n\t        for (var i = 0; i < entries.length; i++) {\n\t            var entry = entries[i];\n\t            if (this.equalsFunction(key, entry.key)) return true;\n\t        }\n\t    }\n\t    return false;\n\t};\n\n\tMap.prototype.get = function (key) {\n\t    var hashKey = \"hash_\" + this.hashFunction(key);\n\t    if (hashKey in this.data) {\n\t        var entries = this.data[hashKey];\n\t        for (var i = 0; i < entries.length; i++) {\n\t            var entry = entries[i];\n\t            if (this.equalsFunction(key, entry.key)) return entry.value;\n\t        }\n\t    }\n\t    return null;\n\t};\n\n\tMap.prototype.entries = function () {\n\t    var l = [];\n\t    for (var key in this.data) {\n\t        if (key.indexOf(\"hash_\") === 0) {\n\t            l = l.concat(this.data[key]);\n\t        }\n\t    }\n\t    return l;\n\t};\n\n\tMap.prototype.getKeys = function () {\n\t    return this.entries().map(function (e) {\n\t        return e.key;\n\t    });\n\t};\n\n\tMap.prototype.getValues = function () {\n\t    return this.entries().map(function (e) {\n\t        return e.value;\n\t    });\n\t};\n\n\tMap.prototype.toString = function () {\n\t    var ss = this.entries().map(function (entry) {\n\t        return '{' + entry.key + ':' + entry.value + '}';\n\t    });\n\t    return '[' + ss.join(\", \") + ']';\n\t};\n\n\tfunction AltDict() {\n\t    this.data = {};\n\t    return this;\n\t}\n\n\tAltDict.prototype.get = function (key) {\n\t    key = \"k-\" + key;\n\t    if (key in this.data) {\n\t        return this.data[key];\n\t    } else {\n\t        return null;\n\t    }\n\t};\n\n\tAltDict.prototype.put = function (key, value) {\n\t    key = \"k-\" + key;\n\t    this.data[key] = value;\n\t};\n\n\tAltDict.prototype.values = function () {\n\t    var data = this.data;\n\t    var keys = Object.keys(this.data);\n\t    return keys.map(function (key) {\n\t        return data[key];\n\t    });\n\t};\n\n\tfunction DoubleDict() {\n\t    return this;\n\t}\n\n\tfunction Hash() {\n\t    this.count = 0;\n\t    this.hash = 0;\n\t    return this;\n\t}\n\n\tHash.prototype.update = function () {\n\t    for (var i = 0; i < arguments.length; i++) {\n\t        var value = arguments[i];\n\t        if (value == null) continue;\n\t        if (Array.isArray(value)) this.update.apply(value);else {\n\t            var k = 0;\n\t            switch (typeof value === \"undefined\" ? \"undefined\" : _typeof(value)) {\n\t                case 'undefined':\n\t                case 'function':\n\t                    continue;\n\t                case 'number':\n\t                case 'boolean':\n\t                    k = value;\n\t                    break;\n\t                case 'string':\n\t                    k = value.hashCode();\n\t                    break;\n\t                default:\n\t                    value.updateHashCode(this);\n\t                    continue;\n\t            }\n\t            k = k * 0xCC9E2D51;\n\t            k = k << 15 | k >>> 32 - 15;\n\t            k = k * 0x1B873593;\n\t            this.count = this.count + 1;\n\t            var hash = this.hash ^ k;\n\t            hash = hash << 13 | hash >>> 32 - 13;\n\t            hash = hash * 5 + 0xE6546B64;\n\t            this.hash = hash;\n\t        }\n\t    }\n\t};\n\n\tHash.prototype.finish = function () {\n\t    var hash = this.hash ^ this.count * 4;\n\t    hash = hash ^ hash >>> 16;\n\t    hash = hash * 0x85EBCA6B;\n\t    hash = hash ^ hash >>> 13;\n\t    hash = hash * 0xC2B2AE35;\n\t    hash = hash ^ hash >>> 16;\n\t    return hash;\n\t};\n\n\tfunction hashStuff() {\n\t    var hash = new Hash();\n\t    hash.update.apply(arguments);\n\t    return hash.finish();\n\t}\n\n\tDoubleDict.prototype.get = function (a, b) {\n\t    var d = this[a] || null;\n\t    return d === null ? null : d[b] || null;\n\t};\n\n\tDoubleDict.prototype.set = function (a, b, o) {\n\t    var d = this[a] || null;\n\t    if (d === null) {\n\t        d = {};\n\t        this[a] = d;\n\t    }\n\t    d[b] = o;\n\t};\n\n\tfunction escapeWhitespace(s, escapeSpaces) {\n\t    s = s.replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\");\n\t    if (escapeSpaces) {\n\t        s = s.replace(/ /g, \"\\xB7\");\n\t    }\n\t    return s;\n\t}\n\n\tfunction titleCase(str) {\n\t    return str.replace(/\\w\\S*/g, function (txt) {\n\t        return txt.charAt(0).toUpperCase() + txt.substr(1);\n\t    });\n\t};\n\n\tfunction equalArrays(a, b) {\n\t    if (!Array.isArray(a) || !Array.isArray(b)) return false;\n\t    if (a == b) return true;\n\t    if (a.length != b.length) return false;\n\t    for (var i = 0; i < a.length; i++) {\n\t        if (a[i] == b[i]) continue;\n\t        if (!a[i].equals(b[i])) return false;\n\t    }\n\t    return true;\n\t};\n\n\texports.Hash = Hash;\n\texports.Set = Set;\n\texports.Map = Map;\n\texports.BitSet = BitSet;\n\texports.AltDict = AltDict;\n\texports.DoubleDict = DoubleDict;\n\texports.hashStuff = hashStuff;\n\texports.escapeWhitespace = escapeWhitespace;\n\texports.arrayToString = arrayToString;\n\texports.titleCase = titleCase;\n\texports.equalArrays = equalArrays;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t//\n\n\t// A token has properties: text, type, line, character position in the line\n\t// (so we can ignore tabs), token channel, index, and source from which\n\t// we obtained this token.\n\n\tfunction Token() {\n\t\tthis.source = null;\n\t\tthis.type = null; // token type of the token\n\t\tthis.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL\n\t\tthis.start = null; // optional; return -1 if not implemented.\n\t\tthis.stop = null; // optional; return -1 if not implemented.\n\t\tthis.tokenIndex = null; // from 0..n-1 of the token object in the input stream\n\t\tthis.line = null; // line=1..n of the 1st character\n\t\tthis.column = null; // beginning of the line at which it occurs, 0..n-1\n\t\tthis._text = null; // text of the token.\n\t\treturn this;\n\t}\n\n\tToken.INVALID_TYPE = 0;\n\n\t// During lookahead operations, this \"token\" signifies we hit rule end ATN state\n\t// and did not follow it despite needing to.\n\tToken.EPSILON = -2;\n\n\tToken.MIN_USER_TOKEN_TYPE = 1;\n\n\tToken.EOF = -1;\n\n\t// All tokens go to the parser (unless skip() is called in that rule)\n\t// on a particular \"channel\". The parser tunes to a particular channel\n\t// so that whitespace etc... can go to the parser on a \"hidden\" channel.\n\n\tToken.DEFAULT_CHANNEL = 0;\n\n\t// Anything on different channel than DEFAULT_CHANNEL is not parsed\n\t// by parser.\n\n\tToken.HIDDEN_CHANNEL = 1;\n\n\t// Explicitly set the text for this token. If {code text} is not\n\t// {@code null}, then {@link //getText} will return this value rather than\n\t// extracting the text from the input.\n\t//\n\t// @param text The explicit text of the token, or {@code null} if the text\n\t// should be obtained from the input along with the start and stop indexes\n\t// of the token.\n\n\tObject.defineProperty(Token.prototype, \"text\", {\n\t\tget: function get() {\n\t\t\treturn this._text;\n\t\t},\n\t\tset: function set(text) {\n\t\t\tthis._text = text;\n\t\t}\n\t});\n\n\tToken.prototype.getTokenSource = function () {\n\t\treturn this.source[0];\n\t};\n\n\tToken.prototype.getInputStream = function () {\n\t\treturn this.source[1];\n\t};\n\n\tfunction CommonToken(source, type, channel, start, stop) {\n\t\tToken.call(this);\n\t\tthis.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;\n\t\tthis.type = type !== undefined ? type : null;\n\t\tthis.channel = channel !== undefined ? channel : Token.DEFAULT_CHANNEL;\n\t\tthis.start = start !== undefined ? start : -1;\n\t\tthis.stop = stop !== undefined ? stop : -1;\n\t\tthis.tokenIndex = -1;\n\t\tif (this.source[0] !== null) {\n\t\t\tthis.line = source[0].line;\n\t\t\tthis.column = source[0].column;\n\t\t} else {\n\t\t\tthis.column = -1;\n\t\t}\n\t\treturn this;\n\t}\n\n\tCommonToken.prototype = Object.create(Token.prototype);\n\tCommonToken.prototype.constructor = CommonToken;\n\n\t// An empty {@link Pair} which is used as the default value of\n\t// {@link //source} for tokens that do not have a source.\n\tCommonToken.EMPTY_SOURCE = [null, null];\n\n\t// Constructs a new {@link CommonToken} as a copy of another {@link Token}.\n\t//\n\t// <p>\n\t// If {@code oldToken} is also a {@link CommonToken} instance, the newly\n\t// constructed token will share a reference to the {@link //text} field and\n\t// the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will\n\t// be assigned the result of calling {@link //getText}, and {@link //source}\n\t// will be constructed from the result of {@link Token//getTokenSource} and\n\t// {@link Token//getInputStream}.</p>\n\t//\n\t// @param oldToken The token to copy.\n\t//\n\tCommonToken.prototype.clone = function () {\n\t\tvar t = new CommonToken(this.source, this.type, this.channel, this.start, this.stop);\n\t\tt.tokenIndex = this.tokenIndex;\n\t\tt.line = this.line;\n\t\tt.column = this.column;\n\t\tt.text = this.text;\n\t\treturn t;\n\t};\n\n\tObject.defineProperty(CommonToken.prototype, \"text\", {\n\t\tget: function get() {\n\t\t\tif (this._text !== null) {\n\t\t\t\treturn this._text;\n\t\t\t}\n\t\t\tvar input = this.getInputStream();\n\t\t\tif (input === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tvar n = input.size;\n\t\t\tif (this.start < n && this.stop < n) {\n\t\t\t\treturn input.getText(this.start, this.stop);\n\t\t\t} else {\n\t\t\t\treturn \"<EOF>\";\n\t\t\t}\n\t\t},\n\t\tset: function set(text) {\n\t\t\tthis._text = text;\n\t\t}\n\t});\n\n\tCommonToken.prototype.toString = function () {\n\t\tvar txt = this.text;\n\t\tif (txt !== null) {\n\t\t\ttxt = txt.replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/\\t/g, \"\\\\t\");\n\t\t} else {\n\t\t\ttxt = \"<no text>\";\n\t\t}\n\t\treturn \"[@\" + this.tokenIndex + \",\" + this.start + \":\" + this.stop + \"='\" + txt + \"',<\" + this.type + \">\" + (this.channel > 0 ? \",channel=\" + this.channel : \"\") + \",\" + this.line + \":\" + this.column + \"]\";\n\t};\n\n\texports.Token = Token;\n\texports.CommonToken = CommonToken;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t///\n\n\t// A tuple: (ATN state, predicted alt, syntactic, semantic context).\n\t//  The syntactic context is a graph-structured stack node whose\n\t//  path(s) to the root is the rule invocation(s)\n\t//  chain used to arrive at the state.  The semantic context is\n\t//  the tree of semantic predicates encountered before reaching\n\t//  an ATN state.\n\t///\n\n\tvar DecisionState = __webpack_require__(8).DecisionState;\n\tvar SemanticContext = __webpack_require__(9).SemanticContext;\n\tvar Hash = __webpack_require__(5).Hash;\n\n\tfunction checkParams(params, isCfg) {\n\t    if (params === null) {\n\t        var result = { state: null, alt: null, context: null, semanticContext: null };\n\t        if (isCfg) {\n\t            result.reachesIntoOuterContext = 0;\n\t        }\n\t        return result;\n\t    } else {\n\t        var props = {};\n\t        props.state = params.state || null;\n\t        props.alt = params.alt === undefined ? null : params.alt;\n\t        props.context = params.context || null;\n\t        props.semanticContext = params.semanticContext || null;\n\t        if (isCfg) {\n\t            props.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;\n\t            props.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;\n\t        }\n\t        return props;\n\t    }\n\t}\n\n\tfunction ATNConfig(params, config) {\n\t    this.checkContext(params, config);\n\t    params = checkParams(params);\n\t    config = checkParams(config, true);\n\t    // The ATN state associated with this configuration///\n\t    this.state = params.state !== null ? params.state : config.state;\n\t    // What alt (or lexer rule) is predicted by this configuration///\n\t    this.alt = params.alt !== null ? params.alt : config.alt;\n\t    // The stack of invoking states leading to the rule/states associated\n\t    //  with this config.  We track only those contexts pushed during\n\t    //  execution of the ATN simulator.\n\t    this.context = params.context !== null ? params.context : config.context;\n\t    this.semanticContext = params.semanticContext !== null ? params.semanticContext : config.semanticContext !== null ? config.semanticContext : SemanticContext.NONE;\n\t    // We cannot execute predicates dependent upon local context unless\n\t    // we know for sure we are in the correct context. Because there is\n\t    // no way to do this efficiently, we simply cannot evaluate\n\t    // dependent predicates unless we are in the rule that initially\n\t    // invokes the ATN simulator.\n\t    //\n\t    // closure() tracks the depth of how far we dip into the\n\t    // outer context: depth &gt; 0.  Note that it may not be totally\n\t    // accurate depth since I don't ever decrement. TODO: make it a boolean then\n\t    this.reachesIntoOuterContext = config.reachesIntoOuterContext;\n\t    this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;\n\t    return this;\n\t}\n\n\tATNConfig.prototype.checkContext = function (params, config) {\n\t    if ((params.context === null || params.context === undefined) && (config === null || config.context === null || config.context === undefined)) {\n\t        this.context = null;\n\t    }\n\t};\n\n\tATNConfig.prototype.hashCode = function () {\n\t    var hash = new Hash();\n\t    this.updateHashCode(hash);\n\t    return hash.finish();\n\t};\n\n\tATNConfig.prototype.updateHashCode = function (hash) {\n\t    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);\n\t};\n\n\t// An ATN configuration is equal to another if both have\n\t//  the same state, they predict the same alternative, and\n\t//  syntactic/semantic contexts are the same.\n\n\tATNConfig.prototype.equals = function (other) {\n\t    if (this === other) {\n\t        return true;\n\t    } else if (!(other instanceof ATNConfig)) {\n\t        return false;\n\t    } else {\n\t        return this.state.stateNumber === other.state.stateNumber && this.alt === other.alt && (this.context === null ? other.context === null : this.context.equals(other.context)) && this.semanticContext.equals(other.semanticContext) && this.precedenceFilterSuppressed === other.precedenceFilterSuppressed;\n\t    }\n\t};\n\n\tATNConfig.prototype.hashCodeForConfigSet = function () {\n\t    var hash = new Hash();\n\t    hash.update(this.state.stateNumber, this.alt, this.semanticContext);\n\t    return hash.finish();\n\t};\n\n\tATNConfig.prototype.equalsForConfigSet = function (other) {\n\t    if (this === other) {\n\t        return true;\n\t    } else if (!(other instanceof ATNConfig)) {\n\t        return false;\n\t    } else {\n\t        return this.state.stateNumber === other.state.stateNumber && this.alt === other.alt && this.semanticContext.equals(other.semanticContext);\n\t    }\n\t};\n\n\tATNConfig.prototype.toString = function () {\n\t    return \"(\" + this.state + \",\" + this.alt + (this.context !== null ? \",[\" + this.context.toString() + \"]\" : \"\") + (this.semanticContext !== SemanticContext.NONE ? \",\" + this.semanticContext.toString() : \"\") + (this.reachesIntoOuterContext > 0 ? \",up=\" + this.reachesIntoOuterContext : \"\") + \")\";\n\t};\n\n\tfunction LexerATNConfig(params, config) {\n\t    ATNConfig.call(this, params, config);\n\n\t    // This is the backing field for {@link //getLexerActionExecutor}.\n\t    var lexerActionExecutor = params.lexerActionExecutor || null;\n\t    this.lexerActionExecutor = lexerActionExecutor || (config !== null ? config.lexerActionExecutor : null);\n\t    this.passedThroughNonGreedyDecision = config !== null ? this.checkNonGreedyDecision(config, this.state) : false;\n\t    return this;\n\t}\n\n\tLexerATNConfig.prototype = Object.create(ATNConfig.prototype);\n\tLexerATNConfig.prototype.constructor = LexerATNConfig;\n\n\tLexerATNConfig.prototype.updateHashCode = function (hash) {\n\t    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);\n\t};\n\n\tLexerATNConfig.prototype.equals = function (other) {\n\t    return this === other || other instanceof LexerATNConfig && this.passedThroughNonGreedyDecision == other.passedThroughNonGreedyDecision && (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) && ATNConfig.prototype.equals.call(this, other);\n\t};\n\n\tLexerATNConfig.prototype.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;\n\n\tLexerATNConfig.prototype.equalsForConfigSet = LexerATNConfig.prototype.equals;\n\n\tLexerATNConfig.prototype.checkNonGreedyDecision = function (source, target) {\n\t    return source.passedThroughNonGreedyDecision || target instanceof DecisionState && target.nonGreedy;\n\t};\n\n\texports.ATNConfig = ATNConfig;\n\texports.LexerATNConfig = LexerATNConfig;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\n\t//\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t//\n\n\t// The following images show the relation of states and\n\t// {@link ATNState//transitions} for various grammar constructs.\n\t//\n\t// <ul>\n\t//\n\t// <li>Solid edges marked with an &//0949; indicate a required\n\t// {@link EpsilonTransition}.</li>\n\t//\n\t// <li>Dashed edges indicate locations where any transition derived from\n\t// {@link Transition} might appear.</li>\n\t//\n\t// <li>Dashed nodes are place holders for either a sequence of linked\n\t// {@link BasicState} states or the inclusion of a block representing a nested\n\t// construct in one of the forms below.</li>\n\t//\n\t// <li>Nodes showing multiple outgoing alternatives with a {@code ...} support\n\t// any number of alternatives (one or more). Nodes without the {@code ...} only\n\t// support the exact number of alternatives shown in the diagram.</li>\n\t//\n\t// </ul>\n\t//\n\t// <h2>Basic Blocks</h2>\n\t//\n\t// <h3>Rule</h3>\n\t//\n\t// <embed src=\"images/Rule.svg\" type=\"image/svg+xml\"/>\n\t//\n\t// <h3>Block of 1 or more alternatives</h3>\n\t//\n\t// <embed src=\"images/Block.svg\" type=\"image/svg+xml\"/>\n\t//\n\t// <h2>Greedy Loops</h2>\n\t//\n\t// <h3>Greedy Closure: {@code (...)*}</h3>\n\t//\n\t// <embed src=\"images/ClosureGreedy.svg\" type=\"image/svg+xml\"/>\n\t//\n\t// <h3>Greedy Positive Closure: {@code (...)+}</h3>\n\t//\n\t// <embed src=\"images/PositiveClosureGreedy.svg\" type=\"image/svg+xml\"/>\n\t//\n\t// <h3>Greedy Optional: {@code (...)?}</h3>\n\t//\n\t// <embed src=\"images/OptionalGreedy.svg\" type=\"image/svg+xml\"/>\n\t//\n\t// <h2>Non-Greedy Loops</h2>\n\t//\n\t// <h3>Non-Greedy Closure: {@code (...)*?}</h3>\n\t//\n\t// <embed src=\"images/ClosureNonGreedy.svg\" type=\"image/svg+xml\"/>\n\t//\n\t// <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>\n\t//\n\t// <embed src=\"images/PositiveClosureNonGreedy.svg\" type=\"image/svg+xml\"/>\n\t//\n\t// <h3>Non-Greedy Optional: {@code (...)??}</h3>\n\t//\n\t// <embed src=\"images/OptionalNonGreedy.svg\" type=\"image/svg+xml\"/>\n\t//\n\n\tvar INITIAL_NUM_TRANSITIONS = 4;\n\n\tfunction ATNState() {\n\t  // Which ATN are we in?\n\t  this.atn = null;\n\t  this.stateNumber = ATNState.INVALID_STATE_NUMBER;\n\t  this.stateType = null;\n\t  this.ruleIndex = 0; // at runtime, we don't have Rule objects\n\t  this.epsilonOnlyTransitions = false;\n\t  // Track the transitions emanating from this ATN state.\n\t  this.transitions = [];\n\t  // Used to cache lookahead during parsing, not used during construction\n\t  this.nextTokenWithinRule = null;\n\t  return this;\n\t}\n\n\t// constants for serialization\n\tATNState.INVALID_TYPE = 0;\n\tATNState.BASIC = 1;\n\tATNState.RULE_START = 2;\n\tATNState.BLOCK_START = 3;\n\tATNState.PLUS_BLOCK_START = 4;\n\tATNState.STAR_BLOCK_START = 5;\n\tATNState.TOKEN_START = 6;\n\tATNState.RULE_STOP = 7;\n\tATNState.BLOCK_END = 8;\n\tATNState.STAR_LOOP_BACK = 9;\n\tATNState.STAR_LOOP_ENTRY = 10;\n\tATNState.PLUS_LOOP_BACK = 11;\n\tATNState.LOOP_END = 12;\n\n\tATNState.serializationNames = [\"INVALID\", \"BASIC\", \"RULE_START\", \"BLOCK_START\", \"PLUS_BLOCK_START\", \"STAR_BLOCK_START\", \"TOKEN_START\", \"RULE_STOP\", \"BLOCK_END\", \"STAR_LOOP_BACK\", \"STAR_LOOP_ENTRY\", \"PLUS_LOOP_BACK\", \"LOOP_END\"];\n\n\tATNState.INVALID_STATE_NUMBER = -1;\n\n\tATNState.prototype.toString = function () {\n\t  return this.stateNumber;\n\t};\n\n\tATNState.prototype.equals = function (other) {\n\t  if (other instanceof ATNState) {\n\t    return this.stateNumber === other.stateNumber;\n\t  } else {\n\t    return false;\n\t  }\n\t};\n\n\tATNState.prototype.isNonGreedyExitState = function () {\n\t  return false;\n\t};\n\n\tATNState.prototype.addTransition = function (trans, index) {\n\t  if (index === undefined) {\n\t    index = -1;\n\t  }\n\t  if (this.transitions.length === 0) {\n\t    this.epsilonOnlyTransitions = trans.isEpsilon;\n\t  } else if (this.epsilonOnlyTransitions !== trans.isEpsilon) {\n\t    this.epsilonOnlyTransitions = false;\n\t  }\n\t  if (index === -1) {\n\t    this.transitions.push(trans);\n\t  } else {\n\t    this.transitions.splice(index, 1, trans);\n\t  }\n\t};\n\n\tfunction BasicState() {\n\t  ATNState.call(this);\n\t  this.stateType = ATNState.BASIC;\n\t  return this;\n\t}\n\n\tBasicState.prototype = Object.create(ATNState.prototype);\n\tBasicState.prototype.constructor = BasicState;\n\n\tfunction DecisionState() {\n\t  ATNState.call(this);\n\t  this.decision = -1;\n\t  this.nonGreedy = false;\n\t  return this;\n\t}\n\n\tDecisionState.prototype = Object.create(ATNState.prototype);\n\tDecisionState.prototype.constructor = DecisionState;\n\n\t//  The start of a regular {@code (...)} block.\n\tfunction BlockStartState() {\n\t  DecisionState.call(this);\n\t  this.endState = null;\n\t  return this;\n\t}\n\n\tBlockStartState.prototype = Object.create(DecisionState.prototype);\n\tBlockStartState.prototype.constructor = BlockStartState;\n\n\tfunction BasicBlockStartState() {\n\t  BlockStartState.call(this);\n\t  this.stateType = ATNState.BLOCK_START;\n\t  return this;\n\t}\n\n\tBasicBlockStartState.prototype = Object.create(BlockStartState.prototype);\n\tBasicBlockStartState.prototype.constructor = BasicBlockStartState;\n\n\t// Terminal node of a simple {@code (a|b|c)} block.\n\tfunction BlockEndState() {\n\t  ATNState.call(this);\n\t  this.stateType = ATNState.BLOCK_END;\n\t  this.startState = null;\n\t  return this;\n\t}\n\n\tBlockEndState.prototype = Object.create(ATNState.prototype);\n\tBlockEndState.prototype.constructor = BlockEndState;\n\n\t// The last node in the ATN for a rule, unless that rule is the start symbol.\n\t//  In that case, there is one transition to EOF. Later, we might encode\n\t//  references to all calls to this rule to compute FOLLOW sets for\n\t//  error handling.\n\t//\n\tfunction RuleStopState() {\n\t  ATNState.call(this);\n\t  this.stateType = ATNState.RULE_STOP;\n\t  return this;\n\t}\n\n\tRuleStopState.prototype = Object.create(ATNState.prototype);\n\tRuleStopState.prototype.constructor = RuleStopState;\n\n\tfunction RuleStartState() {\n\t  ATNState.call(this);\n\t  this.stateType = ATNState.RULE_START;\n\t  this.stopState = null;\n\t  this.isPrecedenceRule = false;\n\t  return this;\n\t}\n\n\tRuleStartState.prototype = Object.create(ATNState.prototype);\n\tRuleStartState.prototype.constructor = RuleStartState;\n\n\t// Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:\n\t//  one to the loop back to start of the block and one to exit.\n\t//\n\tfunction PlusLoopbackState() {\n\t  DecisionState.call(this);\n\t  this.stateType = ATNState.PLUS_LOOP_BACK;\n\t  return this;\n\t}\n\n\tPlusLoopbackState.prototype = Object.create(DecisionState.prototype);\n\tPlusLoopbackState.prototype.constructor = PlusLoopbackState;\n\n\t// Start of {@code (A|B|...)+} loop. Technically a decision state, but\n\t//  we don't use for code generation; somebody might need it, so I'm defining\n\t//  it for completeness. In reality, the {@link PlusLoopbackState} node is the\n\t//  real decision-making note for {@code A+}.\n\t//\n\tfunction PlusBlockStartState() {\n\t  BlockStartState.call(this);\n\t  this.stateType = ATNState.PLUS_BLOCK_START;\n\t  this.loopBackState = null;\n\t  return this;\n\t}\n\n\tPlusBlockStartState.prototype = Object.create(BlockStartState.prototype);\n\tPlusBlockStartState.prototype.constructor = PlusBlockStartState;\n\n\t// The block that begins a closure loop.\n\tfunction StarBlockStartState() {\n\t  BlockStartState.call(this);\n\t  this.stateType = ATNState.STAR_BLOCK_START;\n\t  return this;\n\t}\n\n\tStarBlockStartState.prototype = Object.create(BlockStartState.prototype);\n\tStarBlockStartState.prototype.constructor = StarBlockStartState;\n\n\tfunction StarLoopbackState() {\n\t  ATNState.call(this);\n\t  this.stateType = ATNState.STAR_LOOP_BACK;\n\t  return this;\n\t}\n\n\tStarLoopbackState.prototype = Object.create(ATNState.prototype);\n\tStarLoopbackState.prototype.constructor = StarLoopbackState;\n\n\tfunction StarLoopEntryState() {\n\t  DecisionState.call(this);\n\t  this.stateType = ATNState.STAR_LOOP_ENTRY;\n\t  this.loopBackState = null;\n\t  // Indicates whether this state can benefit from a precedence DFA during SLL decision making.\n\t  this.isPrecedenceDecision = null;\n\t  return this;\n\t}\n\n\tStarLoopEntryState.prototype = Object.create(DecisionState.prototype);\n\tStarLoopEntryState.prototype.constructor = StarLoopEntryState;\n\n\t// Mark the end of a * or + loop.\n\tfunction LoopEndState() {\n\t  ATNState.call(this);\n\t  this.stateType = ATNState.LOOP_END;\n\t  this.loopBackState = null;\n\t  return this;\n\t}\n\n\tLoopEndState.prototype = Object.create(ATNState.prototype);\n\tLoopEndState.prototype.constructor = LoopEndState;\n\n\t// The Tokens rule start state linking to each lexer rule start state */\n\tfunction TokensStartState() {\n\t  DecisionState.call(this);\n\t  this.stateType = ATNState.TOKEN_START;\n\t  return this;\n\t}\n\n\tTokensStartState.prototype = Object.create(DecisionState.prototype);\n\tTokensStartState.prototype.constructor = TokensStartState;\n\n\texports.ATNState = ATNState;\n\texports.BasicState = BasicState;\n\texports.DecisionState = DecisionState;\n\texports.BlockStartState = BlockStartState;\n\texports.BlockEndState = BlockEndState;\n\texports.LoopEndState = LoopEndState;\n\texports.RuleStartState = RuleStartState;\n\texports.RuleStopState = RuleStopState;\n\texports.TokensStartState = TokensStartState;\n\texports.PlusLoopbackState = PlusLoopbackState;\n\texports.StarLoopbackState = StarLoopbackState;\n\texports.StarLoopEntryState = StarLoopEntryState;\n\texports.PlusBlockStartState = PlusBlockStartState;\n\texports.StarBlockStartState = StarBlockStartState;\n\texports.BasicBlockStartState = BasicBlockStartState;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t//\n\n\t// A tree structure used to record the semantic context in which\n\t//  an ATN configuration is valid.  It's either a single predicate,\n\t//  a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.\n\t//\n\t//  <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of\n\t//  {@link SemanticContext} within the scope of this outer class.</p>\n\t//\n\n\tvar Set = __webpack_require__(5).Set;\n\tvar Hash = __webpack_require__(5).Hash;\n\n\tfunction SemanticContext() {\n\t\treturn this;\n\t}\n\n\tSemanticContext.prototype.hashCode = function () {\n\t\tvar hash = new Hash();\n\t\tthis.updateHashCode(hash);\n\t\treturn hash.finish();\n\t};\n\n\t// For context independent predicates, we evaluate them without a local\n\t// context (i.e., null context). That way, we can evaluate them without\n\t// having to create proper rule-specific context during prediction (as\n\t// opposed to the parser, which creates them naturally). In a practical\n\t// sense, this avoids a cast exception from RuleContext to myruleContext.\n\t//\n\t// <p>For context dependent predicates, we must pass in a local context so that\n\t// references such as $arg evaluate properly as _localctx.arg. We only\n\t// capture context dependent predicates in the context in which we begin\n\t// prediction, so we passed in the outer context here in case of context\n\t// dependent predicate evaluation.</p>\n\t//\n\tSemanticContext.prototype.evaluate = function (parser, outerContext) {};\n\n\t//\n\t// Evaluate the precedence predicates for the context and reduce the result.\n\t//\n\t// @param parser The parser instance.\n\t// @param outerContext The current parser context object.\n\t// @return The simplified semantic context after precedence predicates are\n\t// evaluated, which will be one of the following values.\n\t// <ul>\n\t// <li>{@link //NONE}: if the predicate simplifies to {@code true} after\n\t// precedence predicates are evaluated.</li>\n\t// <li>{@code null}: if the predicate simplifies to {@code false} after\n\t// precedence predicates are evaluated.</li>\n\t// <li>{@code this}: if the semantic context is not changed as a result of\n\t// precedence predicate evaluation.</li>\n\t// <li>A non-{@code null} {@link SemanticContext}: the new simplified\n\t// semantic context after precedence predicates are evaluated.</li>\n\t// </ul>\n\t//\n\tSemanticContext.prototype.evalPrecedence = function (parser, outerContext) {\n\t\treturn this;\n\t};\n\n\tSemanticContext.andContext = function (a, b) {\n\t\tif (a === null || a === SemanticContext.NONE) {\n\t\t\treturn b;\n\t\t}\n\t\tif (b === null || b === SemanticContext.NONE) {\n\t\t\treturn a;\n\t\t}\n\t\tvar result = new AND(a, b);\n\t\tif (result.opnds.length === 1) {\n\t\t\treturn result.opnds[0];\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t};\n\n\tSemanticContext.orContext = function (a, b) {\n\t\tif (a === null) {\n\t\t\treturn b;\n\t\t}\n\t\tif (b === null) {\n\t\t\treturn a;\n\t\t}\n\t\tif (a === SemanticContext.NONE || b === SemanticContext.NONE) {\n\t\t\treturn SemanticContext.NONE;\n\t\t}\n\t\tvar result = new OR(a, b);\n\t\tif (result.opnds.length === 1) {\n\t\t\treturn result.opnds[0];\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t};\n\n\tfunction Predicate(ruleIndex, predIndex, isCtxDependent) {\n\t\tSemanticContext.call(this);\n\t\tthis.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;\n\t\tthis.predIndex = predIndex === undefined ? -1 : predIndex;\n\t\tthis.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred\n\t\treturn this;\n\t}\n\n\tPredicate.prototype = Object.create(SemanticContext.prototype);\n\tPredicate.prototype.constructor = Predicate;\n\n\t//The default {@link SemanticContext}, which is semantically equivalent to\n\t//a predicate of the form {@code {true}?}.\n\t//\n\tSemanticContext.NONE = new Predicate();\n\n\tPredicate.prototype.evaluate = function (parser, outerContext) {\n\t\tvar localctx = this.isCtxDependent ? outerContext : null;\n\t\treturn parser.sempred(localctx, this.ruleIndex, this.predIndex);\n\t};\n\n\tPredicate.prototype.updateHashCode = function (hash) {\n\t\thash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);\n\t};\n\n\tPredicate.prototype.equals = function (other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof Predicate)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this.ruleIndex === other.ruleIndex && this.predIndex === other.predIndex && this.isCtxDependent === other.isCtxDependent;\n\t\t}\n\t};\n\n\tPredicate.prototype.toString = function () {\n\t\treturn \"{\" + this.ruleIndex + \":\" + this.predIndex + \"}?\";\n\t};\n\n\tfunction PrecedencePredicate(precedence) {\n\t\tSemanticContext.call(this);\n\t\tthis.precedence = precedence === undefined ? 0 : precedence;\n\t}\n\n\tPrecedencePredicate.prototype = Object.create(SemanticContext.prototype);\n\tPrecedencePredicate.prototype.constructor = PrecedencePredicate;\n\n\tPrecedencePredicate.prototype.evaluate = function (parser, outerContext) {\n\t\treturn parser.precpred(outerContext, this.precedence);\n\t};\n\n\tPrecedencePredicate.prototype.evalPrecedence = function (parser, outerContext) {\n\t\tif (parser.precpred(outerContext, this.precedence)) {\n\t\t\treturn SemanticContext.NONE;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n\tPrecedencePredicate.prototype.compareTo = function (other) {\n\t\treturn this.precedence - other.precedence;\n\t};\n\n\tPrecedencePredicate.prototype.updateHashCode = function (hash) {\n\t\thash.update(31);\n\t};\n\n\tPrecedencePredicate.prototype.equals = function (other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof PrecedencePredicate)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this.precedence === other.precedence;\n\t\t}\n\t};\n\n\tPrecedencePredicate.prototype.toString = function () {\n\t\treturn \"{\" + this.precedence + \">=prec}?\";\n\t};\n\n\tPrecedencePredicate.filterPrecedencePredicates = function (set) {\n\t\tvar result = [];\n\t\tset.values().map(function (context) {\n\t\t\tif (context instanceof PrecedencePredicate) {\n\t\t\t\tresult.push(context);\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t};\n\n\t// A semantic context which is true whenever none of the contained contexts\n\t// is false.\n\t//\n\tfunction AND(a, b) {\n\t\tSemanticContext.call(this);\n\t\tvar operands = new Set();\n\t\tif (a instanceof AND) {\n\t\t\ta.opnds.map(function (o) {\n\t\t\t\toperands.add(o);\n\t\t\t});\n\t\t} else {\n\t\t\toperands.add(a);\n\t\t}\n\t\tif (b instanceof AND) {\n\t\t\tb.opnds.map(function (o) {\n\t\t\t\toperands.add(o);\n\t\t\t});\n\t\t} else {\n\t\t\toperands.add(b);\n\t\t}\n\t\tvar precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);\n\t\tif (precedencePredicates.length > 0) {\n\t\t\t// interested in the transition with the lowest precedence\n\t\t\tvar reduced = null;\n\t\t\tprecedencePredicates.map(function (p) {\n\t\t\t\tif (reduced === null || p.precedence < reduced.precedence) {\n\t\t\t\t\treduced = p;\n\t\t\t\t}\n\t\t\t});\n\t\t\toperands.add(reduced);\n\t\t}\n\t\tthis.opnds = operands.values();\n\t\treturn this;\n\t}\n\n\tAND.prototype = Object.create(SemanticContext.prototype);\n\tAND.prototype.constructor = AND;\n\n\tAND.prototype.equals = function (other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof AND)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this.opnds === other.opnds;\n\t\t}\n\t};\n\n\tAND.prototype.updateHashCode = function (hash) {\n\t\thash.update(this.opnds, \"AND\");\n\t};\n\t//\n\t// {@inheritDoc}\n\t//\n\t// <p>\n\t// The evaluation of predicates by this context is short-circuiting, but\n\t// unordered.</p>\n\t//\n\tAND.prototype.evaluate = function (parser, outerContext) {\n\t\tfor (var i = 0; i < this.opnds.length; i++) {\n\t\t\tif (!this.opnds[i].evaluate(parser, outerContext)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t};\n\n\tAND.prototype.evalPrecedence = function (parser, outerContext) {\n\t\tvar differs = false;\n\t\tvar operands = [];\n\t\tfor (var i = 0; i < this.opnds.length; i++) {\n\t\t\tvar context = this.opnds[i];\n\t\t\tvar evaluated = context.evalPrecedence(parser, outerContext);\n\t\t\tdiffers |= evaluated !== context;\n\t\t\tif (evaluated === null) {\n\t\t\t\t// The AND context is false if any element is false\n\t\t\t\treturn null;\n\t\t\t} else if (evaluated !== SemanticContext.NONE) {\n\t\t\t\t// Reduce the result by skipping true elements\n\t\t\t\toperands.push(evaluated);\n\t\t\t}\n\t\t}\n\t\tif (!differs) {\n\t\t\treturn this;\n\t\t}\n\t\tif (operands.length === 0) {\n\t\t\t// all elements were true, so the AND context is true\n\t\t\treturn SemanticContext.NONE;\n\t\t}\n\t\tvar result = null;\n\t\toperands.map(function (o) {\n\t\t\tresult = result === null ? o : SemanticContext.andContext(result, o);\n\t\t});\n\t\treturn result;\n\t};\n\n\tAND.prototype.toString = function () {\n\t\tvar s = \"\";\n\t\tthis.opnds.map(function (o) {\n\t\t\ts += \"&& \" + o.toString();\n\t\t});\n\t\treturn s.length > 3 ? s.slice(3) : s;\n\t};\n\n\t//\n\t// A semantic context which is true whenever at least one of the contained\n\t// contexts is true.\n\t//\n\tfunction OR(a, b) {\n\t\tSemanticContext.call(this);\n\t\tvar operands = new Set();\n\t\tif (a instanceof OR) {\n\t\t\ta.opnds.map(function (o) {\n\t\t\t\toperands.add(o);\n\t\t\t});\n\t\t} else {\n\t\t\toperands.add(a);\n\t\t}\n\t\tif (b instanceof OR) {\n\t\t\tb.opnds.map(function (o) {\n\t\t\t\toperands.add(o);\n\t\t\t});\n\t\t} else {\n\t\t\toperands.add(b);\n\t\t}\n\n\t\tvar precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);\n\t\tif (precedencePredicates.length > 0) {\n\t\t\t// interested in the transition with the highest precedence\n\t\t\tvar s = precedencePredicates.sort(function (a, b) {\n\t\t\t\treturn a.compareTo(b);\n\t\t\t});\n\t\t\tvar reduced = s[s.length - 1];\n\t\t\toperands.add(reduced);\n\t\t}\n\t\tthis.opnds = operands.values();\n\t\treturn this;\n\t}\n\n\tOR.prototype = Object.create(SemanticContext.prototype);\n\tOR.prototype.constructor = OR;\n\n\tOR.prototype.constructor = function (other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof OR)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this.opnds === other.opnds;\n\t\t}\n\t};\n\n\tOR.prototype.updateHashCode = function (hash) {\n\t\thash.update(this.opnds, \"OR\");\n\t};\n\n\t// <p>\n\t// The evaluation of predicates by this context is short-circuiting, but\n\t// unordered.</p>\n\t//\n\tOR.prototype.evaluate = function (parser, outerContext) {\n\t\tfor (var i = 0; i < this.opnds.length; i++) {\n\t\t\tif (this.opnds[i].evaluate(parser, outerContext)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t};\n\n\tOR.prototype.evalPrecedence = function (parser, outerContext) {\n\t\tvar differs = false;\n\t\tvar operands = [];\n\t\tfor (var i = 0; i < this.opnds.length; i++) {\n\t\t\tvar context = this.opnds[i];\n\t\t\tvar evaluated = context.evalPrecedence(parser, outerContext);\n\t\t\tdiffers |= evaluated !== context;\n\t\t\tif (evaluated === SemanticContext.NONE) {\n\t\t\t\t// The OR context is true if any element is true\n\t\t\t\treturn SemanticContext.NONE;\n\t\t\t} else if (evaluated !== null) {\n\t\t\t\t// Reduce the result by skipping false elements\n\t\t\t\toperands.push(evaluated);\n\t\t\t}\n\t\t}\n\t\tif (!differs) {\n\t\t\treturn this;\n\t\t}\n\t\tif (operands.length === 0) {\n\t\t\t// all elements were false, so the OR context is false\n\t\t\treturn null;\n\t\t}\n\t\tvar result = null;\n\t\toperands.map(function (o) {\n\t\t\treturn result === null ? o : SemanticContext.orContext(result, o);\n\t\t});\n\t\treturn result;\n\t};\n\n\tOR.prototype.toString = function () {\n\t\tvar s = \"\";\n\t\tthis.opnds.map(function (o) {\n\t\t\ts += \"|| \" + o.toString();\n\t\t});\n\t\treturn s.length > 3 ? s.slice(3) : s;\n\t};\n\n\texports.SemanticContext = SemanticContext;\n\texports.PrecedencePredicate = PrecedencePredicate;\n\texports.Predicate = Predicate;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\n\t/*jslint smarttabs:true */\n\n\tvar Token = __webpack_require__(6).Token;\n\n\t/* stop is not included! */\n\tfunction Interval(start, stop) {\n\t\tthis.start = start;\n\t\tthis.stop = stop;\n\t\treturn this;\n\t}\n\n\tInterval.prototype.contains = function (item) {\n\t\treturn item >= this.start && item < this.stop;\n\t};\n\n\tInterval.prototype.toString = function () {\n\t\tif (this.start === this.stop - 1) {\n\t\t\treturn this.start.toString();\n\t\t} else {\n\t\t\treturn this.start.toString() + \"..\" + (this.stop - 1).toString();\n\t\t}\n\t};\n\n\tObject.defineProperty(Interval.prototype, \"length\", {\n\t\tget: function get() {\n\t\t\treturn this.stop - this.start;\n\t\t}\n\t});\n\n\tfunction IntervalSet() {\n\t\tthis.intervals = null;\n\t\tthis.readOnly = false;\n\t}\n\n\tIntervalSet.prototype.first = function (v) {\n\t\tif (this.intervals === null || this.intervals.length === 0) {\n\t\t\treturn Token.INVALID_TYPE;\n\t\t} else {\n\t\t\treturn this.intervals[0].start;\n\t\t}\n\t};\n\n\tIntervalSet.prototype.addOne = function (v) {\n\t\tthis.addInterval(new Interval(v, v + 1));\n\t};\n\n\tIntervalSet.prototype.addRange = function (l, h) {\n\t\tthis.addInterval(new Interval(l, h + 1));\n\t};\n\n\tIntervalSet.prototype.addInterval = function (v) {\n\t\tif (this.intervals === null) {\n\t\t\tthis.intervals = [];\n\t\t\tthis.intervals.push(v);\n\t\t} else {\n\t\t\t// find insert pos\n\t\t\tfor (var k = 0; k < this.intervals.length; k++) {\n\t\t\t\tvar i = this.intervals[k];\n\t\t\t\t// distinct range -> insert\n\t\t\t\tif (v.stop < i.start) {\n\t\t\t\t\tthis.intervals.splice(k, 0, v);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// contiguous range -> adjust\n\t\t\t\telse if (v.stop === i.start) {\n\t\t\t\t\t\tthis.intervals[k].start = v.start;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// overlapping range -> adjust and reduce\n\t\t\t\t\telse if (v.start <= i.stop) {\n\t\t\t\t\t\t\tthis.intervals[k] = new Interval(Math.min(i.start, v.start), Math.max(i.stop, v.stop));\n\t\t\t\t\t\t\tthis.reduce(k);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t}\n\t\t\t// greater than any existing\n\t\t\tthis.intervals.push(v);\n\t\t}\n\t};\n\n\tIntervalSet.prototype.addSet = function (other) {\n\t\tif (other.intervals !== null) {\n\t\t\tfor (var k = 0; k < other.intervals.length; k++) {\n\t\t\t\tvar i = other.intervals[k];\n\t\t\t\tthis.addInterval(new Interval(i.start, i.stop));\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\tIntervalSet.prototype.reduce = function (k) {\n\t\t// only need to reduce if k is not the last\n\t\tif (k < this.intervalslength - 1) {\n\t\t\tvar l = this.intervals[k];\n\t\t\tvar r = this.intervals[k + 1];\n\t\t\t// if r contained in l\n\t\t\tif (l.stop >= r.stop) {\n\t\t\t\tthis.intervals.pop(k + 1);\n\t\t\t\tthis.reduce(k);\n\t\t\t} else if (l.stop >= r.start) {\n\t\t\t\tthis.intervals[k] = new Interval(l.start, r.stop);\n\t\t\t\tthis.intervals.pop(k + 1);\n\t\t\t}\n\t\t}\n\t};\n\n\tIntervalSet.prototype.complement = function (start, stop) {\n\t\tvar result = new IntervalSet();\n\t\tresult.addInterval(new Interval(start, stop + 1));\n\t\tfor (var i = 0; i < this.intervals.length; i++) {\n\t\t\tresult.removeRange(this.intervals[i]);\n\t\t}\n\t\treturn result;\n\t};\n\n\tIntervalSet.prototype.contains = function (item) {\n\t\tif (this.intervals === null) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tfor (var k = 0; k < this.intervals.length; k++) {\n\t\t\t\tif (this.intervals[k].contains(item)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tObject.defineProperty(IntervalSet.prototype, \"length\", {\n\t\tget: function get() {\n\t\t\tvar len = 0;\n\t\t\tthis.intervals.map(function (i) {\n\t\t\t\tlen += i.length;\n\t\t\t});\n\t\t\treturn len;\n\t\t}\n\t});\n\n\tIntervalSet.prototype.removeRange = function (v) {\n\t\tif (v.start === v.stop - 1) {\n\t\t\tthis.removeOne(v.start);\n\t\t} else if (this.intervals !== null) {\n\t\t\tvar k = 0;\n\t\t\tfor (var n = 0; n < this.intervals.length; n++) {\n\t\t\t\tvar i = this.intervals[k];\n\t\t\t\t// intervals are ordered\n\t\t\t\tif (v.stop <= i.start) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for including range, split it\n\t\t\t\telse if (v.start > i.start && v.stop < i.stop) {\n\t\t\t\t\t\tthis.intervals[k] = new Interval(i.start, v.start);\n\t\t\t\t\t\tvar x = new Interval(v.stop, i.stop);\n\t\t\t\t\t\tthis.intervals.splice(k, 0, x);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// check for included range, remove it\n\t\t\t\t\telse if (v.start <= i.start && v.stop >= i.stop) {\n\t\t\t\t\t\t\tthis.intervals.splice(k, 1);\n\t\t\t\t\t\t\tk = k - 1; // need another pass\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// check for lower boundary\n\t\t\t\t\t\telse if (v.start < i.stop) {\n\t\t\t\t\t\t\t\tthis.intervals[k] = new Interval(i.start, v.start);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// check for upper boundary\n\t\t\t\t\t\t\telse if (v.stop < i.stop) {\n\t\t\t\t\t\t\t\t\tthis.intervals[k] = new Interval(v.stop, i.stop);\n\t\t\t\t\t\t\t\t}\n\t\t\t\tk += 1;\n\t\t\t}\n\t\t}\n\t};\n\n\tIntervalSet.prototype.removeOne = function (v) {\n\t\tif (this.intervals !== null) {\n\t\t\tfor (var k = 0; k < this.intervals.length; k++) {\n\t\t\t\tvar i = this.intervals[k];\n\t\t\t\t// intervals is ordered\n\t\t\t\tif (v < i.start) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for single value range\n\t\t\t\telse if (v === i.start && v === i.stop - 1) {\n\t\t\t\t\t\tthis.intervals.splice(k, 1);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// check for lower boundary\n\t\t\t\t\telse if (v === i.start) {\n\t\t\t\t\t\t\tthis.intervals[k] = new Interval(i.start + 1, i.stop);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// check for upper boundary\n\t\t\t\t\t\telse if (v === i.stop - 1) {\n\t\t\t\t\t\t\t\tthis.intervals[k] = new Interval(i.start, i.stop - 1);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// split existing range\n\t\t\t\t\t\t\telse if (v < i.stop - 1) {\n\t\t\t\t\t\t\t\t\tvar x = new Interval(i.start, v);\n\t\t\t\t\t\t\t\t\ti.start = v + 1;\n\t\t\t\t\t\t\t\t\tthis.intervals.splice(k, 0, x);\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tIntervalSet.prototype.toString = function (literalNames, symbolicNames, elemsAreChar) {\n\t\tliteralNames = literalNames || null;\n\t\tsymbolicNames = symbolicNames || null;\n\t\telemsAreChar = elemsAreChar || false;\n\t\tif (this.intervals === null) {\n\t\t\treturn \"{}\";\n\t\t} else if (literalNames !== null || symbolicNames !== null) {\n\t\t\treturn this.toTokenString(literalNames, symbolicNames);\n\t\t} else if (elemsAreChar) {\n\t\t\treturn this.toCharString();\n\t\t} else {\n\t\t\treturn this.toIndexString();\n\t\t}\n\t};\n\n\tIntervalSet.prototype.toCharString = function () {\n\t\tvar names = [];\n\t\tfor (var i = 0; i < this.intervals.length; i++) {\n\t\t\tvar v = this.intervals[i];\n\t\t\tif (v.stop === v.start + 1) {\n\t\t\t\tif (v.start === Token.EOF) {\n\t\t\t\t\tnames.push(\"<EOF>\");\n\t\t\t\t} else {\n\t\t\t\t\tnames.push(\"'\" + String.fromCharCode(v.start) + \"'\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnames.push(\"'\" + String.fromCharCode(v.start) + \"'..'\" + String.fromCharCode(v.stop - 1) + \"'\");\n\t\t\t}\n\t\t}\n\t\tif (names.length > 1) {\n\t\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t\t} else {\n\t\t\treturn names[0];\n\t\t}\n\t};\n\n\tIntervalSet.prototype.toIndexString = function () {\n\t\tvar names = [];\n\t\tfor (var i = 0; i < this.intervals.length; i++) {\n\t\t\tvar v = this.intervals[i];\n\t\t\tif (v.stop === v.start + 1) {\n\t\t\t\tif (v.start === Token.EOF) {\n\t\t\t\t\tnames.push(\"<EOF>\");\n\t\t\t\t} else {\n\t\t\t\t\tnames.push(v.start.toString());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnames.push(v.start.toString() + \"..\" + (v.stop - 1).toString());\n\t\t\t}\n\t\t}\n\t\tif (names.length > 1) {\n\t\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t\t} else {\n\t\t\treturn names[0];\n\t\t}\n\t};\n\n\tIntervalSet.prototype.toTokenString = function (literalNames, symbolicNames) {\n\t\tvar names = [];\n\t\tfor (var i = 0; i < this.intervals.length; i++) {\n\t\t\tvar v = this.intervals[i];\n\t\t\tfor (var j = v.start; j < v.stop; j++) {\n\t\t\t\tnames.push(this.elementName(literalNames, symbolicNames, j));\n\t\t\t}\n\t\t}\n\t\tif (names.length > 1) {\n\t\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t\t} else {\n\t\t\treturn names[0];\n\t\t}\n\t};\n\n\tIntervalSet.prototype.elementName = function (literalNames, symbolicNames, a) {\n\t\tif (a === Token.EOF) {\n\t\t\treturn \"<EOF>\";\n\t\t} else if (a === Token.EPSILON) {\n\t\t\treturn \"<EPSILON>\";\n\t\t} else {\n\t\t\treturn literalNames[a] || symbolicNames[a];\n\t\t}\n\t};\n\n\texports.Interval = Interval;\n\texports.IntervalSet = IntervalSet;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t//\n\n\t//  An ATN transition between any two ATN states.  Subclasses define\n\t//  atom, set, epsilon, action, predicate, rule transitions.\n\t//\n\t//  <p>This is a one way link.  It emanates from a state (usually via a list of\n\t//  transitions) and has a target state.</p>\n\t//\n\t//  <p>Since we never have to change the ATN transitions once we construct it,\n\t//  we can fix these transitions as specific classes. The DFA transitions\n\t//  on the other hand need to update the labels as it adds transitions to\n\t//  the states. We'll use the term Edge for the DFA to distinguish them from\n\t//  ATN transitions.</p>\n\n\tvar Token = __webpack_require__(6).Token;\n\tvar Interval = __webpack_require__(10).Interval;\n\tvar IntervalSet = __webpack_require__(10).IntervalSet;\n\tvar Predicate = __webpack_require__(9).Predicate;\n\tvar PrecedencePredicate = __webpack_require__(9).PrecedencePredicate;\n\n\tfunction Transition(target) {\n\t  // The target of this transition.\n\t  if (target === undefined || target === null) {\n\t    throw \"target cannot be null.\";\n\t  }\n\t  this.target = target;\n\t  // Are we epsilon, action, sempred?\n\t  this.isEpsilon = false;\n\t  this.label = null;\n\t  return this;\n\t}\n\t// constants for serialization\n\tTransition.EPSILON = 1;\n\tTransition.RANGE = 2;\n\tTransition.RULE = 3;\n\tTransition.PREDICATE = 4; // e.g., {isType(input.LT(1))}?\n\tTransition.ATOM = 5;\n\tTransition.ACTION = 6;\n\tTransition.SET = 7; // ~(A|B) or ~atom, wildcard, which convert to next 2\n\tTransition.NOT_SET = 8;\n\tTransition.WILDCARD = 9;\n\tTransition.PRECEDENCE = 10;\n\n\tTransition.serializationNames = [\"INVALID\", \"EPSILON\", \"RANGE\", \"RULE\", \"PREDICATE\", \"ATOM\", \"ACTION\", \"SET\", \"NOT_SET\", \"WILDCARD\", \"PRECEDENCE\"];\n\n\tTransition.serializationTypes = {\n\t  EpsilonTransition: Transition.EPSILON,\n\t  RangeTransition: Transition.RANGE,\n\t  RuleTransition: Transition.RULE,\n\t  PredicateTransition: Transition.PREDICATE,\n\t  AtomTransition: Transition.ATOM,\n\t  ActionTransition: Transition.ACTION,\n\t  SetTransition: Transition.SET,\n\t  NotSetTransition: Transition.NOT_SET,\n\t  WildcardTransition: Transition.WILDCARD,\n\t  PrecedencePredicateTransition: Transition.PRECEDENCE\n\t};\n\n\t// TODO: make all transitions sets? no, should remove set edges\n\tfunction AtomTransition(target, label) {\n\t  Transition.call(this, target);\n\t  this.label_ = label; // The token type or character value; or, signifies special label.\n\t  this.label = this.makeLabel();\n\t  this.serializationType = Transition.ATOM;\n\t  return this;\n\t}\n\n\tAtomTransition.prototype = Object.create(Transition.prototype);\n\tAtomTransition.prototype.constructor = AtomTransition;\n\n\tAtomTransition.prototype.makeLabel = function () {\n\t  var s = new IntervalSet();\n\t  s.addOne(this.label_);\n\t  return s;\n\t};\n\n\tAtomTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n\t  return this.label_ === symbol;\n\t};\n\n\tAtomTransition.prototype.toString = function () {\n\t  return this.label_;\n\t};\n\n\tfunction RuleTransition(ruleStart, ruleIndex, precedence, followState) {\n\t  Transition.call(this, ruleStart);\n\t  this.ruleIndex = ruleIndex; // ptr to the rule definition object for this rule ref\n\t  this.precedence = precedence;\n\t  this.followState = followState; // what node to begin computations following ref to rule\n\t  this.serializationType = Transition.RULE;\n\t  this.isEpsilon = true;\n\t  return this;\n\t}\n\n\tRuleTransition.prototype = Object.create(Transition.prototype);\n\tRuleTransition.prototype.constructor = RuleTransition;\n\n\tRuleTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n\t  return false;\n\t};\n\n\tfunction EpsilonTransition(target, outermostPrecedenceReturn) {\n\t  Transition.call(this, target);\n\t  this.serializationType = Transition.EPSILON;\n\t  this.isEpsilon = true;\n\t  this.outermostPrecedenceReturn = outermostPrecedenceReturn;\n\t  return this;\n\t}\n\n\tEpsilonTransition.prototype = Object.create(Transition.prototype);\n\tEpsilonTransition.prototype.constructor = EpsilonTransition;\n\n\tEpsilonTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n\t  return false;\n\t};\n\n\tEpsilonTransition.prototype.toString = function () {\n\t  return \"epsilon\";\n\t};\n\n\tfunction RangeTransition(target, start, stop) {\n\t  Transition.call(this, target);\n\t  this.serializationType = Transition.RANGE;\n\t  this.start = start;\n\t  this.stop = stop;\n\t  this.label = this.makeLabel();\n\t  return this;\n\t}\n\n\tRangeTransition.prototype = Object.create(Transition.prototype);\n\tRangeTransition.prototype.constructor = RangeTransition;\n\n\tRangeTransition.prototype.makeLabel = function () {\n\t  var s = new IntervalSet();\n\t  s.addRange(this.start, this.stop);\n\t  return s;\n\t};\n\n\tRangeTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n\t  return symbol >= this.start && symbol <= this.stop;\n\t};\n\n\tRangeTransition.prototype.toString = function () {\n\t  return \"'\" + String.fromCharCode(this.start) + \"'..'\" + String.fromCharCode(this.stop) + \"'\";\n\t};\n\n\tfunction AbstractPredicateTransition(target) {\n\t  Transition.call(this, target);\n\t  return this;\n\t}\n\n\tAbstractPredicateTransition.prototype = Object.create(Transition.prototype);\n\tAbstractPredicateTransition.prototype.constructor = AbstractPredicateTransition;\n\n\tfunction PredicateTransition(target, ruleIndex, predIndex, isCtxDependent) {\n\t  AbstractPredicateTransition.call(this, target);\n\t  this.serializationType = Transition.PREDICATE;\n\t  this.ruleIndex = ruleIndex;\n\t  this.predIndex = predIndex;\n\t  this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred\n\t  this.isEpsilon = true;\n\t  return this;\n\t}\n\n\tPredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);\n\tPredicateTransition.prototype.constructor = PredicateTransition;\n\n\tPredicateTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n\t  return false;\n\t};\n\n\tPredicateTransition.prototype.getPredicate = function () {\n\t  return new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);\n\t};\n\n\tPredicateTransition.prototype.toString = function () {\n\t  return \"pred_\" + this.ruleIndex + \":\" + this.predIndex;\n\t};\n\n\tfunction ActionTransition(target, ruleIndex, actionIndex, isCtxDependent) {\n\t  Transition.call(this, target);\n\t  this.serializationType = Transition.ACTION;\n\t  this.ruleIndex = ruleIndex;\n\t  this.actionIndex = actionIndex === undefined ? -1 : actionIndex;\n\t  this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred\n\t  this.isEpsilon = true;\n\t  return this;\n\t}\n\n\tActionTransition.prototype = Object.create(Transition.prototype);\n\tActionTransition.prototype.constructor = ActionTransition;\n\n\tActionTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n\t  return false;\n\t};\n\n\tActionTransition.prototype.toString = function () {\n\t  return \"action_\" + this.ruleIndex + \":\" + this.actionIndex;\n\t};\n\n\t// A transition containing a set of values.\n\tfunction SetTransition(target, set) {\n\t  Transition.call(this, target);\n\t  this.serializationType = Transition.SET;\n\t  if (set !== undefined && set !== null) {\n\t    this.label = set;\n\t  } else {\n\t    this.label = new IntervalSet();\n\t    this.label.addOne(Token.INVALID_TYPE);\n\t  }\n\t  return this;\n\t}\n\n\tSetTransition.prototype = Object.create(Transition.prototype);\n\tSetTransition.prototype.constructor = SetTransition;\n\n\tSetTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n\t  return this.label.contains(symbol);\n\t};\n\n\tSetTransition.prototype.toString = function () {\n\t  return this.label.toString();\n\t};\n\n\tfunction NotSetTransition(target, set) {\n\t  SetTransition.call(this, target, set);\n\t  this.serializationType = Transition.NOT_SET;\n\t  return this;\n\t}\n\n\tNotSetTransition.prototype = Object.create(SetTransition.prototype);\n\tNotSetTransition.prototype.constructor = NotSetTransition;\n\n\tNotSetTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n\t  return symbol >= minVocabSymbol && symbol <= maxVocabSymbol && !SetTransition.prototype.matches.call(this, symbol, minVocabSymbol, maxVocabSymbol);\n\t};\n\n\tNotSetTransition.prototype.toString = function () {\n\t  return '~' + SetTransition.prototype.toString.call(this);\n\t};\n\n\tfunction WildcardTransition(target) {\n\t  Transition.call(this, target);\n\t  this.serializationType = Transition.WILDCARD;\n\t  return this;\n\t}\n\n\tWildcardTransition.prototype = Object.create(Transition.prototype);\n\tWildcardTransition.prototype.constructor = WildcardTransition;\n\n\tWildcardTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n\t  return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;\n\t};\n\n\tWildcardTransition.prototype.toString = function () {\n\t  return \".\";\n\t};\n\n\tfunction PrecedencePredicateTransition(target, precedence) {\n\t  AbstractPredicateTransition.call(this, target);\n\t  this.serializationType = Transition.PRECEDENCE;\n\t  this.precedence = precedence;\n\t  this.isEpsilon = true;\n\t  return this;\n\t}\n\n\tPrecedencePredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);\n\tPrecedencePredicateTransition.prototype.constructor = PrecedencePredicateTransition;\n\n\tPrecedencePredicateTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n\t  return false;\n\t};\n\n\tPrecedencePredicateTransition.prototype.getPredicate = function () {\n\t  return new PrecedencePredicate(this.precedence);\n\t};\n\n\tPrecedencePredicateTransition.prototype.toString = function () {\n\t  return this.precedence + \" >= _p\";\n\t};\n\n\texports.Transition = Transition;\n\texports.AtomTransition = AtomTransition;\n\texports.SetTransition = SetTransition;\n\texports.NotSetTransition = NotSetTransition;\n\texports.RuleTransition = RuleTransition;\n\texports.ActionTransition = ActionTransition;\n\texports.EpsilonTransition = EpsilonTransition;\n\texports.RangeTransition = RangeTransition;\n\texports.WildcardTransition = WildcardTransition;\n\texports.PredicateTransition = PredicateTransition;\n\texports.PrecedencePredicateTransition = PrecedencePredicateTransition;\n\texports.AbstractPredicateTransition = AbstractPredicateTransition;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t///\n\n\tvar RuleContext = __webpack_require__(13).RuleContext;\n\tvar Hash = __webpack_require__(5).Hash;\n\n\tfunction PredictionContext(cachedHashCode) {\n\t\tthis.cachedHashCode = cachedHashCode;\n\t}\n\n\t// Represents {@code $} in local context prediction, which means wildcard.\n\t// {@code//+x =//}.\n\t// /\n\tPredictionContext.EMPTY = null;\n\n\t// Represents {@code $} in an array in full context mode, when {@code $}\n\t// doesn't mean wildcard: {@code $ + x = [$,x]}. Here,\n\t// {@code $} = {@link //EMPTY_RETURN_STATE}.\n\t// /\n\tPredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;\n\n\tPredictionContext.globalNodeCount = 1;\n\tPredictionContext.id = PredictionContext.globalNodeCount;\n\n\t// Stores the computed hash code of this {@link PredictionContext}. The hash\n\t// code is computed in parts to match the following reference algorithm.\n\t//\n\t// <pre>\n\t// private int referenceHashCode() {\n\t// int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link\n\t// //INITIAL_HASH});\n\t//\n\t// for (int i = 0; i &lt; {@link //size()}; i++) {\n\t// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent\n\t// getParent}(i));\n\t// }\n\t//\n\t// for (int i = 0; i &lt; {@link //size()}; i++) {\n\t// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link\n\t// //getReturnState getReturnState}(i));\n\t// }\n\t//\n\t// hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link\n\t// //size()});\n\t// return hash;\n\t// }\n\t// </pre>\n\t// /\n\n\t// This means only the {@link //EMPTY} context is in set.\n\tPredictionContext.prototype.isEmpty = function () {\n\t\treturn this === PredictionContext.EMPTY;\n\t};\n\n\tPredictionContext.prototype.hasEmptyPath = function () {\n\t\treturn this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;\n\t};\n\n\tPredictionContext.prototype.hashCode = function () {\n\t\treturn this.cachedHashCode;\n\t};\n\n\tPredictionContext.prototype.updateHashCode = function (hash) {\n\t\thash.update(this.cachedHashCode);\n\t};\n\t/*\n\tfunction calculateHashString(parent, returnState) {\n\t\treturn \"\" + parent + returnState;\n\t}\n\t*/\n\n\t// Used to cache {@link PredictionContext} objects. Its used for the shared\n\t// context cash associated with contexts in DFA states. This cache\n\t// can be used for both lexers and parsers.\n\n\tfunction PredictionContextCache() {\n\t\tthis.cache = {};\n\t\treturn this;\n\t}\n\n\t// Add a context to the cache and return it. If the context already exists,\n\t// return that one instead and do not add a new context to the cache.\n\t// Protect shared cache from unsafe thread access.\n\t//\n\tPredictionContextCache.prototype.add = function (ctx) {\n\t\tif (ctx === PredictionContext.EMPTY) {\n\t\t\treturn PredictionContext.EMPTY;\n\t\t}\n\t\tvar existing = this.cache[ctx] || null;\n\t\tif (existing !== null) {\n\t\t\treturn existing;\n\t\t}\n\t\tthis.cache[ctx] = ctx;\n\t\treturn ctx;\n\t};\n\n\tPredictionContextCache.prototype.get = function (ctx) {\n\t\treturn this.cache[ctx] || null;\n\t};\n\n\tObject.defineProperty(PredictionContextCache.prototype, \"length\", {\n\t\tget: function get() {\n\t\t\treturn this.cache.length;\n\t\t}\n\t});\n\n\tfunction SingletonPredictionContext(parent, returnState) {\n\t\tvar hashCode = 0;\n\t\tif (parent !== null) {\n\t\t\tvar hash = new Hash();\n\t\t\thash.update(parent, returnState);\n\t\t\thashCode = hash.finish();\n\t\t}\n\t\tPredictionContext.call(this, hashCode);\n\t\tthis.parentCtx = parent;\n\t\tthis.returnState = returnState;\n\t}\n\n\tSingletonPredictionContext.prototype = Object.create(PredictionContext.prototype);\n\tSingletonPredictionContext.prototype.contructor = SingletonPredictionContext;\n\n\tSingletonPredictionContext.create = function (parent, returnState) {\n\t\tif (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {\n\t\t\t// someone can pass in the bits of an array ctx that mean $\n\t\t\treturn PredictionContext.EMPTY;\n\t\t} else {\n\t\t\treturn new SingletonPredictionContext(parent, returnState);\n\t\t}\n\t};\n\n\tObject.defineProperty(SingletonPredictionContext.prototype, \"length\", {\n\t\tget: function get() {\n\t\t\treturn 1;\n\t\t}\n\t});\n\n\tSingletonPredictionContext.prototype.getParent = function (index) {\n\t\treturn this.parentCtx;\n\t};\n\n\tSingletonPredictionContext.prototype.getReturnState = function (index) {\n\t\treturn this.returnState;\n\t};\n\n\tSingletonPredictionContext.prototype.equals = function (other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof SingletonPredictionContext)) {\n\t\t\treturn false;\n\t\t} else if (this.hashCode() !== other.hashCode()) {\n\t\t\treturn false; // can't be same if hash is different\n\t\t} else {\n\t\t\tif (this.returnState !== other.returnState) return false;else if (this.parentCtx == null) return other.parentCtx == null;else return this.parentCtx.equals(other.parentCtx);\n\t\t}\n\t};\n\n\tSingletonPredictionContext.prototype.toString = function () {\n\t\tvar up = this.parentCtx === null ? \"\" : this.parentCtx.toString();\n\t\tif (up.length === 0) {\n\t\t\tif (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {\n\t\t\t\treturn \"$\";\n\t\t\t} else {\n\t\t\t\treturn \"\" + this.returnState;\n\t\t\t}\n\t\t} else {\n\t\t\treturn \"\" + this.returnState + \" \" + up;\n\t\t}\n\t};\n\n\tfunction EmptyPredictionContext() {\n\t\tSingletonPredictionContext.call(this, null, PredictionContext.EMPTY_RETURN_STATE);\n\t\treturn this;\n\t}\n\n\tEmptyPredictionContext.prototype = Object.create(SingletonPredictionContext.prototype);\n\tEmptyPredictionContext.prototype.constructor = EmptyPredictionContext;\n\n\tEmptyPredictionContext.prototype.isEmpty = function () {\n\t\treturn true;\n\t};\n\n\tEmptyPredictionContext.prototype.getParent = function (index) {\n\t\treturn null;\n\t};\n\n\tEmptyPredictionContext.prototype.getReturnState = function (index) {\n\t\treturn this.returnState;\n\t};\n\n\tEmptyPredictionContext.prototype.equals = function (other) {\n\t\treturn this === other;\n\t};\n\n\tEmptyPredictionContext.prototype.toString = function () {\n\t\treturn \"$\";\n\t};\n\n\tPredictionContext.EMPTY = new EmptyPredictionContext();\n\n\tfunction ArrayPredictionContext(parents, returnStates) {\n\t\t// Parent can be null only if full ctx mode and we make an array\n\t\t// from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using\n\t\t// null parent and\n\t\t// returnState == {@link //EMPTY_RETURN_STATE}.\n\t\tvar h = new Hash();\n\t\th.update(parents, returnStates);\n\t\tvar hashCode = h.finish();\n\t\tPredictionContext.call(this, hashCode);\n\t\tthis.parents = parents;\n\t\tthis.returnStates = returnStates;\n\t\treturn this;\n\t}\n\n\tArrayPredictionContext.prototype = Object.create(PredictionContext.prototype);\n\tArrayPredictionContext.prototype.constructor = ArrayPredictionContext;\n\n\tArrayPredictionContext.prototype.isEmpty = function () {\n\t\t// since EMPTY_RETURN_STATE can only appear in the last position, we\n\t\t// don't need to verify that size==1\n\t\treturn this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;\n\t};\n\n\tObject.defineProperty(ArrayPredictionContext.prototype, \"length\", {\n\t\tget: function get() {\n\t\t\treturn this.returnStates.length;\n\t\t}\n\t});\n\n\tArrayPredictionContext.prototype.getParent = function (index) {\n\t\treturn this.parents[index];\n\t};\n\n\tArrayPredictionContext.prototype.getReturnState = function (index) {\n\t\treturn this.returnStates[index];\n\t};\n\n\tArrayPredictionContext.prototype.equals = function (other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof ArrayPredictionContext)) {\n\t\t\treturn false;\n\t\t} else if (this.hashCode() !== other.hashCode()) {\n\t\t\treturn false; // can't be same if hash is different\n\t\t} else {\n\t\t\treturn this.returnStates === other.returnStates && this.parents === other.parents;\n\t\t}\n\t};\n\n\tArrayPredictionContext.prototype.toString = function () {\n\t\tif (this.isEmpty()) {\n\t\t\treturn \"[]\";\n\t\t} else {\n\t\t\tvar s = \"[\";\n\t\t\tfor (var i = 0; i < this.returnStates.length; i++) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\ts = s + \", \";\n\t\t\t\t}\n\t\t\t\tif (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {\n\t\t\t\t\ts = s + \"$\";\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\ts = s + this.returnStates[i];\n\t\t\t\tif (this.parents[i] !== null) {\n\t\t\t\t\ts = s + \" \" + this.parents[i];\n\t\t\t\t} else {\n\t\t\t\t\ts = s + \"null\";\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn s + \"]\";\n\t\t}\n\t};\n\n\t// Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.\n\t// Return {@link //EMPTY} if {@code outerContext} is empty or null.\n\t// /\n\tfunction predictionContextFromRuleContext(atn, outerContext) {\n\t\tif (outerContext === undefined || outerContext === null) {\n\t\t\touterContext = RuleContext.EMPTY;\n\t\t}\n\t\t// if we are in RuleContext of start rule, s, then PredictionContext\n\t\t// is EMPTY. Nobody called us. (if we are empty, return empty)\n\t\tif (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {\n\t\t\treturn PredictionContext.EMPTY;\n\t\t}\n\t\t// If we have a parent, convert it to a PredictionContext graph\n\t\tvar parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);\n\t\tvar state = atn.states[outerContext.invokingState];\n\t\tvar transition = state.transitions[0];\n\t\treturn SingletonPredictionContext.create(parent, transition.followState.stateNumber);\n\t}\n\t/*\n\tfunction calculateListsHashString(parents, returnStates) {\n\t\tvar s = \"\";\n\t\tparents.map(function(p) {\n\t\t\ts = s + p;\n\t\t});\n\t\treturnStates.map(function(r) {\n\t\t\ts = s + r;\n\t\t});\n\t\treturn s;\n\t}\n\t*/\n\tfunction merge(a, b, rootIsWildcard, mergeCache) {\n\t\t// share same graph if both same\n\t\tif (a === b) {\n\t\t\treturn a;\n\t\t}\n\t\tif (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {\n\t\t\treturn mergeSingletons(a, b, rootIsWildcard, mergeCache);\n\t\t}\n\t\t// At least one of a or b is array\n\t\t// If one is $ and rootIsWildcard, return $ as// wildcard\n\t\tif (rootIsWildcard) {\n\t\t\tif (a instanceof EmptyPredictionContext) {\n\t\t\t\treturn a;\n\t\t\t}\n\t\t\tif (b instanceof EmptyPredictionContext) {\n\t\t\t\treturn b;\n\t\t\t}\n\t\t}\n\t\t// convert singleton so both are arrays to normalize\n\t\tif (a instanceof SingletonPredictionContext) {\n\t\t\ta = new ArrayPredictionContext([a.getParent()], [a.returnState]);\n\t\t}\n\t\tif (b instanceof SingletonPredictionContext) {\n\t\t\tb = new ArrayPredictionContext([b.getParent()], [b.returnState]);\n\t\t}\n\t\treturn mergeArrays(a, b, rootIsWildcard, mergeCache);\n\t}\n\n\t//\n\t// Merge two {@link SingletonPredictionContext} instances.\n\t//\n\t// <p>Stack tops equal, parents merge is same; return left graph.<br>\n\t// <embed src=\"images/SingletonMerge_SameRootSamePar.svg\"\n\t// type=\"image/svg+xml\"/></p>\n\t//\n\t// <p>Same stack top, parents differ; merge parents giving array node, then\n\t// remainders of those graphs. A new root node is created to point to the\n\t// merged parents.<br>\n\t// <embed src=\"images/SingletonMerge_SameRootDiffPar.svg\"\n\t// type=\"image/svg+xml\"/></p>\n\t//\n\t// <p>Different stack tops pointing to same parent. Make array node for the\n\t// root where both element in the root point to the same (original)\n\t// parent.<br>\n\t// <embed src=\"images/SingletonMerge_DiffRootSamePar.svg\"\n\t// type=\"image/svg+xml\"/></p>\n\t//\n\t// <p>Different stack tops pointing to different parents. Make array node for\n\t// the root where each element points to the corresponding original\n\t// parent.<br>\n\t// <embed src=\"images/SingletonMerge_DiffRootDiffPar.svg\"\n\t// type=\"image/svg+xml\"/></p>\n\t//\n\t// @param a the first {@link SingletonPredictionContext}\n\t// @param b the second {@link SingletonPredictionContext}\n\t// @param rootIsWildcard {@code true} if this is a local-context merge,\n\t// otherwise false to indicate a full-context merge\n\t// @param mergeCache\n\t// /\n\tfunction mergeSingletons(a, b, rootIsWildcard, mergeCache) {\n\t\tif (mergeCache !== null) {\n\t\t\tvar previous = mergeCache.get(a, b);\n\t\t\tif (previous !== null) {\n\t\t\t\treturn previous;\n\t\t\t}\n\t\t\tprevious = mergeCache.get(b, a);\n\t\t\tif (previous !== null) {\n\t\t\t\treturn previous;\n\t\t\t}\n\t\t}\n\n\t\tvar rootMerge = mergeRoot(a, b, rootIsWildcard);\n\t\tif (rootMerge !== null) {\n\t\t\tif (mergeCache !== null) {\n\t\t\t\tmergeCache.set(a, b, rootMerge);\n\t\t\t}\n\t\t\treturn rootMerge;\n\t\t}\n\t\tif (a.returnState === b.returnState) {\n\t\t\tvar parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);\n\t\t\t// if parent is same as existing a or b parent or reduced to a parent,\n\t\t\t// return it\n\t\t\tif (parent === a.parentCtx) {\n\t\t\t\treturn a; // ax + bx = ax, if a=b\n\t\t\t}\n\t\t\tif (parent === b.parentCtx) {\n\t\t\t\treturn b; // ax + bx = bx, if a=b\n\t\t\t}\n\t\t\t// else: ax + ay = a'[x,y]\n\t\t\t// merge parents x and y, giving array node with x,y then remainders\n\t\t\t// of those graphs. dup a, a' points at merged array\n\t\t\t// new joined parent so create new singleton pointing to it, a'\n\t\t\tvar spc = SingletonPredictionContext.create(parent, a.returnState);\n\t\t\tif (mergeCache !== null) {\n\t\t\t\tmergeCache.set(a, b, spc);\n\t\t\t}\n\t\t\treturn spc;\n\t\t} else {\n\t\t\t// a != b payloads differ\n\t\t\t// see if we can collapse parents due to $+x parents if local ctx\n\t\t\tvar singleParent = null;\n\t\t\tif (a === b || a.parentCtx !== null && a.parentCtx === b.parentCtx) {\n\t\t\t\t// ax +\n\t\t\t\t// bx =\n\t\t\t\t// [a,b]x\n\t\t\t\tsingleParent = a.parentCtx;\n\t\t\t}\n\t\t\tif (singleParent !== null) {\n\t\t\t\t// parents are same\n\t\t\t\t// sort payloads and use same parent\n\t\t\t\tvar payloads = [a.returnState, b.returnState];\n\t\t\t\tif (a.returnState > b.returnState) {\n\t\t\t\t\tpayloads[0] = b.returnState;\n\t\t\t\t\tpayloads[1] = a.returnState;\n\t\t\t\t}\n\t\t\t\tvar parents = [singleParent, singleParent];\n\t\t\t\tvar apc = new ArrayPredictionContext(parents, payloads);\n\t\t\t\tif (mergeCache !== null) {\n\t\t\t\t\tmergeCache.set(a, b, apc);\n\t\t\t\t}\n\t\t\t\treturn apc;\n\t\t\t}\n\t\t\t// parents differ and can't merge them. Just pack together\n\t\t\t// into array; can't merge.\n\t\t\t// ax + by = [ax,by]\n\t\t\tvar payloads = [a.returnState, b.returnState];\n\t\t\tvar parents = [a.parentCtx, b.parentCtx];\n\t\t\tif (a.returnState > b.returnState) {\n\t\t\t\t// sort by payload\n\t\t\t\tpayloads[0] = b.returnState;\n\t\t\t\tpayloads[1] = a.returnState;\n\t\t\t\tparents = [b.parentCtx, a.parentCtx];\n\t\t\t}\n\t\t\tvar a_ = new ArrayPredictionContext(parents, payloads);\n\t\t\tif (mergeCache !== null) {\n\t\t\t\tmergeCache.set(a, b, a_);\n\t\t\t}\n\t\t\treturn a_;\n\t\t}\n\t}\n\n\t//\n\t// Handle case where at least one of {@code a} or {@code b} is\n\t// {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used\n\t// to represent {@link //EMPTY}.\n\t//\n\t// <h2>Local-Context Merges</h2>\n\t//\n\t// <p>These local-context merge operations are used when {@code rootIsWildcard}\n\t// is true.</p>\n\t//\n\t// <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>\n\t// <embed src=\"images/LocalMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p>\n\t//\n\t// <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is\n\t// {@code //EMPTY}; return left graph.<br>\n\t// <embed src=\"images/LocalMerge_EmptyParent.svg\" type=\"image/svg+xml\"/></p>\n\t//\n\t// <p>Special case of last merge if local context.<br>\n\t// <embed src=\"images/LocalMerge_DiffRoots.svg\" type=\"image/svg+xml\"/></p>\n\t//\n\t// <h2>Full-Context Merges</h2>\n\t//\n\t// <p>These full-context merge operations are used when {@code rootIsWildcard}\n\t// is false.</p>\n\t//\n\t// <p><embed src=\"images/FullMerge_EmptyRoots.svg\" type=\"image/svg+xml\"/></p>\n\t//\n\t// <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and\n\t// null parent).<br>\n\t// <embed src=\"images/FullMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p>\n\t//\n\t// <p><embed src=\"images/FullMerge_SameRoot.svg\" type=\"image/svg+xml\"/></p>\n\t//\n\t// @param a the first {@link SingletonPredictionContext}\n\t// @param b the second {@link SingletonPredictionContext}\n\t// @param rootIsWildcard {@code true} if this is a local-context merge,\n\t// otherwise false to indicate a full-context merge\n\t// /\n\tfunction mergeRoot(a, b, rootIsWildcard) {\n\t\tif (rootIsWildcard) {\n\t\t\tif (a === PredictionContext.EMPTY) {\n\t\t\t\treturn PredictionContext.EMPTY; // // + b =//\n\t\t\t}\n\t\t\tif (b === PredictionContext.EMPTY) {\n\t\t\t\treturn PredictionContext.EMPTY; // a +// =//\n\t\t\t}\n\t\t} else {\n\t\t\tif (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {\n\t\t\t\treturn PredictionContext.EMPTY; // $ + $ = $\n\t\t\t} else if (a === PredictionContext.EMPTY) {\n\t\t\t\t// $ + x = [$,x]\n\t\t\t\tvar payloads = [b.returnState, PredictionContext.EMPTY_RETURN_STATE];\n\t\t\t\tvar parents = [b.parentCtx, null];\n\t\t\t\treturn new ArrayPredictionContext(parents, payloads);\n\t\t\t} else if (b === PredictionContext.EMPTY) {\n\t\t\t\t// x + $ = [$,x] ($ is always first if present)\n\t\t\t\tvar payloads = [a.returnState, PredictionContext.EMPTY_RETURN_STATE];\n\t\t\t\tvar parents = [a.parentCtx, null];\n\t\t\t\treturn new ArrayPredictionContext(parents, payloads);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t//\n\t// Merge two {@link ArrayPredictionContext} instances.\n\t//\n\t// <p>Different tops, different parents.<br>\n\t// <embed src=\"images/ArrayMerge_DiffTopDiffPar.svg\" type=\"image/svg+xml\"/></p>\n\t//\n\t// <p>Shared top, same parents.<br>\n\t// <embed src=\"images/ArrayMerge_ShareTopSamePar.svg\" type=\"image/svg+xml\"/></p>\n\t//\n\t// <p>Shared top, different parents.<br>\n\t// <embed src=\"images/ArrayMerge_ShareTopDiffPar.svg\" type=\"image/svg+xml\"/></p>\n\t//\n\t// <p>Shared top, all shared parents.<br>\n\t// <embed src=\"images/ArrayMerge_ShareTopSharePar.svg\"\n\t// type=\"image/svg+xml\"/></p>\n\t//\n\t// <p>Equal tops, merge parents and reduce top to\n\t// {@link SingletonPredictionContext}.<br>\n\t// <embed src=\"images/ArrayMerge_EqualTop.svg\" type=\"image/svg+xml\"/></p>\n\t// /\n\tfunction mergeArrays(a, b, rootIsWildcard, mergeCache) {\n\t\tif (mergeCache !== null) {\n\t\t\tvar previous = mergeCache.get(a, b);\n\t\t\tif (previous !== null) {\n\t\t\t\treturn previous;\n\t\t\t}\n\t\t\tprevious = mergeCache.get(b, a);\n\t\t\tif (previous !== null) {\n\t\t\t\treturn previous;\n\t\t\t}\n\t\t}\n\t\t// merge sorted payloads a + b => M\n\t\tvar i = 0; // walks a\n\t\tvar j = 0; // walks b\n\t\tvar k = 0; // walks target M array\n\n\t\tvar mergedReturnStates = [];\n\t\tvar mergedParents = [];\n\t\t// walk and merge to yield mergedParents, mergedReturnStates\n\t\twhile (i < a.returnStates.length && j < b.returnStates.length) {\n\t\t\tvar a_parent = a.parents[i];\n\t\t\tvar b_parent = b.parents[j];\n\t\t\tif (a.returnStates[i] === b.returnStates[j]) {\n\t\t\t\t// same payload (stack tops are equal), must yield merged singleton\n\t\t\t\tvar payload = a.returnStates[i];\n\t\t\t\t// $+$ = $\n\t\t\t\tvar bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE && a_parent === null && b_parent === null;\n\t\t\t\tvar ax_ax = a_parent !== null && b_parent !== null && a_parent === b_parent; // ax+ax\n\t\t\t\t// ->\n\t\t\t\t// ax\n\t\t\t\tif (bothDollars || ax_ax) {\n\t\t\t\t\tmergedParents[k] = a_parent; // choose left\n\t\t\t\t\tmergedReturnStates[k] = payload;\n\t\t\t\t} else {\n\t\t\t\t\t// ax+ay -> a'[x,y]\n\t\t\t\t\tvar mergedParent = merge(a_parent, b_parent, rootIsWildcard, mergeCache);\n\t\t\t\t\tmergedParents[k] = mergedParent;\n\t\t\t\t\tmergedReturnStates[k] = payload;\n\t\t\t\t}\n\t\t\t\ti += 1; // hop over left one as usual\n\t\t\t\tj += 1; // but also skip one in right side since we merge\n\t\t\t} else if (a.returnStates[i] < b.returnStates[j]) {\n\t\t\t\t// copy a[i] to M\n\t\t\t\tmergedParents[k] = a_parent;\n\t\t\t\tmergedReturnStates[k] = a.returnStates[i];\n\t\t\t\ti += 1;\n\t\t\t} else {\n\t\t\t\t// b > a, copy b[j] to M\n\t\t\t\tmergedParents[k] = b_parent;\n\t\t\t\tmergedReturnStates[k] = b.returnStates[j];\n\t\t\t\tj += 1;\n\t\t\t}\n\t\t\tk += 1;\n\t\t}\n\t\t// copy over any payloads remaining in either array\n\t\tif (i < a.returnStates.length) {\n\t\t\tfor (var p = i; p < a.returnStates.length; p++) {\n\t\t\t\tmergedParents[k] = a.parents[p];\n\t\t\t\tmergedReturnStates[k] = a.returnStates[p];\n\t\t\t\tk += 1;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (var p = j; p < b.returnStates.length; p++) {\n\t\t\t\tmergedParents[k] = b.parents[p];\n\t\t\t\tmergedReturnStates[k] = b.returnStates[p];\n\t\t\t\tk += 1;\n\t\t\t}\n\t\t}\n\t\t// trim merged if we combined a few that had same stack tops\n\t\tif (k < mergedParents.length) {\n\t\t\t// write index < last position; trim\n\t\t\tif (k === 1) {\n\t\t\t\t// for just one merged element, return singleton top\n\t\t\t\tvar a_ = SingletonPredictionContext.create(mergedParents[0], mergedReturnStates[0]);\n\t\t\t\tif (mergeCache !== null) {\n\t\t\t\t\tmergeCache.set(a, b, a_);\n\t\t\t\t}\n\t\t\t\treturn a_;\n\t\t\t}\n\t\t\tmergedParents = mergedParents.slice(0, k);\n\t\t\tmergedReturnStates = mergedReturnStates.slice(0, k);\n\t\t}\n\n\t\tvar M = new ArrayPredictionContext(mergedParents, mergedReturnStates);\n\n\t\t// if we created same array as a or b, return that instead\n\t\t// TODO: track whether this is possible above during merge sort for speed\n\t\tif (M === a) {\n\t\t\tif (mergeCache !== null) {\n\t\t\t\tmergeCache.set(a, b, a);\n\t\t\t}\n\t\t\treturn a;\n\t\t}\n\t\tif (M === b) {\n\t\t\tif (mergeCache !== null) {\n\t\t\t\tmergeCache.set(a, b, b);\n\t\t\t}\n\t\t\treturn b;\n\t\t}\n\t\tcombineCommonParents(mergedParents);\n\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, M);\n\t\t}\n\t\treturn M;\n\t}\n\n\t//\n\t// Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}\n\t// ones.\n\t// /\n\tfunction combineCommonParents(parents) {\n\t\tvar uniqueParents = {};\n\n\t\tfor (var p = 0; p < parents.length; p++) {\n\t\t\tvar parent = parents[p];\n\t\t\tif (!(parent in uniqueParents)) {\n\t\t\t\tuniqueParents[parent] = parent;\n\t\t\t}\n\t\t}\n\t\tfor (var q = 0; q < parents.length; q++) {\n\t\t\tparents[q] = uniqueParents[parents[q]];\n\t\t}\n\t}\n\n\tfunction getCachedPredictionContext(context, contextCache, visited) {\n\t\tif (context.isEmpty()) {\n\t\t\treturn context;\n\t\t}\n\t\tvar existing = visited[context] || null;\n\t\tif (existing !== null) {\n\t\t\treturn existing;\n\t\t}\n\t\texisting = contextCache.get(context);\n\t\tif (existing !== null) {\n\t\t\tvisited[context] = existing;\n\t\t\treturn existing;\n\t\t}\n\t\tvar changed = false;\n\t\tvar parents = [];\n\t\tfor (var i = 0; i < parents.length; i++) {\n\t\t\tvar parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);\n\t\t\tif (changed || parent !== context.getParent(i)) {\n\t\t\t\tif (!changed) {\n\t\t\t\t\tparents = [];\n\t\t\t\t\tfor (var j = 0; j < context.length; j++) {\n\t\t\t\t\t\tparents[j] = context.getParent(j);\n\t\t\t\t\t}\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t\tparents[i] = parent;\n\t\t\t}\n\t\t}\n\t\tif (!changed) {\n\t\t\tcontextCache.add(context);\n\t\t\tvisited[context] = context;\n\t\t\treturn context;\n\t\t}\n\t\tvar updated = null;\n\t\tif (parents.length === 0) {\n\t\t\tupdated = PredictionContext.EMPTY;\n\t\t} else if (parents.length === 1) {\n\t\t\tupdated = SingletonPredictionContext.create(parents[0], context.getReturnState(0));\n\t\t} else {\n\t\t\tupdated = new ArrayPredictionContext(parents, context.returnStates);\n\t\t}\n\t\tcontextCache.add(updated);\n\t\tvisited[updated] = updated;\n\t\tvisited[context] = updated;\n\n\t\treturn updated;\n\t}\n\n\t// ter's recursive version of Sam's getAllNodes()\n\tfunction getAllContextNodes(context, nodes, visited) {\n\t\tif (nodes === null) {\n\t\t\tnodes = [];\n\t\t\treturn getAllContextNodes(context, nodes, visited);\n\t\t} else if (visited === null) {\n\t\t\tvisited = {};\n\t\t\treturn getAllContextNodes(context, nodes, visited);\n\t\t} else {\n\t\t\tif (context === null || visited[context] !== null) {\n\t\t\t\treturn nodes;\n\t\t\t}\n\t\t\tvisited[context] = context;\n\t\t\tnodes.push(context);\n\t\t\tfor (var i = 0; i < context.length; i++) {\n\t\t\t\tgetAllContextNodes(context.getParent(i), nodes, visited);\n\t\t\t}\n\t\t\treturn nodes;\n\t\t}\n\t}\n\n\texports.merge = merge;\n\texports.PredictionContext = PredictionContext;\n\texports.PredictionContextCache = PredictionContextCache;\n\texports.SingletonPredictionContext = SingletonPredictionContext;\n\texports.predictionContextFromRuleContext = predictionContextFromRuleContext;\n\texports.getCachedPredictionContext = getCachedPredictionContext;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t///\n\n\t//  A rule context is a record of a single rule invocation. It knows\n\t//  which context invoked it, if any. If there is no parent context, then\n\t//  naturally the invoking state is not valid.  The parent link\n\t//  provides a chain upwards from the current rule invocation to the root\n\t//  of the invocation tree, forming a stack. We actually carry no\n\t//  information about the rule associated with this context (except\n\t//  when parsing). We keep only the state number of the invoking state from\n\t//  the ATN submachine that invoked this. Contrast this with the s\n\t//  pointer inside ParserRuleContext that tracks the current state\n\t//  being \"executed\" for the current rule.\n\t//\n\t//  The parent contexts are useful for computing lookahead sets and\n\t//  getting error information.\n\t//\n\t//  These objects are used during parsing and prediction.\n\t//  For the special case of parsers, we use the subclass\n\t//  ParserRuleContext.\n\t//\n\t//  @see ParserRuleContext\n\t///\n\n\tvar RuleNode = __webpack_require__(14).RuleNode;\n\tvar INVALID_INTERVAL = __webpack_require__(14).INVALID_INTERVAL;\n\tvar INVALID_ALT_NUMBER = __webpack_require__(3).INVALID_ALT_NUMBER;\n\n\tfunction RuleContext(parent, invokingState) {\n\t\tRuleNode.call(this);\n\t\t// What context invoked this rule?\n\t\tthis.parentCtx = parent || null;\n\t\t// What state invoked the rule associated with this context?\n\t\t// The \"return address\" is the followState of invokingState\n\t\t// If parent is null, this should be -1.\n\t\tthis.invokingState = invokingState || -1;\n\t\treturn this;\n\t}\n\n\tRuleContext.prototype = Object.create(RuleNode.prototype);\n\tRuleContext.prototype.constructor = RuleContext;\n\n\tRuleContext.prototype.depth = function () {\n\t\tvar n = 0;\n\t\tvar p = this;\n\t\twhile (p !== null) {\n\t\t\tp = p.parentCtx;\n\t\t\tn += 1;\n\t\t}\n\t\treturn n;\n\t};\n\n\t// A context is empty if there is no invoking state; meaning nobody call\n\t// current context.\n\tRuleContext.prototype.isEmpty = function () {\n\t\treturn this.invokingState === -1;\n\t};\n\n\t// satisfy the ParseTree / SyntaxTree interface\n\n\tRuleContext.prototype.getSourceInterval = function () {\n\t\treturn INVALID_INTERVAL;\n\t};\n\n\tRuleContext.prototype.getRuleContext = function () {\n\t\treturn this;\n\t};\n\n\tRuleContext.prototype.getPayload = function () {\n\t\treturn this;\n\t};\n\n\t// Return the combined text of all child nodes. This method only considers\n\t// tokens which have been added to the parse tree.\n\t// <p>\n\t// Since tokens on hidden channels (e.g. whitespace or comments) are not\n\t// added to the parse trees, they will not appear in the output of this\n\t// method.\n\t// /\n\tRuleContext.prototype.getText = function () {\n\t\tif (this.getChildCount() === 0) {\n\t\t\treturn \"\";\n\t\t} else {\n\t\t\treturn this.children.map(function (child) {\n\t\t\t\treturn child.getText();\n\t\t\t}).join(\"\");\n\t\t}\n\t};\n\n\t// For rule associated with this parse tree internal node, return\n\t// the outer alternative number used to match the input. Default\n\t// implementation does not compute nor store this alt num. Create\n\t// a subclass of ParserRuleContext with backing field and set\n\t// option contextSuperClass.\n\t// to set it.\n\tRuleContext.prototype.getAltNumber = function () {\n\t\treturn INVALID_ALT_NUMBER;\n\t};\n\n\t// Set the outer alternative number for this context node. Default\n\t// implementation does nothing to avoid backing field overhead for\n\t// trees that don't need it.  Create\n\t// a subclass of ParserRuleContext with backing field and set\n\t// option contextSuperClass.\n\tRuleContext.prototype.setAltNumber = function (altNumber) {};\n\n\tRuleContext.prototype.getChild = function (i) {\n\t\treturn null;\n\t};\n\n\tRuleContext.prototype.getChildCount = function () {\n\t\treturn 0;\n\t};\n\n\tRuleContext.prototype.accept = function (visitor) {\n\t\treturn visitor.visitChildren(this);\n\t};\n\n\t//need to manage circular dependencies, so export now\n\texports.RuleContext = RuleContext;\n\tvar Trees = __webpack_require__(15).Trees;\n\n\t// Print out a whole tree, not just a node, in LISP format\n\t// (root child1 .. childN). Print just a node if this is a leaf.\n\t//\n\n\tRuleContext.prototype.toStringTree = function (ruleNames, recog) {\n\t\treturn Trees.toStringTree(this, ruleNames, recog);\n\t};\n\n\tRuleContext.prototype.toString = function (ruleNames, stop) {\n\t\truleNames = ruleNames || null;\n\t\tstop = stop || null;\n\t\tvar p = this;\n\t\tvar s = \"[\";\n\t\twhile (p !== null && p !== stop) {\n\t\t\tif (ruleNames === null) {\n\t\t\t\tif (!p.isEmpty()) {\n\t\t\t\t\ts += p.invokingState;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar ri = p.ruleIndex;\n\t\t\t\tvar ruleName = ri >= 0 && ri < ruleNames.length ? ruleNames[ri] : \"\" + ri;\n\t\t\t\ts += ruleName;\n\t\t\t}\n\t\t\tif (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {\n\t\t\t\ts += \" \";\n\t\t\t}\n\t\t\tp = p.parentCtx;\n\t\t}\n\t\ts += \"]\";\n\t\treturn s;\n\t};\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t///\n\n\t// The basic notion of a tree has a parent, a payload, and a list of children.\n\t//  It is the most abstract interface for all the trees used by ANTLR.\n\t///\n\n\tvar Token = __webpack_require__(6).Token;\n\tvar Interval = __webpack_require__(10).Interval;\n\tvar INVALID_INTERVAL = new Interval(-1, -2);\n\tvar Utils = __webpack_require__(5);\n\n\tfunction Tree() {\n\t\treturn this;\n\t}\n\n\tfunction SyntaxTree() {\n\t\tTree.call(this);\n\t\treturn this;\n\t}\n\n\tSyntaxTree.prototype = Object.create(Tree.prototype);\n\tSyntaxTree.prototype.constructor = SyntaxTree;\n\n\tfunction ParseTree() {\n\t\tSyntaxTree.call(this);\n\t\treturn this;\n\t}\n\n\tParseTree.prototype = Object.create(SyntaxTree.prototype);\n\tParseTree.prototype.constructor = ParseTree;\n\n\tfunction RuleNode() {\n\t\tParseTree.call(this);\n\t\treturn this;\n\t}\n\n\tRuleNode.prototype = Object.create(ParseTree.prototype);\n\tRuleNode.prototype.constructor = RuleNode;\n\n\tfunction TerminalNode() {\n\t\tParseTree.call(this);\n\t\treturn this;\n\t}\n\n\tTerminalNode.prototype = Object.create(ParseTree.prototype);\n\tTerminalNode.prototype.constructor = TerminalNode;\n\n\tfunction ErrorNode() {\n\t\tTerminalNode.call(this);\n\t\treturn this;\n\t}\n\n\tErrorNode.prototype = Object.create(TerminalNode.prototype);\n\tErrorNode.prototype.constructor = ErrorNode;\n\n\tfunction ParseTreeVisitor() {\n\t\treturn this;\n\t}\n\n\tParseTreeVisitor.prototype.visit = function (ctx) {\n\t\tif (Array.isArray(ctx)) {\n\t\t\treturn ctx.map(function (child) {\n\t\t\t\treturn child.accept(this);\n\t\t\t}, this);\n\t\t} else {\n\t\t\treturn ctx.accept(this);\n\t\t}\n\t};\n\n\tParseTreeVisitor.prototype.visitChildren = function (ctx) {\n\t\treturn this.visit(ctx.children);\n\t};\n\n\tParseTreeVisitor.prototype.visitTerminal = function (node) {};\n\n\tParseTreeVisitor.prototype.visitErrorNode = function (node) {};\n\n\tfunction ParseTreeListener() {\n\t\treturn this;\n\t}\n\n\tParseTreeListener.prototype.visitTerminal = function (node) {};\n\n\tParseTreeListener.prototype.visitErrorNode = function (node) {};\n\n\tParseTreeListener.prototype.enterEveryRule = function (node) {};\n\n\tParseTreeListener.prototype.exitEveryRule = function (node) {};\n\n\tfunction TerminalNodeImpl(symbol) {\n\t\tTerminalNode.call(this);\n\t\tthis.parentCtx = null;\n\t\tthis.symbol = symbol;\n\t\treturn this;\n\t}\n\n\tTerminalNodeImpl.prototype = Object.create(TerminalNode.prototype);\n\tTerminalNodeImpl.prototype.constructor = TerminalNodeImpl;\n\n\tTerminalNodeImpl.prototype.getChild = function (i) {\n\t\treturn null;\n\t};\n\n\tTerminalNodeImpl.prototype.getSymbol = function () {\n\t\treturn this.symbol;\n\t};\n\n\tTerminalNodeImpl.prototype.getParent = function () {\n\t\treturn this.parentCtx;\n\t};\n\n\tTerminalNodeImpl.prototype.getPayload = function () {\n\t\treturn this.symbol;\n\t};\n\n\tTerminalNodeImpl.prototype.getSourceInterval = function () {\n\t\tif (this.symbol === null) {\n\t\t\treturn INVALID_INTERVAL;\n\t\t}\n\t\tvar tokenIndex = this.symbol.tokenIndex;\n\t\treturn new Interval(tokenIndex, tokenIndex);\n\t};\n\n\tTerminalNodeImpl.prototype.getChildCount = function () {\n\t\treturn 0;\n\t};\n\n\tTerminalNodeImpl.prototype.accept = function (visitor) {\n\t\treturn visitor.visitTerminal(this);\n\t};\n\n\tTerminalNodeImpl.prototype.getText = function () {\n\t\treturn this.symbol.text;\n\t};\n\n\tTerminalNodeImpl.prototype.toString = function () {\n\t\tif (this.symbol.type === Token.EOF) {\n\t\t\treturn \"<EOF>\";\n\t\t} else {\n\t\t\treturn this.symbol.text;\n\t\t}\n\t};\n\n\t// Represents a token that was consumed during resynchronization\n\t// rather than during a valid match operation. For example,\n\t// we will create this kind of a node during single token insertion\n\t// and deletion as well as during \"consume until error recovery set\"\n\t// upon no viable alternative exceptions.\n\n\tfunction ErrorNodeImpl(token) {\n\t\tTerminalNodeImpl.call(this, token);\n\t\treturn this;\n\t}\n\n\tErrorNodeImpl.prototype = Object.create(TerminalNodeImpl.prototype);\n\tErrorNodeImpl.prototype.constructor = ErrorNodeImpl;\n\n\tErrorNodeImpl.prototype.isErrorNode = function () {\n\t\treturn true;\n\t};\n\n\tErrorNodeImpl.prototype.accept = function (visitor) {\n\t\treturn visitor.visitErrorNode(this);\n\t};\n\n\tfunction ParseTreeWalker() {\n\t\treturn this;\n\t}\n\n\tParseTreeWalker.prototype.walk = function (listener, t) {\n\t\tvar errorNode = t instanceof ErrorNode || t.isErrorNode !== undefined && t.isErrorNode();\n\t\tif (errorNode) {\n\t\t\tlistener.visitErrorNode(t);\n\t\t} else if (t instanceof TerminalNode) {\n\t\t\tlistener.visitTerminal(t);\n\t\t} else {\n\t\t\tthis.enterRule(listener, t);\n\t\t\tfor (var i = 0; i < t.getChildCount(); i++) {\n\t\t\t\tvar child = t.getChild(i);\n\t\t\t\tthis.walk(listener, child);\n\t\t\t}\n\t\t\tthis.exitRule(listener, t);\n\t\t}\n\t};\n\t//\n\t// The discovery of a rule node, involves sending two events: the generic\n\t// {@link ParseTreeListener//enterEveryRule} and a\n\t// {@link RuleContext}-specific event. First we trigger the generic and then\n\t// the rule specific. We to them in reverse order upon finishing the node.\n\t//\n\tParseTreeWalker.prototype.enterRule = function (listener, r) {\n\t\tvar ctx = r.getRuleContext();\n\t\tlistener.enterEveryRule(ctx);\n\t\tctx.enterRule(listener);\n\t};\n\n\tParseTreeWalker.prototype.exitRule = function (listener, r) {\n\t\tvar ctx = r.getRuleContext();\n\t\tctx.exitRule(listener);\n\t\tlistener.exitEveryRule(ctx);\n\t};\n\n\tParseTreeWalker.DEFAULT = new ParseTreeWalker();\n\n\texports.RuleNode = RuleNode;\n\texports.ErrorNode = ErrorNode;\n\texports.TerminalNode = TerminalNode;\n\texports.ErrorNodeImpl = ErrorNodeImpl;\n\texports.TerminalNodeImpl = TerminalNodeImpl;\n\texports.ParseTreeListener = ParseTreeListener;\n\texports.ParseTreeVisitor = ParseTreeVisitor;\n\texports.ParseTreeWalker = ParseTreeWalker;\n\texports.INVALID_INTERVAL = INVALID_INTERVAL;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\n\tvar Utils = __webpack_require__(5);\n\tvar Token = __webpack_require__(6).Token;\n\tvar RuleNode = __webpack_require__(14).RuleNode;\n\tvar ErrorNode = __webpack_require__(14).ErrorNode;\n\tvar TerminalNode = __webpack_require__(14).TerminalNode;\n\tvar ParserRuleContext = __webpack_require__(16).ParserRuleContext;\n\tvar RuleContext = __webpack_require__(13).RuleContext;\n\tvar INVALID_ALT_NUMBER = __webpack_require__(3).INVALID_ALT_NUMBER;\n\n\t/** A set of utility routines useful for all kinds of ANTLR trees. */\n\tfunction Trees() {}\n\n\t// Print out a whole tree in LISP form. {@link //getNodeText} is used on the\n\t//  node payloads to get the text for the nodes.  Detect\n\t//  parse trees and extract data appropriately.\n\tTrees.toStringTree = function (tree, ruleNames, recog) {\n\t    ruleNames = ruleNames || null;\n\t    recog = recog || null;\n\t    if (recog !== null) {\n\t        ruleNames = recog.ruleNames;\n\t    }\n\t    var s = Trees.getNodeText(tree, ruleNames);\n\t    s = Utils.escapeWhitespace(s, false);\n\t    var c = tree.getChildCount();\n\t    if (c === 0) {\n\t        return s;\n\t    }\n\t    var res = \"(\" + s + ' ';\n\t    if (c > 0) {\n\t        s = Trees.toStringTree(tree.getChild(0), ruleNames);\n\t        res = res.concat(s);\n\t    }\n\t    for (var i = 1; i < c; i++) {\n\t        s = Trees.toStringTree(tree.getChild(i), ruleNames);\n\t        res = res.concat(' ' + s);\n\t    }\n\t    res = res.concat(\")\");\n\t    return res;\n\t};\n\n\tTrees.getNodeText = function (t, ruleNames, recog) {\n\t    ruleNames = ruleNames || null;\n\t    recog = recog || null;\n\t    if (recog !== null) {\n\t        ruleNames = recog.ruleNames;\n\t    }\n\t    if (ruleNames !== null) {\n\t        if (t instanceof RuleContext) {\n\t            var altNumber = t.getAltNumber();\n\t            if (altNumber != INVALID_ALT_NUMBER) {\n\t                return ruleNames[t.ruleIndex] + \":\" + altNumber;\n\t            }\n\t            return ruleNames[t.ruleIndex];\n\t        } else if (t instanceof ErrorNode) {\n\t            return t.toString();\n\t        } else if (t instanceof TerminalNode) {\n\t            if (t.symbol !== null) {\n\t                return t.symbol.text;\n\t            }\n\t        }\n\t    }\n\t    // no recog for rule names\n\t    var payload = t.getPayload();\n\t    if (payload instanceof Token) {\n\t        return payload.text;\n\t    }\n\t    return t.getPayload().toString();\n\t};\n\n\t// Return ordered list of all children of this node\n\tTrees.getChildren = function (t) {\n\t    var list = [];\n\t    for (var i = 0; i < t.getChildCount(); i++) {\n\t        list.push(t.getChild(i));\n\t    }\n\t    return list;\n\t};\n\n\t// Return a list of all ancestors of this node.  The first node of\n\t//  list is the root and the last is the parent of this node.\n\t//\n\tTrees.getAncestors = function (t) {\n\t    var ancestors = [];\n\t    t = t.getParent();\n\t    while (t !== null) {\n\t        ancestors = [t].concat(ancestors);\n\t        t = t.getParent();\n\t    }\n\t    return ancestors;\n\t};\n\n\tTrees.findAllTokenNodes = function (t, ttype) {\n\t    return Trees.findAllNodes(t, ttype, true);\n\t};\n\n\tTrees.findAllRuleNodes = function (t, ruleIndex) {\n\t    return Trees.findAllNodes(t, ruleIndex, false);\n\t};\n\n\tTrees.findAllNodes = function (t, index, findTokens) {\n\t    var nodes = [];\n\t    Trees._findAllNodes(t, index, findTokens, nodes);\n\t    return nodes;\n\t};\n\n\tTrees._findAllNodes = function (t, index, findTokens, nodes) {\n\t    // check this node (the root) first\n\t    if (findTokens && t instanceof TerminalNode) {\n\t        if (t.symbol.type === index) {\n\t            nodes.push(t);\n\t        }\n\t    } else if (!findTokens && t instanceof ParserRuleContext) {\n\t        if (t.ruleIndex === index) {\n\t            nodes.push(t);\n\t        }\n\t    }\n\t    // check children\n\t    for (var i = 0; i < t.getChildCount(); i++) {\n\t        Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);\n\t    }\n\t};\n\n\tTrees.descendants = function (t) {\n\t    var nodes = [t];\n\t    for (var i = 0; i < t.getChildCount(); i++) {\n\t        nodes = nodes.concat(Trees.descendants(t.getChild(i)));\n\t    }\n\t    return nodes;\n\t};\n\n\texports.Trees = Trees;\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\n\t//* A rule invocation record for parsing.\n\t//\n\t//  Contains all of the information about the current rule not stored in the\n\t//  RuleContext. It handles parse tree children list, Any ATN state\n\t//  tracing, and the default values available for rule indications:\n\t//  start, stop, rule index, current alt number, current\n\t//  ATN state.\n\t//\n\t//  Subclasses made for each rule and grammar track the parameters,\n\t//  return values, locals, and labels specific to that rule. These\n\t//  are the objects that are returned from rules.\n\t//\n\t//  Note text is not an actual field of a rule return value; it is computed\n\t//  from start and stop using the input stream's toString() method.  I\n\t//  could add a ctor to this so that we can pass in and store the input\n\t//  stream, but I'm not sure we want to do that.  It would seem to be undefined\n\t//  to get the .text property anyway if the rule matches tokens from multiple\n\t//  input streams.\n\t//\n\t//  I do not use getters for fields of objects that are used simply to\n\t//  group values such as this aggregate.  The getters/setters are there to\n\t//  satisfy the superclass interface.\n\n\tvar RuleContext = __webpack_require__(13).RuleContext;\n\tvar Tree = __webpack_require__(14);\n\tvar INVALID_INTERVAL = Tree.INVALID_INTERVAL;\n\tvar TerminalNode = Tree.TerminalNode;\n\tvar TerminalNodeImpl = Tree.TerminalNodeImpl;\n\tvar ErrorNodeImpl = Tree.ErrorNodeImpl;\n\tvar Interval = __webpack_require__(10).Interval;\n\n\tfunction ParserRuleContext(parent, invokingStateNumber) {\n\t  parent = parent || null;\n\t  invokingStateNumber = invokingStateNumber || null;\n\t  RuleContext.call(this, parent, invokingStateNumber);\n\t  this.ruleIndex = -1;\n\t  // * If we are debugging or building a parse tree for a visitor,\n\t  // we need to track all of the tokens and rule invocations associated\n\t  // with this rule's context. This is empty for parsing w/o tree constr.\n\t  // operation because we don't the need to track the details about\n\t  // how we parse this rule.\n\t  // /\n\t  this.children = null;\n\t  this.start = null;\n\t  this.stop = null;\n\t  // The exception that forced this rule to return. If the rule successfully\n\t  // completed, this is {@code null}.\n\t  this.exception = null;\n\t}\n\n\tParserRuleContext.prototype = Object.create(RuleContext.prototype);\n\tParserRuleContext.prototype.constructor = ParserRuleContext;\n\n\t// * COPY a ctx (I'm deliberately not using copy constructor)///\n\tParserRuleContext.prototype.copyFrom = function (ctx) {\n\t  // from RuleContext\n\t  this.parentCtx = ctx.parentCtx;\n\t  this.invokingState = ctx.invokingState;\n\t  this.children = null;\n\t  this.start = ctx.start;\n\t  this.stop = ctx.stop;\n\t  // copy any error nodes to alt label node\n\t  if (ctx.children) {\n\t    this.children = [];\n\t    // reset parent pointer for any error nodes\n\t    ctx.children.map(function (child) {\n\t      if (child instanceof ErrorNodeImpl) {\n\t        this.children.push(child);\n\t        child.parentCtx = this;\n\t      }\n\t    }, this);\n\t  }\n\t};\n\n\t// Double dispatch methods for listeners\n\tParserRuleContext.prototype.enterRule = function (listener) {};\n\n\tParserRuleContext.prototype.exitRule = function (listener) {};\n\n\t// * Does not set parent link; other add methods do that///\n\tParserRuleContext.prototype.addChild = function (child) {\n\t  if (this.children === null) {\n\t    this.children = [];\n\t  }\n\t  this.children.push(child);\n\t  return child;\n\t};\n\n\t// * Used by enterOuterAlt to toss out a RuleContext previously added as\n\t// we entered a rule. If we have // label, we will need to remove\n\t// generic ruleContext object.\n\t// /\n\tParserRuleContext.prototype.removeLastChild = function () {\n\t  if (this.children !== null) {\n\t    this.children.pop();\n\t  }\n\t};\n\n\tParserRuleContext.prototype.addTokenNode = function (token) {\n\t  var node = new TerminalNodeImpl(token);\n\t  this.addChild(node);\n\t  node.parentCtx = this;\n\t  return node;\n\t};\n\n\tParserRuleContext.prototype.addErrorNode = function (badToken) {\n\t  var node = new ErrorNodeImpl(badToken);\n\t  this.addChild(node);\n\t  node.parentCtx = this;\n\t  return node;\n\t};\n\n\tParserRuleContext.prototype.getChild = function (i, type) {\n\t  type = type || null;\n\t  if (this.children === null || i < 0 || i >= this.children.length) {\n\t    return null;\n\t  }\n\t  if (type === null) {\n\t    return this.children[i];\n\t  } else {\n\t    for (var j = 0; j < this.children.length; j++) {\n\t      var child = this.children[j];\n\t      if (child instanceof type) {\n\t        if (i === 0) {\n\t          return child;\n\t        } else {\n\t          i -= 1;\n\t        }\n\t      }\n\t    }\n\t    return null;\n\t  }\n\t};\n\n\tParserRuleContext.prototype.getToken = function (ttype, i) {\n\t  if (this.children === null || i < 0 || i >= this.children.length) {\n\t    return null;\n\t  }\n\t  for (var j = 0; j < this.children.length; j++) {\n\t    var child = this.children[j];\n\t    if (child instanceof TerminalNode) {\n\t      if (child.symbol.type === ttype) {\n\t        if (i === 0) {\n\t          return child;\n\t        } else {\n\t          i -= 1;\n\t        }\n\t      }\n\t    }\n\t  }\n\t  return null;\n\t};\n\n\tParserRuleContext.prototype.getTokens = function (ttype) {\n\t  if (this.children === null) {\n\t    return [];\n\t  } else {\n\t    var tokens = [];\n\t    for (var j = 0; j < this.children.length; j++) {\n\t      var child = this.children[j];\n\t      if (child instanceof TerminalNode) {\n\t        if (child.symbol.type === ttype) {\n\t          tokens.push(child);\n\t        }\n\t      }\n\t    }\n\t    return tokens;\n\t  }\n\t};\n\n\tParserRuleContext.prototype.getTypedRuleContext = function (ctxType, i) {\n\t  return this.getChild(i, ctxType);\n\t};\n\n\tParserRuleContext.prototype.getTypedRuleContexts = function (ctxType) {\n\t  if (this.children === null) {\n\t    return [];\n\t  } else {\n\t    var contexts = [];\n\t    for (var j = 0; j < this.children.length; j++) {\n\t      var child = this.children[j];\n\t      if (child instanceof ctxType) {\n\t        contexts.push(child);\n\t      }\n\t    }\n\t    return contexts;\n\t  }\n\t};\n\n\tParserRuleContext.prototype.getChildCount = function () {\n\t  if (this.children === null) {\n\t    return 0;\n\t  } else {\n\t    return this.children.length;\n\t  }\n\t};\n\n\tParserRuleContext.prototype.getSourceInterval = function () {\n\t  if (this.start === null || this.stop === null) {\n\t    return INVALID_INTERVAL;\n\t  } else {\n\t    return new Interval(this.start.tokenIndex, this.stop.tokenIndex);\n\t  }\n\t};\n\n\tRuleContext.EMPTY = new ParserRuleContext();\n\n\tfunction InterpreterRuleContext(parent, invokingStateNumber, ruleIndex) {\n\t  ParserRuleContext.call(parent, invokingStateNumber);\n\t  this.ruleIndex = ruleIndex;\n\t  return this;\n\t}\n\n\tInterpreterRuleContext.prototype = Object.create(ParserRuleContext.prototype);\n\tInterpreterRuleContext.prototype.constructor = InterpreterRuleContext;\n\n\texports.ParserRuleContext = ParserRuleContext;\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\n\tvar Token = __webpack_require__(6).Token;\n\tvar ATN = __webpack_require__(3).ATN;\n\tvar ATNType = __webpack_require__(18).ATNType;\n\tvar ATNStates = __webpack_require__(8);\n\tvar ATNState = ATNStates.ATNState;\n\tvar BasicState = ATNStates.BasicState;\n\tvar DecisionState = ATNStates.DecisionState;\n\tvar BlockStartState = ATNStates.BlockStartState;\n\tvar BlockEndState = ATNStates.BlockEndState;\n\tvar LoopEndState = ATNStates.LoopEndState;\n\tvar RuleStartState = ATNStates.RuleStartState;\n\tvar RuleStopState = ATNStates.RuleStopState;\n\tvar TokensStartState = ATNStates.TokensStartState;\n\tvar PlusLoopbackState = ATNStates.PlusLoopbackState;\n\tvar StarLoopbackState = ATNStates.StarLoopbackState;\n\tvar StarLoopEntryState = ATNStates.StarLoopEntryState;\n\tvar PlusBlockStartState = ATNStates.PlusBlockStartState;\n\tvar StarBlockStartState = ATNStates.StarBlockStartState;\n\tvar BasicBlockStartState = ATNStates.BasicBlockStartState;\n\tvar Transitions = __webpack_require__(11);\n\tvar Transition = Transitions.Transition;\n\tvar AtomTransition = Transitions.AtomTransition;\n\tvar SetTransition = Transitions.SetTransition;\n\tvar NotSetTransition = Transitions.NotSetTransition;\n\tvar RuleTransition = Transitions.RuleTransition;\n\tvar RangeTransition = Transitions.RangeTransition;\n\tvar ActionTransition = Transitions.ActionTransition;\n\tvar EpsilonTransition = Transitions.EpsilonTransition;\n\tvar WildcardTransition = Transitions.WildcardTransition;\n\tvar PredicateTransition = Transitions.PredicateTransition;\n\tvar PrecedencePredicateTransition = Transitions.PrecedencePredicateTransition;\n\tvar IntervalSet = __webpack_require__(10).IntervalSet;\n\tvar Interval = __webpack_require__(10).Interval;\n\tvar ATNDeserializationOptions = __webpack_require__(19).ATNDeserializationOptions;\n\tvar LexerActions = __webpack_require__(20);\n\tvar LexerActionType = LexerActions.LexerActionType;\n\tvar LexerSkipAction = LexerActions.LexerSkipAction;\n\tvar LexerChannelAction = LexerActions.LexerChannelAction;\n\tvar LexerCustomAction = LexerActions.LexerCustomAction;\n\tvar LexerMoreAction = LexerActions.LexerMoreAction;\n\tvar LexerTypeAction = LexerActions.LexerTypeAction;\n\tvar LexerPushModeAction = LexerActions.LexerPushModeAction;\n\tvar LexerPopModeAction = LexerActions.LexerPopModeAction;\n\tvar LexerModeAction = LexerActions.LexerModeAction;\n\t// This is the earliest supported serialized UUID.\n\t// stick to serialized version for now, we don't need a UUID instance\n\tvar BASE_SERIALIZED_UUID = \"AADB8D7E-AEEF-4415-AD2B-8204D6CF042E\";\n\n\t//\n\t// This UUID indicates the serialized ATN contains two sets of\n\t// IntervalSets, where the second set's values are encoded as\n\t// 32-bit integers to support the full Unicode SMP range up to U+10FFFF.\n\t//\n\tvar ADDED_UNICODE_SMP = \"59627784-3BE5-417A-B9EB-8131A7286089\";\n\n\t// This list contains all of the currently supported UUIDs, ordered by when\n\t// the feature first appeared in this branch.\n\tvar SUPPORTED_UUIDS = [BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP];\n\n\tvar SERIALIZED_VERSION = 3;\n\n\t// This is the current serialized UUID.\n\tvar SERIALIZED_UUID = ADDED_UNICODE_SMP;\n\n\tfunction initArray(length, value) {\n\t    var tmp = [];\n\t    tmp[length - 1] = value;\n\t    return tmp.map(function (i) {\n\t        return value;\n\t    });\n\t}\n\n\tfunction ATNDeserializer(options) {\n\n\t    if (options === undefined || options === null) {\n\t        options = ATNDeserializationOptions.defaultOptions;\n\t    }\n\t    this.deserializationOptions = options;\n\t    this.stateFactories = null;\n\t    this.actionFactories = null;\n\n\t    return this;\n\t}\n\n\t// Determines if a particular serialized representation of an ATN supports\n\t// a particular feature, identified by the {@link UUID} used for serializing\n\t// the ATN at the time the feature was first introduced.\n\t//\n\t// @param feature The {@link UUID} marking the first time the feature was\n\t// supported in the serialized ATN.\n\t// @param actualUuid The {@link UUID} of the actual serialized ATN which is\n\t// currently being deserialized.\n\t// @return {@code true} if the {@code actualUuid} value represents a\n\t// serialized ATN at or after the feature identified by {@code feature} was\n\t// introduced; otherwise, {@code false}.\n\n\tATNDeserializer.prototype.isFeatureSupported = function (feature, actualUuid) {\n\t    var idx1 = SUPPORTED_UUIDS.indexOf(feature);\n\t    if (idx1 < 0) {\n\t        return false;\n\t    }\n\t    var idx2 = SUPPORTED_UUIDS.indexOf(actualUuid);\n\t    return idx2 >= idx1;\n\t};\n\n\tATNDeserializer.prototype.deserialize = function (data) {\n\t    this.reset(data);\n\t    this.checkVersion();\n\t    this.checkUUID();\n\t    var atn = this.readATN();\n\t    this.readStates(atn);\n\t    this.readRules(atn);\n\t    this.readModes(atn);\n\t    var sets = [];\n\t    // First, deserialize sets with 16-bit arguments <= U+FFFF.\n\t    this.readSets(atn, sets, this.readInt.bind(this));\n\t    // Next, if the ATN was serialized with the Unicode SMP feature,\n\t    // deserialize sets with 32-bit arguments <= U+10FFFF.\n\t    if (this.isFeatureSupported(ADDED_UNICODE_SMP, this.uuid)) {\n\t        this.readSets(atn, sets, this.readInt32.bind(this));\n\t    }\n\t    this.readEdges(atn, sets);\n\t    this.readDecisions(atn);\n\t    this.readLexerActions(atn);\n\t    this.markPrecedenceDecisions(atn);\n\t    this.verifyATN(atn);\n\t    if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER) {\n\t        this.generateRuleBypassTransitions(atn);\n\t        // re-verify after modification\n\t        this.verifyATN(atn);\n\t    }\n\t    return atn;\n\t};\n\n\tATNDeserializer.prototype.reset = function (data) {\n\t    var adjust = function adjust(c) {\n\t        var v = c.charCodeAt(0);\n\t        return v > 1 ? v - 2 : v + 65533;\n\t    };\n\t    var temp = data.split(\"\").map(adjust);\n\t    // don't adjust the first value since that's the version number\n\t    temp[0] = data.charCodeAt(0);\n\t    this.data = temp;\n\t    this.pos = 0;\n\t};\n\n\tATNDeserializer.prototype.checkVersion = function () {\n\t    var version = this.readInt();\n\t    if (version !== SERIALIZED_VERSION) {\n\t        throw \"Could not deserialize ATN with version \" + version + \" (expected \" + SERIALIZED_VERSION + \").\";\n\t    }\n\t};\n\n\tATNDeserializer.prototype.checkUUID = function () {\n\t    var uuid = this.readUUID();\n\t    if (SUPPORTED_UUIDS.indexOf(uuid) < 0) {\n\t        throw \"Could not deserialize ATN with UUID: \" + uuid + \" (expected \" + SERIALIZED_UUID + \" or a legacy UUID).\", uuid, SERIALIZED_UUID;\n\t    }\n\t    this.uuid = uuid;\n\t};\n\n\tATNDeserializer.prototype.readATN = function () {\n\t    var grammarType = this.readInt();\n\t    var maxTokenType = this.readInt();\n\t    return new ATN(grammarType, maxTokenType);\n\t};\n\n\tATNDeserializer.prototype.readStates = function (atn) {\n\t    var j, pair, stateNumber;\n\t    var loopBackStateNumbers = [];\n\t    var endStateNumbers = [];\n\t    var nstates = this.readInt();\n\t    for (var i = 0; i < nstates; i++) {\n\t        var stype = this.readInt();\n\t        // ignore bad type of states\n\t        if (stype === ATNState.INVALID_TYPE) {\n\t            atn.addState(null);\n\t            continue;\n\t        }\n\t        var ruleIndex = this.readInt();\n\t        if (ruleIndex === 0xFFFF) {\n\t            ruleIndex = -1;\n\t        }\n\t        var s = this.stateFactory(stype, ruleIndex);\n\t        if (stype === ATNState.LOOP_END) {\n\t            // special case\n\t            var loopBackStateNumber = this.readInt();\n\t            loopBackStateNumbers.push([s, loopBackStateNumber]);\n\t        } else if (s instanceof BlockStartState) {\n\t            var endStateNumber = this.readInt();\n\t            endStateNumbers.push([s, endStateNumber]);\n\t        }\n\t        atn.addState(s);\n\t    }\n\t    // delay the assignment of loop back and end states until we know all the\n\t    // state instances have been initialized\n\t    for (j = 0; j < loopBackStateNumbers.length; j++) {\n\t        pair = loopBackStateNumbers[j];\n\t        pair[0].loopBackState = atn.states[pair[1]];\n\t    }\n\n\t    for (j = 0; j < endStateNumbers.length; j++) {\n\t        pair = endStateNumbers[j];\n\t        pair[0].endState = atn.states[pair[1]];\n\t    }\n\n\t    var numNonGreedyStates = this.readInt();\n\t    for (j = 0; j < numNonGreedyStates; j++) {\n\t        stateNumber = this.readInt();\n\t        atn.states[stateNumber].nonGreedy = true;\n\t    }\n\n\t    var numPrecedenceStates = this.readInt();\n\t    for (j = 0; j < numPrecedenceStates; j++) {\n\t        stateNumber = this.readInt();\n\t        atn.states[stateNumber].isPrecedenceRule = true;\n\t    }\n\t};\n\n\tATNDeserializer.prototype.readRules = function (atn) {\n\t    var i;\n\t    var nrules = this.readInt();\n\t    if (atn.grammarType === ATNType.LEXER) {\n\t        atn.ruleToTokenType = initArray(nrules, 0);\n\t    }\n\t    atn.ruleToStartState = initArray(nrules, 0);\n\t    for (i = 0; i < nrules; i++) {\n\t        var s = this.readInt();\n\t        var startState = atn.states[s];\n\t        atn.ruleToStartState[i] = startState;\n\t        if (atn.grammarType === ATNType.LEXER) {\n\t            var tokenType = this.readInt();\n\t            if (tokenType === 0xFFFF) {\n\t                tokenType = Token.EOF;\n\t            }\n\t            atn.ruleToTokenType[i] = tokenType;\n\t        }\n\t    }\n\t    atn.ruleToStopState = initArray(nrules, 0);\n\t    for (i = 0; i < atn.states.length; i++) {\n\t        var state = atn.states[i];\n\t        if (!(state instanceof RuleStopState)) {\n\t            continue;\n\t        }\n\t        atn.ruleToStopState[state.ruleIndex] = state;\n\t        atn.ruleToStartState[state.ruleIndex].stopState = state;\n\t    }\n\t};\n\n\tATNDeserializer.prototype.readModes = function (atn) {\n\t    var nmodes = this.readInt();\n\t    for (var i = 0; i < nmodes; i++) {\n\t        var s = this.readInt();\n\t        atn.modeToStartState.push(atn.states[s]);\n\t    }\n\t};\n\n\tATNDeserializer.prototype.readSets = function (atn, sets, readUnicode) {\n\t    var m = this.readInt();\n\t    for (var i = 0; i < m; i++) {\n\t        var iset = new IntervalSet();\n\t        sets.push(iset);\n\t        var n = this.readInt();\n\t        var containsEof = this.readInt();\n\t        if (containsEof !== 0) {\n\t            iset.addOne(-1);\n\t        }\n\t        for (var j = 0; j < n; j++) {\n\t            var i1 = readUnicode();\n\t            var i2 = readUnicode();\n\t            iset.addRange(i1, i2);\n\t        }\n\t    }\n\t};\n\n\tATNDeserializer.prototype.readEdges = function (atn, sets) {\n\t    var i, j, state, trans, target;\n\t    var nedges = this.readInt();\n\t    for (i = 0; i < nedges; i++) {\n\t        var src = this.readInt();\n\t        var trg = this.readInt();\n\t        var ttype = this.readInt();\n\t        var arg1 = this.readInt();\n\t        var arg2 = this.readInt();\n\t        var arg3 = this.readInt();\n\t        trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);\n\t        var srcState = atn.states[src];\n\t        srcState.addTransition(trans);\n\t    }\n\t    // edges for rule stop states can be derived, so they aren't serialized\n\t    for (i = 0; i < atn.states.length; i++) {\n\t        state = atn.states[i];\n\t        for (j = 0; j < state.transitions.length; j++) {\n\t            var t = state.transitions[j];\n\t            if (!(t instanceof RuleTransition)) {\n\t                continue;\n\t            }\n\t            var outermostPrecedenceReturn = -1;\n\t            if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {\n\t                if (t.precedence === 0) {\n\t                    outermostPrecedenceReturn = t.target.ruleIndex;\n\t                }\n\t            }\n\n\t            trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);\n\t            atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);\n\t        }\n\t    }\n\n\t    for (i = 0; i < atn.states.length; i++) {\n\t        state = atn.states[i];\n\t        if (state instanceof BlockStartState) {\n\t            // we need to know the end state to set its start state\n\t            if (state.endState === null) {\n\t                throw \"IllegalState\";\n\t            }\n\t            // block end states can only be associated to a single block start\n\t            // state\n\t            if (state.endState.startState !== null) {\n\t                throw \"IllegalState\";\n\t            }\n\t            state.endState.startState = state;\n\t        }\n\t        if (state instanceof PlusLoopbackState) {\n\t            for (j = 0; j < state.transitions.length; j++) {\n\t                target = state.transitions[j].target;\n\t                if (target instanceof PlusBlockStartState) {\n\t                    target.loopBackState = state;\n\t                }\n\t            }\n\t        } else if (state instanceof StarLoopbackState) {\n\t            for (j = 0; j < state.transitions.length; j++) {\n\t                target = state.transitions[j].target;\n\t                if (target instanceof StarLoopEntryState) {\n\t                    target.loopBackState = state;\n\t                }\n\t            }\n\t        }\n\t    }\n\t};\n\n\tATNDeserializer.prototype.readDecisions = function (atn) {\n\t    var ndecisions = this.readInt();\n\t    for (var i = 0; i < ndecisions; i++) {\n\t        var s = this.readInt();\n\t        var decState = atn.states[s];\n\t        atn.decisionToState.push(decState);\n\t        decState.decision = i;\n\t    }\n\t};\n\n\tATNDeserializer.prototype.readLexerActions = function (atn) {\n\t    if (atn.grammarType === ATNType.LEXER) {\n\t        var count = this.readInt();\n\t        atn.lexerActions = initArray(count, null);\n\t        for (var i = 0; i < count; i++) {\n\t            var actionType = this.readInt();\n\t            var data1 = this.readInt();\n\t            if (data1 === 0xFFFF) {\n\t                data1 = -1;\n\t            }\n\t            var data2 = this.readInt();\n\t            if (data2 === 0xFFFF) {\n\t                data2 = -1;\n\t            }\n\t            var lexerAction = this.lexerActionFactory(actionType, data1, data2);\n\t            atn.lexerActions[i] = lexerAction;\n\t        }\n\t    }\n\t};\n\n\tATNDeserializer.prototype.generateRuleBypassTransitions = function (atn) {\n\t    var i;\n\t    var count = atn.ruleToStartState.length;\n\t    for (i = 0; i < count; i++) {\n\t        atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;\n\t    }\n\t    for (i = 0; i < count; i++) {\n\t        this.generateRuleBypassTransition(atn, i);\n\t    }\n\t};\n\n\tATNDeserializer.prototype.generateRuleBypassTransition = function (atn, idx) {\n\t    var i, state;\n\t    var bypassStart = new BasicBlockStartState();\n\t    bypassStart.ruleIndex = idx;\n\t    atn.addState(bypassStart);\n\n\t    var bypassStop = new BlockEndState();\n\t    bypassStop.ruleIndex = idx;\n\t    atn.addState(bypassStop);\n\n\t    bypassStart.endState = bypassStop;\n\t    atn.defineDecisionState(bypassStart);\n\n\t    bypassStop.startState = bypassStart;\n\n\t    var excludeTransition = null;\n\t    var endState = null;\n\n\t    if (atn.ruleToStartState[idx].isPrecedenceRule) {\n\t        // wrap from the beginning of the rule to the StarLoopEntryState\n\t        endState = null;\n\t        for (i = 0; i < atn.states.length; i++) {\n\t            state = atn.states[i];\n\t            if (this.stateIsEndStateFor(state, idx)) {\n\t                endState = state;\n\t                excludeTransition = state.loopBackState.transitions[0];\n\t                break;\n\t            }\n\t        }\n\t        if (excludeTransition === null) {\n\t            throw \"Couldn't identify final state of the precedence rule prefix section.\";\n\t        }\n\t    } else {\n\t        endState = atn.ruleToStopState[idx];\n\t    }\n\n\t    // all non-excluded transitions that currently target end state need to\n\t    // target blockEnd instead\n\t    for (i = 0; i < atn.states.length; i++) {\n\t        state = atn.states[i];\n\t        for (var j = 0; j < state.transitions.length; j++) {\n\t            var transition = state.transitions[j];\n\t            if (transition === excludeTransition) {\n\t                continue;\n\t            }\n\t            if (transition.target === endState) {\n\t                transition.target = bypassStop;\n\t            }\n\t        }\n\t    }\n\n\t    // all transitions leaving the rule start state need to leave blockStart\n\t    // instead\n\t    var ruleToStartState = atn.ruleToStartState[idx];\n\t    var count = ruleToStartState.transitions.length;\n\t    while (count > 0) {\n\t        bypassStart.addTransition(ruleToStartState.transitions[count - 1]);\n\t        ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);\n\t    }\n\t    // link the new states\n\t    atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));\n\t    bypassStop.addTransition(new EpsilonTransition(endState));\n\n\t    var matchState = new BasicState();\n\t    atn.addState(matchState);\n\t    matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));\n\t    bypassStart.addTransition(new EpsilonTransition(matchState));\n\t};\n\n\tATNDeserializer.prototype.stateIsEndStateFor = function (state, idx) {\n\t    if (state.ruleIndex !== idx) {\n\t        return null;\n\t    }\n\t    if (!(state instanceof StarLoopEntryState)) {\n\t        return null;\n\t    }\n\t    var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n\t    if (!(maybeLoopEndState instanceof LoopEndState)) {\n\t        return null;\n\t    }\n\t    if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transitions[0].target instanceof RuleStopState) {\n\t        return state;\n\t    } else {\n\t        return null;\n\t    }\n\t};\n\n\t//\n\t// Analyze the {@link StarLoopEntryState} states in the specified ATN to set\n\t// the {@link StarLoopEntryState//isPrecedenceDecision} field to the\n\t// correct value.\n\t//\n\t// @param atn The ATN.\n\t//\n\tATNDeserializer.prototype.markPrecedenceDecisions = function (atn) {\n\t    for (var i = 0; i < atn.states.length; i++) {\n\t        var state = atn.states[i];\n\t        if (!(state instanceof StarLoopEntryState)) {\n\t            continue;\n\t        }\n\t        // We analyze the ATN to determine if this ATN decision state is the\n\t        // decision for the closure block that determines whether a\n\t        // precedence rule should continue or complete.\n\t        //\n\t        if (atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {\n\t            var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n\t            if (maybeLoopEndState instanceof LoopEndState) {\n\t                if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transitions[0].target instanceof RuleStopState) {\n\t                    state.isPrecedenceDecision = true;\n\t                }\n\t            }\n\t        }\n\t    }\n\t};\n\n\tATNDeserializer.prototype.verifyATN = function (atn) {\n\t    if (!this.deserializationOptions.verifyATN) {\n\t        return;\n\t    }\n\t    // verify assumptions\n\t    for (var i = 0; i < atn.states.length; i++) {\n\t        var state = atn.states[i];\n\t        if (state === null) {\n\t            continue;\n\t        }\n\t        this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);\n\t        if (state instanceof PlusBlockStartState) {\n\t            this.checkCondition(state.loopBackState !== null);\n\t        } else if (state instanceof StarLoopEntryState) {\n\t            this.checkCondition(state.loopBackState !== null);\n\t            this.checkCondition(state.transitions.length === 2);\n\t            if (state.transitions[0].target instanceof StarBlockStartState) {\n\t                this.checkCondition(state.transitions[1].target instanceof LoopEndState);\n\t                this.checkCondition(!state.nonGreedy);\n\t            } else if (state.transitions[0].target instanceof LoopEndState) {\n\t                this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);\n\t                this.checkCondition(state.nonGreedy);\n\t            } else {\n\t                throw \"IllegalState\";\n\t            }\n\t        } else if (state instanceof StarLoopbackState) {\n\t            this.checkCondition(state.transitions.length === 1);\n\t            this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);\n\t        } else if (state instanceof LoopEndState) {\n\t            this.checkCondition(state.loopBackState !== null);\n\t        } else if (state instanceof RuleStartState) {\n\t            this.checkCondition(state.stopState !== null);\n\t        } else if (state instanceof BlockStartState) {\n\t            this.checkCondition(state.endState !== null);\n\t        } else if (state instanceof BlockEndState) {\n\t            this.checkCondition(state.startState !== null);\n\t        } else if (state instanceof DecisionState) {\n\t            this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);\n\t        } else {\n\t            this.checkCondition(state.transitions.length <= 1 || state instanceof RuleStopState);\n\t        }\n\t    }\n\t};\n\n\tATNDeserializer.prototype.checkCondition = function (condition, message) {\n\t    if (!condition) {\n\t        if (message === undefined || message === null) {\n\t            message = \"IllegalState\";\n\t        }\n\t        throw message;\n\t    }\n\t};\n\n\tATNDeserializer.prototype.readInt = function () {\n\t    return this.data[this.pos++];\n\t};\n\n\tATNDeserializer.prototype.readInt32 = function () {\n\t    var low = this.readInt();\n\t    var high = this.readInt();\n\t    return low | high << 16;\n\t};\n\n\tATNDeserializer.prototype.readLong = function () {\n\t    var low = this.readInt32();\n\t    var high = this.readInt32();\n\t    return low & 0x00000000FFFFFFFF | high << 32;\n\t};\n\n\tfunction createByteToHex() {\n\t    var bth = [];\n\t    for (var i = 0; i < 256; i++) {\n\t        bth[i] = (i + 0x100).toString(16).substr(1).toUpperCase();\n\t    }\n\t    return bth;\n\t}\n\n\tvar byteToHex = createByteToHex();\n\n\tATNDeserializer.prototype.readUUID = function () {\n\t    var bb = [];\n\t    for (var i = 7; i >= 0; i--) {\n\t        var int = this.readInt();\n\t        /* jshint bitwise: false */\n\t        bb[2 * i + 1] = int & 0xFF;\n\t        bb[2 * i] = int >> 8 & 0xFF;\n\t    }\n\t    return byteToHex[bb[0]] + byteToHex[bb[1]] + byteToHex[bb[2]] + byteToHex[bb[3]] + '-' + byteToHex[bb[4]] + byteToHex[bb[5]] + '-' + byteToHex[bb[6]] + byteToHex[bb[7]] + '-' + byteToHex[bb[8]] + byteToHex[bb[9]] + '-' + byteToHex[bb[10]] + byteToHex[bb[11]] + byteToHex[bb[12]] + byteToHex[bb[13]] + byteToHex[bb[14]] + byteToHex[bb[15]];\n\t};\n\n\tATNDeserializer.prototype.edgeFactory = function (atn, type, src, trg, arg1, arg2, arg3, sets) {\n\t    var target = atn.states[trg];\n\t    switch (type) {\n\t        case Transition.EPSILON:\n\t            return new EpsilonTransition(target);\n\t        case Transition.RANGE:\n\t            return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);\n\t        case Transition.RULE:\n\t            return new RuleTransition(atn.states[arg1], arg2, arg3, target);\n\t        case Transition.PREDICATE:\n\t            return new PredicateTransition(target, arg1, arg2, arg3 !== 0);\n\t        case Transition.PRECEDENCE:\n\t            return new PrecedencePredicateTransition(target, arg1);\n\t        case Transition.ATOM:\n\t            return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);\n\t        case Transition.ACTION:\n\t            return new ActionTransition(target, arg1, arg2, arg3 !== 0);\n\t        case Transition.SET:\n\t            return new SetTransition(target, sets[arg1]);\n\t        case Transition.NOT_SET:\n\t            return new NotSetTransition(target, sets[arg1]);\n\t        case Transition.WILDCARD:\n\t            return new WildcardTransition(target);\n\t        default:\n\t            throw \"The specified transition type: \" + type + \" is not valid.\";\n\t    }\n\t};\n\n\tATNDeserializer.prototype.stateFactory = function (type, ruleIndex) {\n\t    if (this.stateFactories === null) {\n\t        var sf = [];\n\t        sf[ATNState.INVALID_TYPE] = null;\n\t        sf[ATNState.BASIC] = function () {\n\t            return new BasicState();\n\t        };\n\t        sf[ATNState.RULE_START] = function () {\n\t            return new RuleStartState();\n\t        };\n\t        sf[ATNState.BLOCK_START] = function () {\n\t            return new BasicBlockStartState();\n\t        };\n\t        sf[ATNState.PLUS_BLOCK_START] = function () {\n\t            return new PlusBlockStartState();\n\t        };\n\t        sf[ATNState.STAR_BLOCK_START] = function () {\n\t            return new StarBlockStartState();\n\t        };\n\t        sf[ATNState.TOKEN_START] = function () {\n\t            return new TokensStartState();\n\t        };\n\t        sf[ATNState.RULE_STOP] = function () {\n\t            return new RuleStopState();\n\t        };\n\t        sf[ATNState.BLOCK_END] = function () {\n\t            return new BlockEndState();\n\t        };\n\t        sf[ATNState.STAR_LOOP_BACK] = function () {\n\t            return new StarLoopbackState();\n\t        };\n\t        sf[ATNState.STAR_LOOP_ENTRY] = function () {\n\t            return new StarLoopEntryState();\n\t        };\n\t        sf[ATNState.PLUS_LOOP_BACK] = function () {\n\t            return new PlusLoopbackState();\n\t        };\n\t        sf[ATNState.LOOP_END] = function () {\n\t            return new LoopEndState();\n\t        };\n\t        this.stateFactories = sf;\n\t    }\n\t    if (type > this.stateFactories.length || this.stateFactories[type] === null) {\n\t        throw \"The specified state type \" + type + \" is not valid.\";\n\t    } else {\n\t        var s = this.stateFactories[type]();\n\t        if (s !== null) {\n\t            s.ruleIndex = ruleIndex;\n\t            return s;\n\t        }\n\t    }\n\t};\n\n\tATNDeserializer.prototype.lexerActionFactory = function (type, data1, data2) {\n\t    if (this.actionFactories === null) {\n\t        var af = [];\n\t        af[LexerActionType.CHANNEL] = function (data1, data2) {\n\t            return new LexerChannelAction(data1);\n\t        };\n\t        af[LexerActionType.CUSTOM] = function (data1, data2) {\n\t            return new LexerCustomAction(data1, data2);\n\t        };\n\t        af[LexerActionType.MODE] = function (data1, data2) {\n\t            return new LexerModeAction(data1);\n\t        };\n\t        af[LexerActionType.MORE] = function (data1, data2) {\n\t            return LexerMoreAction.INSTANCE;\n\t        };\n\t        af[LexerActionType.POP_MODE] = function (data1, data2) {\n\t            return LexerPopModeAction.INSTANCE;\n\t        };\n\t        af[LexerActionType.PUSH_MODE] = function (data1, data2) {\n\t            return new LexerPushModeAction(data1);\n\t        };\n\t        af[LexerActionType.SKIP] = function (data1, data2) {\n\t            return LexerSkipAction.INSTANCE;\n\t        };\n\t        af[LexerActionType.TYPE] = function (data1, data2) {\n\t            return new LexerTypeAction(data1);\n\t        };\n\t        this.actionFactories = af;\n\t    }\n\t    if (type > this.actionFactories.length || this.actionFactories[type] === null) {\n\t        throw \"The specified lexer action type \" + type + \" is not valid.\";\n\t    } else {\n\t        return this.actionFactories[type](data1, data2);\n\t    }\n\t};\n\n\texports.ATNDeserializer = ATNDeserializer;\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t///\n\n\t// Represents the type of recognizer an ATN applies to.\n\n\tfunction ATNType() {}\n\n\tATNType.LEXER = 0;\n\tATNType.PARSER = 1;\n\n\texports.ATNType = ATNType;\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\n\tfunction ATNDeserializationOptions(copyFrom) {\n\t  if (copyFrom === undefined) {\n\t    copyFrom = null;\n\t  }\n\t  this.readOnly = false;\n\t  this.verifyATN = copyFrom === null ? true : copyFrom.verifyATN;\n\t  this.generateRuleBypassTransitions = copyFrom === null ? false : copyFrom.generateRuleBypassTransitions;\n\n\t  return this;\n\t}\n\n\tATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();\n\tATNDeserializationOptions.defaultOptions.readOnly = true;\n\n\t//    def __setattr__(self, key, value):\n\t//        if key!=\"readOnly\" and self.readOnly:\n\t//            raise Exception(\"The object is read only.\")\n\t//        super(type(self), self).__setattr__(key,value)\n\n\texports.ATNDeserializationOptions = ATNDeserializationOptions;\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\n\t//\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t//\n\n\tfunction LexerActionType() {}\n\n\tLexerActionType.CHANNEL = 0; //The type of a {@link LexerChannelAction} action.\n\tLexerActionType.CUSTOM = 1; //The type of a {@link LexerCustomAction} action.\n\tLexerActionType.MODE = 2; //The type of a {@link LexerModeAction} action.\n\tLexerActionType.MORE = 3; //The type of a {@link LexerMoreAction} action.\n\tLexerActionType.POP_MODE = 4; //The type of a {@link LexerPopModeAction} action.\n\tLexerActionType.PUSH_MODE = 5; //The type of a {@link LexerPushModeAction} action.\n\tLexerActionType.SKIP = 6; //The type of a {@link LexerSkipAction} action.\n\tLexerActionType.TYPE = 7; //The type of a {@link LexerTypeAction} action.\n\n\tfunction LexerAction(action) {\n\t    this.actionType = action;\n\t    this.isPositionDependent = false;\n\t    return this;\n\t}\n\n\tLexerAction.prototype.hashCode = function () {\n\t    var hash = new Hash();\n\t    this.updateHashCode(hash);\n\t    return hash.finish();\n\t};\n\n\tLexerAction.prototype.updateHashCode = function (hash) {\n\t    hash.update(this.actionType);\n\t};\n\n\tLexerAction.prototype.equals = function (other) {\n\t    return this === other;\n\t};\n\n\t//\n\t// Implements the {@code skip} lexer action by calling {@link Lexer//skip}.\n\t//\n\t// <p>The {@code skip} command does not have any parameters, so this action is\n\t// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\n\tfunction LexerSkipAction() {\n\t    LexerAction.call(this, LexerActionType.SKIP);\n\t    return this;\n\t}\n\n\tLexerSkipAction.prototype = Object.create(LexerAction.prototype);\n\tLexerSkipAction.prototype.constructor = LexerSkipAction;\n\n\t// Provides a singleton instance of this parameterless lexer action.\n\tLexerSkipAction.INSTANCE = new LexerSkipAction();\n\n\tLexerSkipAction.prototype.execute = function (lexer) {\n\t    lexer.skip();\n\t};\n\n\tLexerSkipAction.prototype.toString = function () {\n\t    return \"skip\";\n\t};\n\n\t//  Implements the {@code type} lexer action by calling {@link Lexer//setType}\n\t// with the assigned type.\n\tfunction LexerTypeAction(type) {\n\t    LexerAction.call(this, LexerActionType.TYPE);\n\t    this.type = type;\n\t    return this;\n\t}\n\n\tLexerTypeAction.prototype = Object.create(LexerAction.prototype);\n\tLexerTypeAction.prototype.constructor = LexerTypeAction;\n\n\tLexerTypeAction.prototype.execute = function (lexer) {\n\t    lexer.type = this.type;\n\t};\n\n\tLexerTypeAction.prototype.updateHashCode = function (hash) {\n\t    hash.update(this.actionType, this.type);\n\t};\n\n\tLexerTypeAction.prototype.equals = function (other) {\n\t    if (this === other) {\n\t        return true;\n\t    } else if (!(other instanceof LexerTypeAction)) {\n\t        return false;\n\t    } else {\n\t        return this.type === other.type;\n\t    }\n\t};\n\n\tLexerTypeAction.prototype.toString = function () {\n\t    return \"type(\" + this.type + \")\";\n\t};\n\n\t// Implements the {@code pushMode} lexer action by calling\n\t// {@link Lexer//pushMode} with the assigned mode.\n\tfunction LexerPushModeAction(mode) {\n\t    LexerAction.call(this, LexerActionType.PUSH_MODE);\n\t    this.mode = mode;\n\t    return this;\n\t}\n\n\tLexerPushModeAction.prototype = Object.create(LexerAction.prototype);\n\tLexerPushModeAction.prototype.constructor = LexerPushModeAction;\n\n\t// <p>This action is implemented by calling {@link Lexer//pushMode} with the\n\t// value provided by {@link //getMode}.</p>\n\tLexerPushModeAction.prototype.execute = function (lexer) {\n\t    lexer.pushMode(this.mode);\n\t};\n\n\tLexerPushModeAction.prototype.updateHashCode = function (hash) {\n\t    hash.update(this.actionType, this.mode);\n\t};\n\n\tLexerPushModeAction.prototype.equals = function (other) {\n\t    if (this === other) {\n\t        return true;\n\t    } else if (!(other instanceof LexerPushModeAction)) {\n\t        return false;\n\t    } else {\n\t        return this.mode === other.mode;\n\t    }\n\t};\n\n\tLexerPushModeAction.prototype.toString = function () {\n\t    return \"pushMode(\" + this.mode + \")\";\n\t};\n\n\t// Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.\n\t//\n\t// <p>The {@code popMode} command does not have any parameters, so this action is\n\t// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\n\tfunction LexerPopModeAction() {\n\t    LexerAction.call(this, LexerActionType.POP_MODE);\n\t    return this;\n\t}\n\n\tLexerPopModeAction.prototype = Object.create(LexerAction.prototype);\n\tLexerPopModeAction.prototype.constructor = LexerPopModeAction;\n\n\tLexerPopModeAction.INSTANCE = new LexerPopModeAction();\n\n\t// <p>This action is implemented by calling {@link Lexer//popMode}.</p>\n\tLexerPopModeAction.prototype.execute = function (lexer) {\n\t    lexer.popMode();\n\t};\n\n\tLexerPopModeAction.prototype.toString = function () {\n\t    return \"popMode\";\n\t};\n\n\t// Implements the {@code more} lexer action by calling {@link Lexer//more}.\n\t//\n\t// <p>The {@code more} command does not have any parameters, so this action is\n\t// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\n\tfunction LexerMoreAction() {\n\t    LexerAction.call(this, LexerActionType.MORE);\n\t    return this;\n\t}\n\n\tLexerMoreAction.prototype = Object.create(LexerAction.prototype);\n\tLexerMoreAction.prototype.constructor = LexerMoreAction;\n\n\tLexerMoreAction.INSTANCE = new LexerMoreAction();\n\n\t// <p>This action is implemented by calling {@link Lexer//popMode}.</p>\n\tLexerMoreAction.prototype.execute = function (lexer) {\n\t    lexer.more();\n\t};\n\n\tLexerMoreAction.prototype.toString = function () {\n\t    return \"more\";\n\t};\n\n\t// Implements the {@code mode} lexer action by calling {@link Lexer//mode} with\n\t// the assigned mode.\n\tfunction LexerModeAction(mode) {\n\t    LexerAction.call(this, LexerActionType.MODE);\n\t    this.mode = mode;\n\t    return this;\n\t}\n\n\tLexerModeAction.prototype = Object.create(LexerAction.prototype);\n\tLexerModeAction.prototype.constructor = LexerModeAction;\n\n\t// <p>This action is implemented by calling {@link Lexer//mode} with the\n\t// value provided by {@link //getMode}.</p>\n\tLexerModeAction.prototype.execute = function (lexer) {\n\t    lexer.mode(this.mode);\n\t};\n\n\tLexerModeAction.prototype.updateHashCode = function (hash) {\n\t    hash.update(this.actionType, this.mode);\n\t};\n\n\tLexerModeAction.prototype.equals = function (other) {\n\t    if (this === other) {\n\t        return true;\n\t    } else if (!(other instanceof LexerModeAction)) {\n\t        return false;\n\t    } else {\n\t        return this.mode === other.mode;\n\t    }\n\t};\n\n\tLexerModeAction.prototype.toString = function () {\n\t    return \"mode(\" + this.mode + \")\";\n\t};\n\n\t// Executes a custom lexer action by calling {@link Recognizer//action} with the\n\t// rule and action indexes assigned to the custom action. The implementation of\n\t// a custom action is added to the generated code for the lexer in an override\n\t// of {@link Recognizer//action} when the grammar is compiled.\n\t//\n\t// <p>This class may represent embedded actions created with the <code>{...}</code>\n\t// syntax in ANTLR 4, as well as actions created for lexer commands where the\n\t// command argument could not be evaluated when the grammar was compiled.</p>\n\n\n\t// Constructs a custom lexer action with the specified rule and action\n\t// indexes.\n\t//\n\t// @param ruleIndex The rule index to use for calls to\n\t// {@link Recognizer//action}.\n\t// @param actionIndex The action index to use for calls to\n\t// {@link Recognizer//action}.\n\n\tfunction LexerCustomAction(ruleIndex, actionIndex) {\n\t    LexerAction.call(this, LexerActionType.CUSTOM);\n\t    this.ruleIndex = ruleIndex;\n\t    this.actionIndex = actionIndex;\n\t    this.isPositionDependent = true;\n\t    return this;\n\t}\n\n\tLexerCustomAction.prototype = Object.create(LexerAction.prototype);\n\tLexerCustomAction.prototype.constructor = LexerCustomAction;\n\n\t// <p>Custom actions are implemented by calling {@link Lexer//action} with the\n\t// appropriate rule and action indexes.</p>\n\tLexerCustomAction.prototype.execute = function (lexer) {\n\t    lexer.action(null, this.ruleIndex, this.actionIndex);\n\t};\n\n\tLexerCustomAction.prototype.updateHashCode = function (hash) {\n\t    hash.update(this.actionType, this.ruleIndex, this.actionIndex);\n\t};\n\n\tLexerCustomAction.prototype.equals = function (other) {\n\t    if (this === other) {\n\t        return true;\n\t    } else if (!(other instanceof LexerCustomAction)) {\n\t        return false;\n\t    } else {\n\t        return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;\n\t    }\n\t};\n\n\t// Implements the {@code channel} lexer action by calling\n\t// {@link Lexer//setChannel} with the assigned channel.\n\t// Constructs a new {@code channel} action with the specified channel value.\n\t// @param channel The channel value to pass to {@link Lexer//setChannel}.\n\tfunction LexerChannelAction(channel) {\n\t    LexerAction.call(this, LexerActionType.CHANNEL);\n\t    this.channel = channel;\n\t    return this;\n\t}\n\n\tLexerChannelAction.prototype = Object.create(LexerAction.prototype);\n\tLexerChannelAction.prototype.constructor = LexerChannelAction;\n\n\t// <p>This action is implemented by calling {@link Lexer//setChannel} with the\n\t// value provided by {@link //getChannel}.</p>\n\tLexerChannelAction.prototype.execute = function (lexer) {\n\t    lexer._channel = this.channel;\n\t};\n\n\tLexerChannelAction.prototype.updateHashCode = function (hash) {\n\t    hash.update(this.actionType, this.channel);\n\t};\n\n\tLexerChannelAction.prototype.equals = function (other) {\n\t    if (this === other) {\n\t        return true;\n\t    } else if (!(other instanceof LexerChannelAction)) {\n\t        return false;\n\t    } else {\n\t        return this.channel === other.channel;\n\t    }\n\t};\n\n\tLexerChannelAction.prototype.toString = function () {\n\t    return \"channel(\" + this.channel + \")\";\n\t};\n\n\t// This implementation of {@link LexerAction} is used for tracking input offsets\n\t// for position-dependent actions within a {@link LexerActionExecutor}.\n\t//\n\t// <p>This action is not serialized as part of the ATN, and is only required for\n\t// position-dependent lexer actions which appear at a location other than the\n\t// end of a rule. For more information about DFA optimizations employed for\n\t// lexer actions, see {@link LexerActionExecutor//append} and\n\t// {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>\n\n\t// Constructs a new indexed custom action by associating a character offset\n\t// with a {@link LexerAction}.\n\t//\n\t// <p>Note: This class is only required for lexer actions for which\n\t// {@link LexerAction//isPositionDependent} returns {@code true}.</p>\n\t//\n\t// @param offset The offset into the input {@link CharStream}, relative to\n\t// the token start index, at which the specified lexer action should be\n\t// executed.\n\t// @param action The lexer action to execute at a particular offset in the\n\t// input {@link CharStream}.\n\tfunction LexerIndexedCustomAction(offset, action) {\n\t    LexerAction.call(this, action.actionType);\n\t    this.offset = offset;\n\t    this.action = action;\n\t    this.isPositionDependent = true;\n\t    return this;\n\t}\n\n\tLexerIndexedCustomAction.prototype = Object.create(LexerAction.prototype);\n\tLexerIndexedCustomAction.prototype.constructor = LexerIndexedCustomAction;\n\n\t// <p>This method calls {@link //execute} on the result of {@link //getAction}\n\t// using the provided {@code lexer}.</p>\n\tLexerIndexedCustomAction.prototype.execute = function (lexer) {\n\t    // assume the input stream position was properly set by the calling code\n\t    this.action.execute(lexer);\n\t};\n\n\tLexerIndexedCustomAction.prototype.updateHashCode = function (hash) {\n\t    hash.update(this.actionType, this.offset, this.action);\n\t};\n\n\tLexerIndexedCustomAction.prototype.equals = function (other) {\n\t    if (this === other) {\n\t        return true;\n\t    } else if (!(other instanceof LexerIndexedCustomAction)) {\n\t        return false;\n\t    } else {\n\t        return this.offset === other.offset && this.action === other.action;\n\t    }\n\t};\n\n\texports.LexerActionType = LexerActionType;\n\texports.LexerSkipAction = LexerSkipAction;\n\texports.LexerChannelAction = LexerChannelAction;\n\texports.LexerCustomAction = LexerCustomAction;\n\texports.LexerIndexedCustomAction = LexerIndexedCustomAction;\n\texports.LexerMoreAction = LexerMoreAction;\n\texports.LexerTypeAction = LexerTypeAction;\n\texports.LexerPushModeAction = LexerPushModeAction;\n\texports.LexerPopModeAction = LexerPopModeAction;\n\texports.LexerModeAction = LexerModeAction;\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t///\n\n\t// When we hit an accept state in either the DFA or the ATN, we\n\t//  have to notify the character stream to start buffering characters\n\t//  via {@link IntStream//mark} and record the current state. The current sim state\n\t//  includes the current index into the input, the current line,\n\t//  and current character position in that line. Note that the Lexer is\n\t//  tracking the starting line and characterization of the token. These\n\t//  variables track the \"state\" of the simulator when it hits an accept state.\n\t//\n\t//  <p>We track these variables separately for the DFA and ATN simulation\n\t//  because the DFA simulation often has to fail over to the ATN\n\t//  simulation. If the ATN simulation fails, we need the DFA to fall\n\t//  back to its previously accepted state, if any. If the ATN succeeds,\n\t//  then the ATN does the accept and the DFA simulator that invoked it\n\t//  can simply return the predicted token type.</p>\n\t///\n\n\tvar Token = __webpack_require__(6).Token;\n\tvar Lexer = __webpack_require__(22).Lexer;\n\tvar ATN = __webpack_require__(3).ATN;\n\tvar ATNSimulator = __webpack_require__(27).ATNSimulator;\n\tvar DFAState = __webpack_require__(28).DFAState;\n\tvar ATNConfigSet = __webpack_require__(29).ATNConfigSet;\n\tvar OrderedATNConfigSet = __webpack_require__(29).OrderedATNConfigSet;\n\tvar PredictionContext = __webpack_require__(12).PredictionContext;\n\tvar SingletonPredictionContext = __webpack_require__(12).SingletonPredictionContext;\n\tvar RuleStopState = __webpack_require__(8).RuleStopState;\n\tvar LexerATNConfig = __webpack_require__(7).LexerATNConfig;\n\tvar Transition = __webpack_require__(11).Transition;\n\tvar LexerActionExecutor = __webpack_require__(30).LexerActionExecutor;\n\tvar LexerNoViableAltException = __webpack_require__(26).LexerNoViableAltException;\n\n\tfunction resetSimState(sim) {\n\t\tsim.index = -1;\n\t\tsim.line = 0;\n\t\tsim.column = -1;\n\t\tsim.dfaState = null;\n\t}\n\n\tfunction SimState() {\n\t\tresetSimState(this);\n\t\treturn this;\n\t}\n\n\tSimState.prototype.reset = function () {\n\t\tresetSimState(this);\n\t};\n\n\tfunction LexerATNSimulator(recog, atn, decisionToDFA, sharedContextCache) {\n\t\tATNSimulator.call(this, atn, sharedContextCache);\n\t\tthis.decisionToDFA = decisionToDFA;\n\t\tthis.recog = recog;\n\t\t// The current token's starting index into the character stream.\n\t\t// Shared across DFA to ATN simulation in case the ATN fails and the\n\t\t// DFA did not have a previous accept state. In this case, we use the\n\t\t// ATN-generated exception object.\n\t\tthis.startIndex = -1;\n\t\t// line number 1..n within the input///\n\t\tthis.line = 1;\n\t\t// The index of the character relative to the beginning of the line\n\t\t// 0..n-1///\n\t\tthis.column = 0;\n\t\tthis.mode = Lexer.DEFAULT_MODE;\n\t\t// Used during DFA/ATN exec to record the most recent accept configuration\n\t\t// info\n\t\tthis.prevAccept = new SimState();\n\t\t// done\n\t\treturn this;\n\t}\n\n\tLexerATNSimulator.prototype = Object.create(ATNSimulator.prototype);\n\tLexerATNSimulator.prototype.constructor = LexerATNSimulator;\n\n\tLexerATNSimulator.debug = false;\n\tLexerATNSimulator.dfa_debug = false;\n\n\tLexerATNSimulator.MIN_DFA_EDGE = 0;\n\tLexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN\n\n\tLexerATNSimulator.match_calls = 0;\n\n\tLexerATNSimulator.prototype.copyState = function (simulator) {\n\t\tthis.column = simulator.column;\n\t\tthis.line = simulator.line;\n\t\tthis.mode = simulator.mode;\n\t\tthis.startIndex = simulator.startIndex;\n\t};\n\n\tLexerATNSimulator.prototype.match = function (input, mode) {\n\t\tthis.match_calls += 1;\n\t\tthis.mode = mode;\n\t\tvar mark = input.mark();\n\t\ttry {\n\t\t\tthis.startIndex = input.index;\n\t\t\tthis.prevAccept.reset();\n\t\t\tvar dfa = this.decisionToDFA[mode];\n\t\t\tif (dfa.s0 === null) {\n\t\t\t\treturn this.matchATN(input);\n\t\t\t} else {\n\t\t\t\treturn this.execATN(input, dfa.s0);\n\t\t\t}\n\t\t} finally {\n\t\t\tinput.release(mark);\n\t\t}\n\t};\n\n\tLexerATNSimulator.prototype.reset = function () {\n\t\tthis.prevAccept.reset();\n\t\tthis.startIndex = -1;\n\t\tthis.line = 1;\n\t\tthis.column = 0;\n\t\tthis.mode = Lexer.DEFAULT_MODE;\n\t};\n\n\tLexerATNSimulator.prototype.matchATN = function (input) {\n\t\tvar startState = this.atn.modeToStartState[this.mode];\n\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"matchATN mode \" + this.mode + \" start: \" + startState);\n\t\t}\n\t\tvar old_mode = this.mode;\n\t\tvar s0_closure = this.computeStartState(input, startState);\n\t\tvar suppressEdge = s0_closure.hasSemanticContext;\n\t\ts0_closure.hasSemanticContext = false;\n\n\t\tvar next = this.addDFAState(s0_closure);\n\t\tif (!suppressEdge) {\n\t\t\tthis.decisionToDFA[this.mode].s0 = next;\n\t\t}\n\n\t\tvar predict = this.execATN(input, next);\n\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"DFA after matchATN: \" + this.decisionToDFA[old_mode].toLexerString());\n\t\t}\n\t\treturn predict;\n\t};\n\n\tLexerATNSimulator.prototype.execATN = function (input, ds0) {\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"start state closure=\" + ds0.configs);\n\t\t}\n\t\tif (ds0.isAcceptState) {\n\t\t\t// allow zero-length tokens\n\t\t\tthis.captureSimState(this.prevAccept, input, ds0);\n\t\t}\n\t\tvar t = input.LA(1);\n\t\tvar s = ds0; // s is current/from DFA state\n\n\t\twhile (true) {\n\t\t\t// while more work\n\t\t\tif (LexerATNSimulator.debug) {\n\t\t\t\tconsole.log(\"execATN loop starting closure: \" + s.configs);\n\t\t\t}\n\n\t\t\t// As we move src->trg, src->trg, we keep track of the previous trg to\n\t\t\t// avoid looking up the DFA state again, which is expensive.\n\t\t\t// If the previous target was already part of the DFA, we might\n\t\t\t// be able to avoid doing a reach operation upon t. If s!=null,\n\t\t\t// it means that semantic predicates didn't prevent us from\n\t\t\t// creating a DFA state. Once we know s!=null, we check to see if\n\t\t\t// the DFA state has an edge already for t. If so, we can just reuse\n\t\t\t// it's configuration set; there's no point in re-computing it.\n\t\t\t// This is kind of like doing DFA simulation within the ATN\n\t\t\t// simulation because DFA simulation is really just a way to avoid\n\t\t\t// computing reach/closure sets. Technically, once we know that\n\t\t\t// we have a previously added DFA state, we could jump over to\n\t\t\t// the DFA simulator. But, that would mean popping back and forth\n\t\t\t// a lot and making things more complicated algorithmically.\n\t\t\t// This optimization makes a lot of sense for loops within DFA.\n\t\t\t// A character will take us back to an existing DFA state\n\t\t\t// that already has lots of edges out of it. e.g., .* in comments.\n\t\t\t// print(\"Target for:\" + str(s) + \" and:\" + str(t))\n\t\t\tvar target = this.getExistingTargetState(s, t);\n\t\t\t// print(\"Existing:\" + str(target))\n\t\t\tif (target === null) {\n\t\t\t\ttarget = this.computeTargetState(input, s, t);\n\t\t\t\t// print(\"Computed:\" + str(target))\n\t\t\t}\n\t\t\tif (target === ATNSimulator.ERROR) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// If this is a consumable input element, make sure to consume before\n\t\t\t// capturing the accept state so the input index, line, and char\n\t\t\t// position accurately reflect the state of the interpreter at the\n\t\t\t// end of the token.\n\t\t\tif (t !== Token.EOF) {\n\t\t\t\tthis.consume(input);\n\t\t\t}\n\t\t\tif (target.isAcceptState) {\n\t\t\t\tthis.captureSimState(this.prevAccept, input, target);\n\t\t\t\tif (t === Token.EOF) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tt = input.LA(1);\n\t\t\ts = target; // flip; current DFA target becomes new src/from state\n\t\t}\n\t\treturn this.failOrAccept(this.prevAccept, input, s.configs, t);\n\t};\n\n\t// Get an existing target state for an edge in the DFA. If the target state\n\t// for the edge has not yet been computed or is otherwise not available,\n\t// this method returns {@code null}.\n\t//\n\t// @param s The current DFA state\n\t// @param t The next input symbol\n\t// @return The existing target DFA state for the given input symbol\n\t// {@code t}, or {@code null} if the target state for this edge is not\n\t// already cached\n\tLexerATNSimulator.prototype.getExistingTargetState = function (s, t) {\n\t\tif (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];\n\t\tif (target === undefined) {\n\t\t\ttarget = null;\n\t\t}\n\t\tif (LexerATNSimulator.debug && target !== null) {\n\t\t\tconsole.log(\"reuse state \" + s.stateNumber + \" edge to \" + target.stateNumber);\n\t\t}\n\t\treturn target;\n\t};\n\n\t// Compute a target state for an edge in the DFA, and attempt to add the\n\t// computed state and corresponding edge to the DFA.\n\t//\n\t// @param input The input stream\n\t// @param s The current DFA state\n\t// @param t The next input symbol\n\t//\n\t// @return The computed target DFA state for the given input symbol\n\t// {@code t}. If {@code t} does not lead to a valid DFA state, this method\n\t// returns {@link //ERROR}.\n\tLexerATNSimulator.prototype.computeTargetState = function (input, s, t) {\n\t\tvar reach = new OrderedATNConfigSet();\n\t\t// if we don't find an existing DFA state\n\t\t// Fill reach starting from closure, following t transitions\n\t\tthis.getReachableConfigSet(input, s.configs, reach, t);\n\n\t\tif (reach.items.length === 0) {\n\t\t\t// we got nowhere on t from s\n\t\t\tif (!reach.hasSemanticContext) {\n\t\t\t\t// we got nowhere on t, don't throw out this knowledge; it'd\n\t\t\t\t// cause a failover from DFA later.\n\t\t\t\tthis.addDFAEdge(s, t, ATNSimulator.ERROR);\n\t\t\t}\n\t\t\t// stop when we can't match any more char\n\t\t\treturn ATNSimulator.ERROR;\n\t\t}\n\t\t// Add an edge from s to target DFA found/created for reach\n\t\treturn this.addDFAEdge(s, t, null, reach);\n\t};\n\n\tLexerATNSimulator.prototype.failOrAccept = function (prevAccept, input, reach, t) {\n\t\tif (this.prevAccept.dfaState !== null) {\n\t\t\tvar lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;\n\t\t\tthis.accept(input, lexerActionExecutor, this.startIndex, prevAccept.index, prevAccept.line, prevAccept.column);\n\t\t\treturn prevAccept.dfaState.prediction;\n\t\t} else {\n\t\t\t// if no accept and EOF is first char, return EOF\n\t\t\tif (t === Token.EOF && input.index === this.startIndex) {\n\t\t\t\treturn Token.EOF;\n\t\t\t}\n\t\t\tthrow new LexerNoViableAltException(this.recog, input, this.startIndex, reach);\n\t\t}\n\t};\n\n\t// Given a starting configuration set, figure out all ATN configurations\n\t// we can reach upon input {@code t}. Parameter {@code reach} is a return\n\t// parameter.\n\tLexerATNSimulator.prototype.getReachableConfigSet = function (input, closure, reach, t) {\n\t\t// this is used to skip processing for configs which have a lower priority\n\t\t// than a config that already reached an accept state for the same rule\n\t\tvar skipAlt = ATN.INVALID_ALT_NUMBER;\n\t\tfor (var i = 0; i < closure.items.length; i++) {\n\t\t\tvar cfg = closure.items[i];\n\t\t\tvar currentAltReachedAcceptState = cfg.alt === skipAlt;\n\t\t\tif (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (LexerATNSimulator.debug) {\n\t\t\t\tconsole.log(\"testing %s at %s\\n\", this.getTokenName(t), cfg.toString(this.recog, true));\n\t\t\t}\n\t\t\tfor (var j = 0; j < cfg.state.transitions.length; j++) {\n\t\t\t\tvar trans = cfg.state.transitions[j]; // for each transition\n\t\t\t\tvar target = this.getReachableTarget(trans, t);\n\t\t\t\tif (target !== null) {\n\t\t\t\t\tvar lexerActionExecutor = cfg.lexerActionExecutor;\n\t\t\t\t\tif (lexerActionExecutor !== null) {\n\t\t\t\t\t\tlexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);\n\t\t\t\t\t}\n\t\t\t\t\tvar treatEofAsEpsilon = t === Token.EOF;\n\t\t\t\t\tvar config = new LexerATNConfig({ state: target, lexerActionExecutor: lexerActionExecutor }, cfg);\n\t\t\t\t\tif (this.closure(input, config, reach, currentAltReachedAcceptState, true, treatEofAsEpsilon)) {\n\t\t\t\t\t\t// any remaining configs for this alt have a lower priority\n\t\t\t\t\t\t// than the one that just reached an accept state.\n\t\t\t\t\t\tskipAlt = cfg.alt;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tLexerATNSimulator.prototype.accept = function (input, lexerActionExecutor, startIndex, index, line, charPos) {\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"ACTION %s\\n\", lexerActionExecutor);\n\t\t}\n\t\t// seek to after last char in token\n\t\tinput.seek(index);\n\t\tthis.line = line;\n\t\tthis.column = charPos;\n\t\tif (lexerActionExecutor !== null && this.recog !== null) {\n\t\t\tlexerActionExecutor.execute(this.recog, input, startIndex);\n\t\t}\n\t};\n\n\tLexerATNSimulator.prototype.getReachableTarget = function (trans, t) {\n\t\tif (trans.matches(t, 0, Lexer.MAX_CHAR_VALUE)) {\n\t\t\treturn trans.target;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n\tLexerATNSimulator.prototype.computeStartState = function (input, p) {\n\t\tvar initialContext = PredictionContext.EMPTY;\n\t\tvar configs = new OrderedATNConfigSet();\n\t\tfor (var i = 0; i < p.transitions.length; i++) {\n\t\t\tvar target = p.transitions[i].target;\n\t\t\tvar cfg = new LexerATNConfig({ state: target, alt: i + 1, context: initialContext }, null);\n\t\t\tthis.closure(input, cfg, configs, false, false, false);\n\t\t}\n\t\treturn configs;\n\t};\n\n\t// Since the alternatives within any lexer decision are ordered by\n\t// preference, this method stops pursuing the closure as soon as an accept\n\t// state is reached. After the first accept state is reached by depth-first\n\t// search from {@code config}, all other (potentially reachable) states for\n\t// this rule would have a lower priority.\n\t//\n\t// @return {@code true} if an accept state is reached, otherwise\n\t// {@code false}.\n\tLexerATNSimulator.prototype.closure = function (input, config, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {\n\t\tvar cfg = null;\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"closure(\" + config.toString(this.recog, true) + \")\");\n\t\t}\n\t\tif (config.state instanceof RuleStopState) {\n\t\t\tif (LexerATNSimulator.debug) {\n\t\t\t\tif (this.recog !== null) {\n\t\t\t\t\tconsole.log(\"closure at %s rule stop %s\\n\", this.recog.ruleNames[config.state.ruleIndex], config);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"closure at rule stop %s\\n\", config);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (config.context === null || config.context.hasEmptyPath()) {\n\t\t\t\tif (config.context === null || config.context.isEmpty()) {\n\t\t\t\t\tconfigs.add(config);\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tconfigs.add(new LexerATNConfig({ state: config.state, context: PredictionContext.EMPTY }, config));\n\t\t\t\t\tcurrentAltReachedAcceptState = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (config.context !== null && !config.context.isEmpty()) {\n\t\t\t\tfor (var i = 0; i < config.context.length; i++) {\n\t\t\t\t\tif (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {\n\t\t\t\t\t\tvar newContext = config.context.getParent(i); // \"pop\" return state\n\t\t\t\t\t\tvar returnState = this.atn.states[config.context.getReturnState(i)];\n\t\t\t\t\t\tcfg = new LexerATNConfig({ state: returnState, context: newContext }, config);\n\t\t\t\t\t\tcurrentAltReachedAcceptState = this.closure(input, cfg, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn currentAltReachedAcceptState;\n\t\t}\n\t\t// optimization\n\t\tif (!config.state.epsilonOnlyTransitions) {\n\t\t\tif (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {\n\t\t\t\tconfigs.add(config);\n\t\t\t}\n\t\t}\n\t\tfor (var j = 0; j < config.state.transitions.length; j++) {\n\t\t\tvar trans = config.state.transitions[j];\n\t\t\tcfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);\n\t\t\tif (cfg !== null) {\n\t\t\t\tcurrentAltReachedAcceptState = this.closure(input, cfg, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);\n\t\t\t}\n\t\t}\n\t\treturn currentAltReachedAcceptState;\n\t};\n\n\t// side-effect: can alter configs.hasSemanticContext\n\tLexerATNSimulator.prototype.getEpsilonTarget = function (input, config, trans, configs, speculative, treatEofAsEpsilon) {\n\t\tvar cfg = null;\n\t\tif (trans.serializationType === Transition.RULE) {\n\t\t\tvar newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);\n\t\t\tcfg = new LexerATNConfig({ state: trans.target, context: newContext }, config);\n\t\t} else if (trans.serializationType === Transition.PRECEDENCE) {\n\t\t\tthrow \"Precedence predicates are not supported in lexers.\";\n\t\t} else if (trans.serializationType === Transition.PREDICATE) {\n\t\t\t// Track traversing semantic predicates. If we traverse,\n\t\t\t// we cannot add a DFA state for this \"reach\" computation\n\t\t\t// because the DFA would not test the predicate again in the\n\t\t\t// future. Rather than creating collections of semantic predicates\n\t\t\t// like v3 and testing them on prediction, v4 will test them on the\n\t\t\t// fly all the time using the ATN not the DFA. This is slower but\n\t\t\t// semantically it's not used that often. One of the key elements to\n\t\t\t// this predicate mechanism is not adding DFA states that see\n\t\t\t// predicates immediately afterwards in the ATN. For example,\n\n\t\t\t// a : ID {p1}? | ID {p2}? ;\n\n\t\t\t// should create the start state for rule 'a' (to save start state\n\t\t\t// competition), but should not create target of ID state. The\n\t\t\t// collection of ATN states the following ID references includes\n\t\t\t// states reached by traversing predicates. Since this is when we\n\t\t\t// test them, we cannot cash the DFA state target of ID.\n\n\t\t\tif (LexerATNSimulator.debug) {\n\t\t\t\tconsole.log(\"EVAL rule \" + trans.ruleIndex + \":\" + trans.predIndex);\n\t\t\t}\n\t\t\tconfigs.hasSemanticContext = true;\n\t\t\tif (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {\n\t\t\t\tcfg = new LexerATNConfig({ state: trans.target }, config);\n\t\t\t}\n\t\t} else if (trans.serializationType === Transition.ACTION) {\n\t\t\tif (config.context === null || config.context.hasEmptyPath()) {\n\t\t\t\t// execute actions anywhere in the start rule for a token.\n\t\t\t\t//\n\t\t\t\t// TODO: if the entry rule is invoked recursively, some\n\t\t\t\t// actions may be executed during the recursive call. The\n\t\t\t\t// problem can appear when hasEmptyPath() is true but\n\t\t\t\t// isEmpty() is false. In this case, the config needs to be\n\t\t\t\t// split into two contexts - one with just the empty path\n\t\t\t\t// and another with everything but the empty path.\n\t\t\t\t// Unfortunately, the current algorithm does not allow\n\t\t\t\t// getEpsilonTarget to return two configurations, so\n\t\t\t\t// additional modifications are needed before we can support\n\t\t\t\t// the split operation.\n\t\t\t\tvar lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor, this.atn.lexerActions[trans.actionIndex]);\n\t\t\t\tcfg = new LexerATNConfig({ state: trans.target, lexerActionExecutor: lexerActionExecutor }, config);\n\t\t\t} else {\n\t\t\t\t// ignore actions in referenced rules\n\t\t\t\tcfg = new LexerATNConfig({ state: trans.target }, config);\n\t\t\t}\n\t\t} else if (trans.serializationType === Transition.EPSILON) {\n\t\t\tcfg = new LexerATNConfig({ state: trans.target }, config);\n\t\t} else if (trans.serializationType === Transition.ATOM || trans.serializationType === Transition.RANGE || trans.serializationType === Transition.SET) {\n\t\t\tif (treatEofAsEpsilon) {\n\t\t\t\tif (trans.matches(Token.EOF, 0, Lexer.MAX_CHAR_VALUE)) {\n\t\t\t\t\tcfg = new LexerATNConfig({ state: trans.target }, config);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cfg;\n\t};\n\n\t// Evaluate a predicate specified in the lexer.\n\t//\n\t// <p>If {@code speculative} is {@code true}, this method was called before\n\t// {@link //consume} for the matched character. This method should call\n\t// {@link //consume} before evaluating the predicate to ensure position\n\t// sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},\n\t// and {@link Lexer//getcolumn}, properly reflect the current\n\t// lexer state. This method should restore {@code input} and the simulator\n\t// to the original state before returning (i.e. undo the actions made by the\n\t// call to {@link //consume}.</p>\n\t//\n\t// @param input The input stream.\n\t// @param ruleIndex The rule containing the predicate.\n\t// @param predIndex The index of the predicate within the rule.\n\t// @param speculative {@code true} if the current index in {@code input} is\n\t// one character before the predicate's location.\n\t//\n\t// @return {@code true} if the specified predicate evaluates to\n\t// {@code true}.\n\t// /\n\tLexerATNSimulator.prototype.evaluatePredicate = function (input, ruleIndex, predIndex, speculative) {\n\t\t// assume true if no recognizer was provided\n\t\tif (this.recog === null) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!speculative) {\n\t\t\treturn this.recog.sempred(null, ruleIndex, predIndex);\n\t\t}\n\t\tvar savedcolumn = this.column;\n\t\tvar savedLine = this.line;\n\t\tvar index = input.index;\n\t\tvar marker = input.mark();\n\t\ttry {\n\t\t\tthis.consume(input);\n\t\t\treturn this.recog.sempred(null, ruleIndex, predIndex);\n\t\t} finally {\n\t\t\tthis.column = savedcolumn;\n\t\t\tthis.line = savedLine;\n\t\t\tinput.seek(index);\n\t\t\tinput.release(marker);\n\t\t}\n\t};\n\n\tLexerATNSimulator.prototype.captureSimState = function (settings, input, dfaState) {\n\t\tsettings.index = input.index;\n\t\tsettings.line = this.line;\n\t\tsettings.column = this.column;\n\t\tsettings.dfaState = dfaState;\n\t};\n\n\tLexerATNSimulator.prototype.addDFAEdge = function (from_, tk, to, cfgs) {\n\t\tif (to === undefined) {\n\t\t\tto = null;\n\t\t}\n\t\tif (cfgs === undefined) {\n\t\t\tcfgs = null;\n\t\t}\n\t\tif (to === null && cfgs !== null) {\n\t\t\t// leading to this call, ATNConfigSet.hasSemanticContext is used as a\n\t\t\t// marker indicating dynamic predicate evaluation makes this edge\n\t\t\t// dependent on the specific input sequence, so the static edge in the\n\t\t\t// DFA should be omitted. The target DFAState is still created since\n\t\t\t// execATN has the ability to resynchronize with the DFA state cache\n\t\t\t// following the predicate evaluation step.\n\t\t\t//\n\t\t\t// TJP notes: next time through the DFA, we see a pred again and eval.\n\t\t\t// If that gets us to a previously created (but dangling) DFA\n\t\t\t// state, we can continue in pure DFA mode from there.\n\t\t\t// /\n\t\t\tvar suppressEdge = cfgs.hasSemanticContext;\n\t\t\tcfgs.hasSemanticContext = false;\n\n\t\t\tto = this.addDFAState(cfgs);\n\n\t\t\tif (suppressEdge) {\n\t\t\t\treturn to;\n\t\t\t}\n\t\t}\n\t\t// add the edge\n\t\tif (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {\n\t\t\t// Only track edges within the DFA bounds\n\t\t\treturn to;\n\t\t}\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"EDGE \" + from_ + \" -> \" + to + \" upon \" + tk);\n\t\t}\n\t\tif (from_.edges === null) {\n\t\t\t// make room for tokens 1..n and -1 masquerading as index 0\n\t\t\tfrom_.edges = [];\n\t\t}\n\t\tfrom_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect\n\n\t\treturn to;\n\t};\n\n\t// Add a new DFA state if there isn't one with this set of\n\t// configurations already. This method also detects the first\n\t// configuration containing an ATN rule stop state. Later, when\n\t// traversing the DFA, we will know which rule to accept.\n\tLexerATNSimulator.prototype.addDFAState = function (configs) {\n\t\tvar proposed = new DFAState(null, configs);\n\t\tvar firstConfigWithRuleStopState = null;\n\t\tfor (var i = 0; i < configs.items.length; i++) {\n\t\t\tvar cfg = configs.items[i];\n\t\t\tif (cfg.state instanceof RuleStopState) {\n\t\t\t\tfirstConfigWithRuleStopState = cfg;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (firstConfigWithRuleStopState !== null) {\n\t\t\tproposed.isAcceptState = true;\n\t\t\tproposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;\n\t\t\tproposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];\n\t\t}\n\t\tvar dfa = this.decisionToDFA[this.mode];\n\t\tvar existing = dfa.states.get(proposed);\n\t\tif (existing !== null) {\n\t\t\treturn existing;\n\t\t}\n\t\tvar newState = proposed;\n\t\tnewState.stateNumber = dfa.states.length;\n\t\tconfigs.setReadonly(true);\n\t\tnewState.configs = configs;\n\t\tdfa.states.add(newState);\n\t\treturn newState;\n\t};\n\n\tLexerATNSimulator.prototype.getDFA = function (mode) {\n\t\treturn this.decisionToDFA[mode];\n\t};\n\n\t// Get the text matched so far for the current token.\n\tLexerATNSimulator.prototype.getText = function (input) {\n\t\t// index is first lookahead char, don't include.\n\t\treturn input.getText(this.startIndex, input.index - 1);\n\t};\n\n\tLexerATNSimulator.prototype.consume = function (input) {\n\t\tvar curChar = input.LA(1);\n\t\tif (curChar === \"\\n\".charCodeAt(0)) {\n\t\t\tthis.line += 1;\n\t\t\tthis.column = 0;\n\t\t} else {\n\t\t\tthis.column += 1;\n\t\t}\n\t\tinput.consume();\n\t};\n\n\tLexerATNSimulator.prototype.getTokenName = function (tt) {\n\t\tif (tt === -1) {\n\t\t\treturn \"EOF\";\n\t\t} else {\n\t\t\treturn \"'\" + String.fromCharCode(tt) + \"'\";\n\t\t}\n\t};\n\n\texports.LexerATNSimulator = LexerATNSimulator;\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t///\n\n\t// A lexer is recognizer that draws input symbols from a character stream.\n\t//  lexer grammars result in a subclass of this object. A Lexer object\n\t//  uses simplified match() and error recovery mechanisms in the interest of speed.\n\n\tvar Token = __webpack_require__(6).Token;\n\tvar Recognizer = __webpack_require__(23).Recognizer;\n\tvar CommonTokenFactory = __webpack_require__(25).CommonTokenFactory;\n\tvar RecognitionException = __webpack_require__(26).RecognitionException;\n\tvar LexerNoViableAltException = __webpack_require__(26).LexerNoViableAltException;\n\n\tfunction TokenSource() {\n\t\treturn this;\n\t}\n\n\tfunction Lexer(input) {\n\t\tRecognizer.call(this);\n\t\tthis._input = input;\n\t\tthis._factory = CommonTokenFactory.DEFAULT;\n\t\tthis._tokenFactorySourcePair = [this, input];\n\n\t\tthis._interp = null; // child classes must populate this\n\n\t\t// The goal of all lexer rules/methods is to create a token object.\n\t\t// this is an instance variable as multiple rules may collaborate to\n\t\t// create a single token. nextToken will return this object after\n\t\t// matching lexer rule(s). If you subclass to allow multiple token\n\t\t// emissions, then set this to the last token to be matched or\n\t\t// something nonnull so that the auto token emit mechanism will not\n\t\t// emit another token.\n\t\tthis._token = null;\n\n\t\t// What character index in the stream did the current token start at?\n\t\t// Needed, for example, to get the text for current token. Set at\n\t\t// the start of nextToken.\n\t\tthis._tokenStartCharIndex = -1;\n\n\t\t// The line on which the first character of the token resides///\n\t\tthis._tokenStartLine = -1;\n\n\t\t// The character position of first character within the line///\n\t\tthis._tokenStartColumn = -1;\n\n\t\t// Once we see EOF on char stream, next token will be EOF.\n\t\t// If you have DONE : EOF ; then you see DONE EOF.\n\t\tthis._hitEOF = false;\n\n\t\t// The channel number for the current token///\n\t\tthis._channel = Token.DEFAULT_CHANNEL;\n\n\t\t// The token type for the current token///\n\t\tthis._type = Token.INVALID_TYPE;\n\n\t\tthis._modeStack = [];\n\t\tthis._mode = Lexer.DEFAULT_MODE;\n\n\t\t// You can set the text for the current token to override what is in\n\t\t// the input char buffer. Use setText() or can set this instance var.\n\t\t// /\n\t\tthis._text = null;\n\n\t\treturn this;\n\t}\n\n\tLexer.prototype = Object.create(Recognizer.prototype);\n\tLexer.prototype.constructor = Lexer;\n\n\tLexer.DEFAULT_MODE = 0;\n\tLexer.MORE = -2;\n\tLexer.SKIP = -3;\n\n\tLexer.DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;\n\tLexer.HIDDEN = Token.HIDDEN_CHANNEL;\n\tLexer.MIN_CHAR_VALUE = 0x0000;\n\tLexer.MAX_CHAR_VALUE = 0x10FFFF;\n\n\tLexer.prototype.reset = function () {\n\t\t// wack Lexer state variables\n\t\tif (this._input !== null) {\n\t\t\tthis._input.seek(0); // rewind the input\n\t\t}\n\t\tthis._token = null;\n\t\tthis._type = Token.INVALID_TYPE;\n\t\tthis._channel = Token.DEFAULT_CHANNEL;\n\t\tthis._tokenStartCharIndex = -1;\n\t\tthis._tokenStartColumn = -1;\n\t\tthis._tokenStartLine = -1;\n\t\tthis._text = null;\n\n\t\tthis._hitEOF = false;\n\t\tthis._mode = Lexer.DEFAULT_MODE;\n\t\tthis._modeStack = [];\n\n\t\tthis._interp.reset();\n\t};\n\n\t// Return a token from this source; i.e., match a token on the char stream.\n\tLexer.prototype.nextToken = function () {\n\t\tif (this._input === null) {\n\t\t\tthrow \"nextToken requires a non-null input stream.\";\n\t\t}\n\n\t\t// Mark start location in char stream so unbuffered streams are\n\t\t// guaranteed at least have text of current token\n\t\tvar tokenStartMarker = this._input.mark();\n\t\ttry {\n\t\t\twhile (true) {\n\t\t\t\tif (this._hitEOF) {\n\t\t\t\t\tthis.emitEOF();\n\t\t\t\t\treturn this._token;\n\t\t\t\t}\n\t\t\t\tthis._token = null;\n\t\t\t\tthis._channel = Token.DEFAULT_CHANNEL;\n\t\t\t\tthis._tokenStartCharIndex = this._input.index;\n\t\t\t\tthis._tokenStartColumn = this._interp.column;\n\t\t\t\tthis._tokenStartLine = this._interp.line;\n\t\t\t\tthis._text = null;\n\t\t\t\tvar continueOuter = false;\n\t\t\t\twhile (true) {\n\t\t\t\t\tthis._type = Token.INVALID_TYPE;\n\t\t\t\t\tvar ttype = Lexer.SKIP;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tttype = this._interp.match(this._input, this._mode);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif (e instanceof RecognitionException) {\n\t\t\t\t\t\t\tthis.notifyListeners(e); // report error\n\t\t\t\t\t\t\tthis.recover(e);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log(e.stack);\n\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (this._input.LA(1) === Token.EOF) {\n\t\t\t\t\t\tthis._hitEOF = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (this._type === Token.INVALID_TYPE) {\n\t\t\t\t\t\tthis._type = ttype;\n\t\t\t\t\t}\n\t\t\t\t\tif (this._type === Lexer.SKIP) {\n\t\t\t\t\t\tcontinueOuter = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (this._type !== Lexer.MORE) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (continueOuter) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (this._token === null) {\n\t\t\t\t\tthis.emit();\n\t\t\t\t}\n\t\t\t\treturn this._token;\n\t\t\t}\n\t\t} finally {\n\t\t\t// make sure we release marker after match or\n\t\t\t// unbuffered char stream will keep buffering\n\t\t\tthis._input.release(tokenStartMarker);\n\t\t}\n\t};\n\n\t// Instruct the lexer to skip creating a token for current lexer rule\n\t// and look for another token. nextToken() knows to keep looking when\n\t// a lexer rule finishes with token set to SKIP_TOKEN. Recall that\n\t// if token==null at end of any token rule, it creates one for you\n\t// and emits it.\n\t// /\n\tLexer.prototype.skip = function () {\n\t\tthis._type = Lexer.SKIP;\n\t};\n\n\tLexer.prototype.more = function () {\n\t\tthis._type = Lexer.MORE;\n\t};\n\n\tLexer.prototype.mode = function (m) {\n\t\tthis._mode = m;\n\t};\n\n\tLexer.prototype.pushMode = function (m) {\n\t\tif (this._interp.debug) {\n\t\t\tconsole.log(\"pushMode \" + m);\n\t\t}\n\t\tthis._modeStack.push(this._mode);\n\t\tthis.mode(m);\n\t};\n\n\tLexer.prototype.popMode = function () {\n\t\tif (this._modeStack.length === 0) {\n\t\t\tthrow \"Empty Stack\";\n\t\t}\n\t\tif (this._interp.debug) {\n\t\t\tconsole.log(\"popMode back to \" + this._modeStack.slice(0, -1));\n\t\t}\n\t\tthis.mode(this._modeStack.pop());\n\t\treturn this._mode;\n\t};\n\n\t// Set the char stream and reset the lexer\n\tObject.defineProperty(Lexer.prototype, \"inputStream\", {\n\t\tget: function get() {\n\t\t\treturn this._input;\n\t\t},\n\t\tset: function set(input) {\n\t\t\tthis._input = null;\n\t\t\tthis._tokenFactorySourcePair = [this, this._input];\n\t\t\tthis.reset();\n\t\t\tthis._input = input;\n\t\t\tthis._tokenFactorySourcePair = [this, this._input];\n\t\t}\n\t});\n\n\tObject.defineProperty(Lexer.prototype, \"sourceName\", {\n\t\tget: function sourceName() {\n\t\t\treturn this._input.sourceName;\n\t\t}\n\t});\n\n\t// By default does not support multiple emits per nextToken invocation\n\t// for efficiency reasons. Subclass and override this method, nextToken,\n\t// and getToken (to push tokens into a list and pull from that list\n\t// rather than a single variable as this implementation does).\n\t// /\n\tLexer.prototype.emitToken = function (token) {\n\t\tthis._token = token;\n\t};\n\n\t// The standard method called to automatically emit a token at the\n\t// outermost lexical rule. The token object should point into the\n\t// char buffer start..stop. If there is a text override in 'text',\n\t// use that to set the token's text. Override this method to emit\n\t// custom Token objects or provide a new factory.\n\t// /\n\tLexer.prototype.emit = function () {\n\t\tvar t = this._factory.create(this._tokenFactorySourcePair, this._type, this._text, this._channel, this._tokenStartCharIndex, this.getCharIndex() - 1, this._tokenStartLine, this._tokenStartColumn);\n\t\tthis.emitToken(t);\n\t\treturn t;\n\t};\n\n\tLexer.prototype.emitEOF = function () {\n\t\tvar cpos = this.column;\n\t\tvar lpos = this.line;\n\t\tvar eof = this._factory.create(this._tokenFactorySourcePair, Token.EOF, null, Token.DEFAULT_CHANNEL, this._input.index, this._input.index - 1, lpos, cpos);\n\t\tthis.emitToken(eof);\n\t\treturn eof;\n\t};\n\n\tObject.defineProperty(Lexer.prototype, \"type\", {\n\t\tget: function get() {\n\t\t\treturn this.type;\n\t\t},\n\t\tset: function set(type) {\n\t\t\tthis._type = type;\n\t\t}\n\t});\n\n\tObject.defineProperty(Lexer.prototype, \"line\", {\n\t\tget: function get() {\n\t\t\treturn this._interp.line;\n\t\t},\n\t\tset: function set(line) {\n\t\t\tthis._interp.line = line;\n\t\t}\n\t});\n\n\tObject.defineProperty(Lexer.prototype, \"column\", {\n\t\tget: function get() {\n\t\t\treturn this._interp.column;\n\t\t},\n\t\tset: function set(column) {\n\t\t\tthis._interp.column = column;\n\t\t}\n\t});\n\n\t// What is the index of the current character of lookahead?///\n\tLexer.prototype.getCharIndex = function () {\n\t\treturn this._input.index;\n\t};\n\n\t// Return the text matched so far for the current token or any text override.\n\t//Set the complete text of this token; it wipes any previous changes to the text.\n\tObject.defineProperty(Lexer.prototype, \"text\", {\n\t\tget: function get() {\n\t\t\tif (this._text !== null) {\n\t\t\t\treturn this._text;\n\t\t\t} else {\n\t\t\t\treturn this._interp.getText(this._input);\n\t\t\t}\n\t\t},\n\t\tset: function set(text) {\n\t\t\tthis._text = text;\n\t\t}\n\t});\n\t// Return a list of all Token objects in input char stream.\n\t// Forces load of all tokens. Does not include EOF token.\n\t// /\n\tLexer.prototype.getAllTokens = function () {\n\t\tvar tokens = [];\n\t\tvar t = this.nextToken();\n\t\twhile (t.type !== Token.EOF) {\n\t\t\ttokens.push(t);\n\t\t\tt = this.nextToken();\n\t\t}\n\t\treturn tokens;\n\t};\n\n\tLexer.prototype.notifyListeners = function (e) {\n\t\tvar start = this._tokenStartCharIndex;\n\t\tvar stop = this._input.index;\n\t\tvar text = this._input.getText(start, stop);\n\t\tvar msg = \"token recognition error at: '\" + this.getErrorDisplay(text) + \"'\";\n\t\tvar listener = this.getErrorListenerDispatch();\n\t\tlistener.syntaxError(this, null, this._tokenStartLine, this._tokenStartColumn, msg, e);\n\t};\n\n\tLexer.prototype.getErrorDisplay = function (s) {\n\t\tvar d = [];\n\t\tfor (var i = 0; i < s.length; i++) {\n\t\t\td.push(s[i]);\n\t\t}\n\t\treturn d.join('');\n\t};\n\n\tLexer.prototype.getErrorDisplayForChar = function (c) {\n\t\tif (c.charCodeAt(0) === Token.EOF) {\n\t\t\treturn \"<EOF>\";\n\t\t} else if (c === '\\n') {\n\t\t\treturn \"\\\\n\";\n\t\t} else if (c === '\\t') {\n\t\t\treturn \"\\\\t\";\n\t\t} else if (c === '\\r') {\n\t\t\treturn \"\\\\r\";\n\t\t} else {\n\t\t\treturn c;\n\t\t}\n\t};\n\n\tLexer.prototype.getCharErrorDisplay = function (c) {\n\t\treturn \"'\" + this.getErrorDisplayForChar(c) + \"'\";\n\t};\n\n\t// Lexers can normally match any char in it's vocabulary after matching\n\t// a token, so do the easy thing and just kill a character and hope\n\t// it all works out. You can instead use the rule invocation stack\n\t// to do sophisticated error recovery if you are in a fragment rule.\n\t// /\n\tLexer.prototype.recover = function (re) {\n\t\tif (this._input.LA(1) !== Token.EOF) {\n\t\t\tif (re instanceof LexerNoViableAltException) {\n\t\t\t\t// skip a char and try again\n\t\t\t\tthis._interp.consume(this._input);\n\t\t\t} else {\n\t\t\t\t// TODO: Do we lose character or line position information?\n\t\t\t\tthis._input.consume();\n\t\t\t}\n\t\t}\n\t};\n\n\texports.Lexer = Lexer;\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t//\n\n\tvar Token = __webpack_require__(6).Token;\n\tvar ConsoleErrorListener = __webpack_require__(24).ConsoleErrorListener;\n\tvar ProxyErrorListener = __webpack_require__(24).ProxyErrorListener;\n\n\tfunction Recognizer() {\n\t    this._listeners = [ConsoleErrorListener.INSTANCE];\n\t    this._interp = null;\n\t    this._stateNumber = -1;\n\t    return this;\n\t}\n\n\tRecognizer.tokenTypeMapCache = {};\n\tRecognizer.ruleIndexMapCache = {};\n\n\tRecognizer.prototype.checkVersion = function (toolVersion) {\n\t    var runtimeVersion = \"4.7\";\n\t    if (runtimeVersion !== toolVersion) {\n\t        console.log(\"ANTLR runtime and generated code versions disagree: \" + runtimeVersion + \"!=\" + toolVersion);\n\t    }\n\t};\n\n\tRecognizer.prototype.addErrorListener = function (listener) {\n\t    this._listeners.push(listener);\n\t};\n\n\tRecognizer.prototype.removeErrorListeners = function () {\n\t    this._listeners = [];\n\t};\n\n\tRecognizer.prototype.getTokenTypeMap = function () {\n\t    var tokenNames = this.getTokenNames();\n\t    if (tokenNames === null) {\n\t        throw \"The current recognizer does not provide a list of token names.\";\n\t    }\n\t    var result = this.tokenTypeMapCache[tokenNames];\n\t    if (result === undefined) {\n\t        result = tokenNames.reduce(function (o, k, i) {\n\t            o[k] = i;\n\t        });\n\t        result.EOF = Token.EOF;\n\t        this.tokenTypeMapCache[tokenNames] = result;\n\t    }\n\t    return result;\n\t};\n\n\t// Get a map from rule names to rule indexes.\n\t//\n\t// <p>Used for XPath and tree pattern compilation.</p>\n\t//\n\tRecognizer.prototype.getRuleIndexMap = function () {\n\t    var ruleNames = this.ruleNames;\n\t    if (ruleNames === null) {\n\t        throw \"The current recognizer does not provide a list of rule names.\";\n\t    }\n\t    var result = this.ruleIndexMapCache[ruleNames];\n\t    if (result === undefined) {\n\t        result = ruleNames.reduce(function (o, k, i) {\n\t            o[k] = i;\n\t        });\n\t        this.ruleIndexMapCache[ruleNames] = result;\n\t    }\n\t    return result;\n\t};\n\n\tRecognizer.prototype.getTokenType = function (tokenName) {\n\t    var ttype = this.getTokenTypeMap()[tokenName];\n\t    if (ttype !== undefined) {\n\t        return ttype;\n\t    } else {\n\t        return Token.INVALID_TYPE;\n\t    }\n\t};\n\n\t// What is the error header, normally line/character position information?//\n\tRecognizer.prototype.getErrorHeader = function (e) {\n\t    var line = e.getOffendingToken().line;\n\t    var column = e.getOffendingToken().column;\n\t    return \"line \" + line + \":\" + column;\n\t};\n\n\t// How should a token be displayed in an error message? The default\n\t//  is to display just the text, but during development you might\n\t//  want to have a lot of information spit out.  Override in that case\n\t//  to use t.toString() (which, for CommonToken, dumps everything about\n\t//  the token). This is better than forcing you to override a method in\n\t//  your token objects because you don't have to go modify your lexer\n\t//  so that it creates a new Java type.\n\t//\n\t// @deprecated This method is not called by the ANTLR 4 Runtime. Specific\n\t// implementations of {@link ANTLRErrorStrategy} may provide a similar\n\t// feature when necessary. For example, see\n\t// {@link DefaultErrorStrategy//getTokenErrorDisplay}.\n\t//\n\tRecognizer.prototype.getTokenErrorDisplay = function (t) {\n\t    if (t === null) {\n\t        return \"<no token>\";\n\t    }\n\t    var s = t.text;\n\t    if (s === null) {\n\t        if (t.type === Token.EOF) {\n\t            s = \"<EOF>\";\n\t        } else {\n\t            s = \"<\" + t.type + \">\";\n\t        }\n\t    }\n\t    s = s.replace(\"\\n\", \"\\\\n\").replace(\"\\r\", \"\\\\r\").replace(\"\\t\", \"\\\\t\");\n\t    return \"'\" + s + \"'\";\n\t};\n\n\tRecognizer.prototype.getErrorListenerDispatch = function () {\n\t    return new ProxyErrorListener(this._listeners);\n\t};\n\n\t// subclass needs to override these if there are sempreds or actions\n\t// that the ATN interp needs to execute\n\tRecognizer.prototype.sempred = function (localctx, ruleIndex, actionIndex) {\n\t    return true;\n\t};\n\n\tRecognizer.prototype.precpred = function (localctx, precedence) {\n\t    return true;\n\t};\n\n\t//Indicate that the recognizer has changed internal state that is\n\t//consistent with the ATN state passed in.  This way we always know\n\t//where we are in the ATN as the parser goes along. The rule\n\t//context objects form a stack that lets us see the stack of\n\t//invoking rules. Combine this and we have complete ATN\n\t//configuration information.\n\n\tObject.defineProperty(Recognizer.prototype, \"state\", {\n\t    get: function get() {\n\t        return this._stateNumber;\n\t    },\n\t    set: function set(state) {\n\t        this._stateNumber = state;\n\t    }\n\t});\n\n\texports.Recognizer = Recognizer;\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\n\t//\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\n\t// Provides an empty default implementation of {@link ANTLRErrorListener}. The\n\t// default implementation of each method does nothing, but can be overridden as\n\t// necessary.\n\n\tfunction ErrorListener() {\n\t  return this;\n\t}\n\n\tErrorListener.prototype.syntaxError = function (recognizer, offendingSymbol, line, column, msg, e) {};\n\n\tErrorListener.prototype.reportAmbiguity = function (recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {};\n\n\tErrorListener.prototype.reportAttemptingFullContext = function (recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {};\n\n\tErrorListener.prototype.reportContextSensitivity = function (recognizer, dfa, startIndex, stopIndex, prediction, configs) {};\n\n\tfunction ConsoleErrorListener() {\n\t  ErrorListener.call(this);\n\t  return this;\n\t}\n\n\tConsoleErrorListener.prototype = Object.create(ErrorListener.prototype);\n\tConsoleErrorListener.prototype.constructor = ConsoleErrorListener;\n\n\t//\n\t// Provides a default instance of {@link ConsoleErrorListener}.\n\t//\n\tConsoleErrorListener.INSTANCE = new ConsoleErrorListener();\n\n\t//\n\t// {@inheritDoc}\n\t//\n\t// <p>\n\t// This implementation prints messages to {@link System//err} containing the\n\t// values of {@code line}, {@code charPositionInLine}, and {@code msg} using\n\t// the following format.</p>\n\t//\n\t// <pre>\n\t// line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>\n\t// </pre>\n\t//\n\tConsoleErrorListener.prototype.syntaxError = function (recognizer, offendingSymbol, line, column, msg, e) {\n\t  console.error(\"line \" + line + \":\" + column + \" \" + msg);\n\t};\n\n\tfunction ProxyErrorListener(delegates) {\n\t  ErrorListener.call(this);\n\t  if (delegates === null) {\n\t    throw \"delegates\";\n\t  }\n\t  this.delegates = delegates;\n\t  return this;\n\t}\n\n\tProxyErrorListener.prototype = Object.create(ErrorListener.prototype);\n\tProxyErrorListener.prototype.constructor = ProxyErrorListener;\n\n\tProxyErrorListener.prototype.syntaxError = function (recognizer, offendingSymbol, line, column, msg, e) {\n\t  this.delegates.map(function (d) {\n\t    d.syntaxError(recognizer, offendingSymbol, line, column, msg, e);\n\t  });\n\t};\n\n\tProxyErrorListener.prototype.reportAmbiguity = function (recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n\t  this.delegates.map(function (d) {\n\t    d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs);\n\t  });\n\t};\n\n\tProxyErrorListener.prototype.reportAttemptingFullContext = function (recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n\t  this.delegates.map(function (d) {\n\t    d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs);\n\t  });\n\t};\n\n\tProxyErrorListener.prototype.reportContextSensitivity = function (recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n\t  this.delegates.map(function (d) {\n\t    d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs);\n\t  });\n\t};\n\n\texports.ErrorListener = ErrorListener;\n\texports.ConsoleErrorListener = ConsoleErrorListener;\n\texports.ProxyErrorListener = ProxyErrorListener;\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t//\n\n\t//\n\t// This default implementation of {@link TokenFactory} creates\n\t// {@link CommonToken} objects.\n\t//\n\n\tvar CommonToken = __webpack_require__(6).CommonToken;\n\n\tfunction TokenFactory() {\n\t    return this;\n\t}\n\n\tfunction CommonTokenFactory(copyText) {\n\t    TokenFactory.call(this);\n\t    // Indicates whether {@link CommonToken//setText} should be called after\n\t    // constructing tokens to explicitly set the text. This is useful for cases\n\t    // where the input stream might not be able to provide arbitrary substrings\n\t    // of text from the input after the lexer creates a token (e.g. the\n\t    // implementation of {@link CharStream//getText} in\n\t    // {@link UnbufferedCharStream} throws an\n\t    // {@link UnsupportedOperationException}). Explicitly setting the token text\n\t    // allows {@link Token//getText} to be called at any time regardless of the\n\t    // input stream implementation.\n\t    //\n\t    // <p>\n\t    // The default value is {@code false} to avoid the performance and memory\n\t    // overhead of copying text for every token unless explicitly requested.</p>\n\t    //\n\t    this.copyText = copyText === undefined ? false : copyText;\n\t    return this;\n\t}\n\n\tCommonTokenFactory.prototype = Object.create(TokenFactory.prototype);\n\tCommonTokenFactory.prototype.constructor = CommonTokenFactory;\n\n\t//\n\t// The default {@link CommonTokenFactory} instance.\n\t//\n\t// <p>\n\t// This token factory does not explicitly copy token text when constructing\n\t// tokens.</p>\n\t//\n\tCommonTokenFactory.DEFAULT = new CommonTokenFactory();\n\n\tCommonTokenFactory.prototype.create = function (source, type, text, channel, start, stop, line, column) {\n\t    var t = new CommonToken(source, type, channel, start, stop);\n\t    t.line = line;\n\t    t.column = column;\n\t    if (text !== null) {\n\t        t.text = text;\n\t    } else if (this.copyText && source[1] !== null) {\n\t        t.text = source[1].getText(start, stop);\n\t    }\n\t    return t;\n\t};\n\n\tCommonTokenFactory.prototype.createThin = function (type, text) {\n\t    var t = new CommonToken(null, type);\n\t    t.text = text;\n\t    return t;\n\t};\n\n\texports.CommonTokenFactory = CommonTokenFactory;\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\n\t// The root of the ANTLR exception hierarchy. In general, ANTLR tracks just\n\t//  3 kinds of errors: prediction errors, failed predicate errors, and\n\t//  mismatched input errors. In each case, the parser knows where it is\n\t//  in the input, where it is in the ATN, the rule invocation stack,\n\t//  and what kind of problem occurred.\n\n\tvar PredicateTransition = __webpack_require__(11).PredicateTransition;\n\n\tfunction RecognitionException(params) {\n\t    Error.call(this);\n\t    if (!!Error.captureStackTrace) {\n\t        Error.captureStackTrace(this, RecognitionException);\n\t    } else {\n\t        var stack = new Error().stack;\n\t    }\n\t    this.message = params.message;\n\t    this.recognizer = params.recognizer;\n\t    this.input = params.input;\n\t    this.ctx = params.ctx;\n\t    // The current {@link Token} when an error occurred. Since not all streams\n\t    // support accessing symbols by index, we have to track the {@link Token}\n\t    // instance itself.\n\t    this.offendingToken = null;\n\t    // Get the ATN state number the parser was in at the time the error\n\t    // occurred. For {@link NoViableAltException} and\n\t    // {@link LexerNoViableAltException} exceptions, this is the\n\t    // {@link DecisionState} number. For others, it is the state whose outgoing\n\t    // edge we couldn't match.\n\t    this.offendingState = -1;\n\t    if (this.recognizer !== null) {\n\t        this.offendingState = this.recognizer.state;\n\t    }\n\t    return this;\n\t}\n\n\tRecognitionException.prototype = Object.create(Error.prototype);\n\tRecognitionException.prototype.constructor = RecognitionException;\n\n\t// <p>If the state number is not known, this method returns -1.</p>\n\n\t//\n\t// Gets the set of input symbols which could potentially follow the\n\t// previously matched symbol at the time this exception was thrown.\n\t//\n\t// <p>If the set of expected tokens is not known and could not be computed,\n\t// this method returns {@code null}.</p>\n\t//\n\t// @return The set of token types that could potentially follow the current\n\t// state in the ATN, or {@code null} if the information is not available.\n\t// /\n\tRecognitionException.prototype.getExpectedTokens = function () {\n\t    if (this.recognizer !== null) {\n\t        return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);\n\t    } else {\n\t        return null;\n\t    }\n\t};\n\n\tRecognitionException.prototype.toString = function () {\n\t    return this.message;\n\t};\n\n\tfunction LexerNoViableAltException(lexer, input, startIndex, deadEndConfigs) {\n\t    RecognitionException.call(this, { message: \"\", recognizer: lexer, input: input, ctx: null });\n\t    this.startIndex = startIndex;\n\t    this.deadEndConfigs = deadEndConfigs;\n\t    return this;\n\t}\n\n\tLexerNoViableAltException.prototype = Object.create(RecognitionException.prototype);\n\tLexerNoViableAltException.prototype.constructor = LexerNoViableAltException;\n\n\tLexerNoViableAltException.prototype.toString = function () {\n\t    var symbol = \"\";\n\t    if (this.startIndex >= 0 && this.startIndex < this.input.size) {\n\t        symbol = this.input.getText((this.startIndex, this.startIndex));\n\t    }\n\t    return \"LexerNoViableAltException\" + symbol;\n\t};\n\n\t// Indicates that the parser could not decide which of two or more paths\n\t// to take based upon the remaining input. It tracks the starting token\n\t// of the offending input and also knows where the parser was\n\t// in the various paths when the error. Reported by reportNoViableAlternative()\n\t//\n\tfunction NoViableAltException(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {\n\t    ctx = ctx || recognizer._ctx;\n\t    offendingToken = offendingToken || recognizer.getCurrentToken();\n\t    startToken = startToken || recognizer.getCurrentToken();\n\t    input = input || recognizer.getInputStream();\n\t    RecognitionException.call(this, { message: \"\", recognizer: recognizer, input: input, ctx: ctx });\n\t    // Which configurations did we try at input.index() that couldn't match\n\t    // input.LT(1)?//\n\t    this.deadEndConfigs = deadEndConfigs;\n\t    // The token object at the start index; the input stream might\n\t    // not be buffering tokens so get a reference to it. (At the\n\t    // time the error occurred, of course the stream needs to keep a\n\t    // buffer all of the tokens but later we might not have access to those.)\n\t    this.startToken = startToken;\n\t    this.offendingToken = offendingToken;\n\t}\n\n\tNoViableAltException.prototype = Object.create(RecognitionException.prototype);\n\tNoViableAltException.prototype.constructor = NoViableAltException;\n\n\t// This signifies any kind of mismatched input exceptions such as\n\t// when the current input does not match the expected token.\n\t//\n\tfunction InputMismatchException(recognizer) {\n\t    RecognitionException.call(this, { message: \"\", recognizer: recognizer, input: recognizer.getInputStream(), ctx: recognizer._ctx });\n\t    this.offendingToken = recognizer.getCurrentToken();\n\t}\n\n\tInputMismatchException.prototype = Object.create(RecognitionException.prototype);\n\tInputMismatchException.prototype.constructor = InputMismatchException;\n\n\t// A semantic predicate failed during validation. Validation of predicates\n\t// occurs when normally parsing the alternative just like matching a token.\n\t// Disambiguating predicate evaluation occurs when we test a predicate during\n\t// prediction.\n\n\tfunction FailedPredicateException(recognizer, predicate, message) {\n\t    RecognitionException.call(this, { message: this.formatMessage(predicate, message || null), recognizer: recognizer,\n\t        input: recognizer.getInputStream(), ctx: recognizer._ctx });\n\t    var s = recognizer._interp.atn.states[recognizer.state];\n\t    var trans = s.transitions[0];\n\t    if (trans instanceof PredicateTransition) {\n\t        this.ruleIndex = trans.ruleIndex;\n\t        this.predicateIndex = trans.predIndex;\n\t    } else {\n\t        this.ruleIndex = 0;\n\t        this.predicateIndex = 0;\n\t    }\n\t    this.predicate = predicate;\n\t    this.offendingToken = recognizer.getCurrentToken();\n\t    return this;\n\t}\n\n\tFailedPredicateException.prototype = Object.create(RecognitionException.prototype);\n\tFailedPredicateException.prototype.constructor = FailedPredicateException;\n\n\tFailedPredicateException.prototype.formatMessage = function (predicate, message) {\n\t    if (message !== null) {\n\t        return message;\n\t    } else {\n\t        return \"failed predicate: {\" + predicate + \"}?\";\n\t    }\n\t};\n\n\tfunction ParseCancellationException() {\n\t    Error.call(this);\n\t    Error.captureStackTrace(this, ParseCancellationException);\n\t    return this;\n\t}\n\n\tParseCancellationException.prototype = Object.create(Error.prototype);\n\tParseCancellationException.prototype.constructor = ParseCancellationException;\n\n\texports.RecognitionException = RecognitionException;\n\texports.NoViableAltException = NoViableAltException;\n\texports.LexerNoViableAltException = LexerNoViableAltException;\n\texports.InputMismatchException = InputMismatchException;\n\texports.FailedPredicateException = FailedPredicateException;\n\texports.ParseCancellationException = ParseCancellationException;\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t///\n\n\tvar DFAState = __webpack_require__(28).DFAState;\n\tvar ATNConfigSet = __webpack_require__(29).ATNConfigSet;\n\tvar getCachedPredictionContext = __webpack_require__(12).getCachedPredictionContext;\n\n\tfunction ATNSimulator(atn, sharedContextCache) {\n\n\t    // The context cache maps all PredictionContext objects that are ==\n\t    //  to a single cached copy. This cache is shared across all contexts\n\t    //  in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet\n\t    //  to use only cached nodes/graphs in addDFAState(). We don't want to\n\t    //  fill this during closure() since there are lots of contexts that\n\t    //  pop up but are not used ever again. It also greatly slows down closure().\n\t    //\n\t    //  <p>This cache makes a huge difference in memory and a little bit in speed.\n\t    //  For the Java grammar on java.*, it dropped the memory requirements\n\t    //  at the end from 25M to 16M. We don't store any of the full context\n\t    //  graphs in the DFA because they are limited to local context only,\n\t    //  but apparently there's a lot of repetition there as well. We optimize\n\t    //  the config contexts before storing the config set in the DFA states\n\t    //  by literally rebuilding them with cached subgraphs only.</p>\n\t    //\n\t    //  <p>I tried a cache for use during closure operations, that was\n\t    //  whacked after each adaptivePredict(). It cost a little bit\n\t    //  more time I think and doesn't save on the overall footprint\n\t    //  so it's not worth the complexity.</p>\n\t    ///\n\t    this.atn = atn;\n\t    this.sharedContextCache = sharedContextCache;\n\t    return this;\n\t}\n\n\t// Must distinguish between missing edge and edge we know leads nowhere///\n\tATNSimulator.ERROR = new DFAState(0x7FFFFFFF, new ATNConfigSet());\n\n\tATNSimulator.prototype.getCachedContext = function (context) {\n\t    if (this.sharedContextCache === null) {\n\t        return context;\n\t    }\n\t    var visited = {};\n\t    return getCachedPredictionContext(context, this.sharedContextCache, visited);\n\t};\n\n\texports.ATNSimulator = ATNSimulator;\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t///\n\n\tvar ATNConfigSet = __webpack_require__(29).ATNConfigSet;\n\tvar Utils = __webpack_require__(5);\n\tvar Hash = Utils.Hash;\n\tvar Set = Utils.Set;\n\n\t// Map a predicate to a predicted alternative.///\n\n\tfunction PredPrediction(pred, alt) {\n\t\tthis.alt = alt;\n\t\tthis.pred = pred;\n\t\treturn this;\n\t}\n\n\tPredPrediction.prototype.toString = function () {\n\t\treturn \"(\" + this.pred + \", \" + this.alt + \")\";\n\t};\n\n\t// A DFA state represents a set of possible ATN configurations.\n\t// As Aho, Sethi, Ullman p. 117 says \"The DFA uses its state\n\t// to keep track of all possible states the ATN can be in after\n\t// reading each input symbol. That is to say, after reading\n\t// input a1a2..an, the DFA is in a state that represents the\n\t// subset T of the states of the ATN that are reachable from the\n\t// ATN's start state along some path labeled a1a2..an.\"\n\t// In conventional NFA&rarr;DFA conversion, therefore, the subset T\n\t// would be a bitset representing the set of states the\n\t// ATN could be in. We need to track the alt predicted by each\n\t// state as well, however. More importantly, we need to maintain\n\t// a stack of states, tracking the closure operations as they\n\t// jump from rule to rule, emulating rule invocations (method calls).\n\t// I have to add a stack to simulate the proper lookahead sequences for\n\t// the underlying LL grammar from which the ATN was derived.\n\t//\n\t// <p>I use a set of ATNConfig objects not simple states. An ATNConfig\n\t// is both a state (ala normal conversion) and a RuleContext describing\n\t// the chain of rules (if any) followed to arrive at that state.</p>\n\t//\n\t// <p>A DFA state may have multiple references to a particular state,\n\t// but with different ATN contexts (with same or different alts)\n\t// meaning that state was reached via a different set of rule invocations.</p>\n\t// /\n\n\tfunction DFAState(stateNumber, configs) {\n\t\tif (stateNumber === null) {\n\t\t\tstateNumber = -1;\n\t\t}\n\t\tif (configs === null) {\n\t\t\tconfigs = new ATNConfigSet();\n\t\t}\n\t\tthis.stateNumber = stateNumber;\n\t\tthis.configs = configs;\n\t\t// {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)\n\t\t// {@link Token//EOF} maps to {@code edges[0]}.\n\t\tthis.edges = null;\n\t\tthis.isAcceptState = false;\n\t\t// if accept state, what ttype do we match or alt do we predict?\n\t\t// This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link\n\t\t// //predicates}{@code !=null} or\n\t\t// {@link //requiresFullContext}.\n\t\tthis.prediction = 0;\n\t\tthis.lexerActionExecutor = null;\n\t\t// Indicates that this state was created during SLL prediction that\n\t\t// discovered a conflict between the configurations in the state. Future\n\t\t// {@link ParserATNSimulator//execATN} invocations immediately jumped doing\n\t\t// full context prediction if this field is true.\n\t\tthis.requiresFullContext = false;\n\t\t// During SLL parsing, this is a list of predicates associated with the\n\t\t// ATN configurations of the DFA state. When we have predicates,\n\t\t// {@link //requiresFullContext} is {@code false} since full context\n\t\t// prediction evaluates predicates\n\t\t// on-the-fly. If this is not null, then {@link //prediction} is\n\t\t// {@link ATN//INVALID_ALT_NUMBER}.\n\t\t//\n\t\t// <p>We only use these for non-{@link //requiresFullContext} but\n\t\t// conflicting states. That\n\t\t// means we know from the context (it's $ or we don't dip into outer\n\t\t// context) that it's an ambiguity not a conflict.</p>\n\t\t//\n\t\t// <p>This list is computed by {@link\n\t\t// ParserATNSimulator//predicateDFAState}.</p>\n\t\tthis.predicates = null;\n\t\treturn this;\n\t}\n\n\t// Get the set of all alts mentioned by all ATN configurations in this\n\t// DFA state.\n\tDFAState.prototype.getAltSet = function () {\n\t\tvar alts = new Set();\n\t\tif (this.configs !== null) {\n\t\t\tfor (var i = 0; i < this.configs.length; i++) {\n\t\t\t\tvar c = this.configs[i];\n\t\t\t\talts.add(c.alt);\n\t\t\t}\n\t\t}\n\t\tif (alts.length === 0) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn alts;\n\t\t}\n\t};\n\n\t// Two {@link DFAState} instances are equal if their ATN configuration sets\n\t// are the same. This method is used to see if a state already exists.\n\t//\n\t// <p>Because the number of alternatives and number of ATN configurations are\n\t// finite, there is a finite number of DFA states that can be processed.\n\t// This is necessary to show that the algorithm terminates.</p>\n\t//\n\t// <p>Cannot test the DFA state numbers here because in\n\t// {@link ParserATNSimulator//addDFAState} we need to know if any other state\n\t// exists that has this exact set of ATN configurations. The\n\t// {@link //stateNumber} is irrelevant.</p>\n\tDFAState.prototype.equals = function (other) {\n\t\t// compare set of ATN configurations in this set with other\n\t\treturn this === other || other instanceof DFAState && this.configs.equals(other.configs);\n\t};\n\n\tDFAState.prototype.toString = function () {\n\t\tvar s = \"\" + this.stateNumber + \":\" + this.configs;\n\t\tif (this.isAcceptState) {\n\t\t\ts = s + \"=>\";\n\t\t\tif (this.predicates !== null) s = s + this.predicates;else s = s + this.prediction;\n\t\t}\n\t\treturn s;\n\t};\n\n\tDFAState.prototype.hashCode = function () {\n\t\tvar hash = new Hash();\n\t\thash.update(this.configs);\n\t\tif (this.isAcceptState) {\n\t\t\tif (this.predicates !== null) hash.update(this.predicates);else hash.update(this.prediction);\n\t\t}\n\t\treturn hash.finish();\n\t};\n\n\texports.DFAState = DFAState;\n\texports.PredPrediction = PredPrediction;\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\n\t//\n\t// Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track\n\t// info about the set, with support for combining similar configurations using a\n\t// graph-structured stack.\n\t///\n\n\tvar ATN = __webpack_require__(3).ATN;\n\tvar Utils = __webpack_require__(5);\n\tvar Hash = Utils.Hash;\n\tvar Set = Utils.Set;\n\tvar SemanticContext = __webpack_require__(9).SemanticContext;\n\tvar merge = __webpack_require__(12).merge;\n\n\tfunction hashATNConfig(c) {\n\t\treturn c.hashCodeForConfigSet();\n\t}\n\n\tfunction equalATNConfigs(a, b) {\n\t\tif (a === b) {\n\t\t\treturn true;\n\t\t} else if (a === null || b === null) {\n\t\t\treturn false;\n\t\t} else return a.equalsForConfigSet(b);\n\t}\n\n\tfunction ATNConfigSet(fullCtx) {\n\t\t//\n\t\t// The reason that we need this is because we don't want the hash map to use\n\t\t// the standard hash code and equals. We need all configurations with the\n\t\t// same\n\t\t// {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively\n\t\t// doubles\n\t\t// the number of objects associated with ATNConfigs. The other solution is\n\t\t// to\n\t\t// use a hash table that lets us specify the equals/hashcode operation.\n\t\t// All configs but hashed by (s, i, _, pi) not including context. Wiped out\n\t\t// when we go readonly as this set becomes a DFA state.\n\t\tthis.configLookup = new Set(hashATNConfig, equalATNConfigs);\n\t\t// Indicates that this configuration set is part of a full context\n\t\t// LL prediction. It will be used to determine how to merge $. With SLL\n\t\t// it's a wildcard whereas it is not for LL context merge.\n\t\tthis.fullCtx = fullCtx === undefined ? true : fullCtx;\n\t\t// Indicates that the set of configurations is read-only. Do not\n\t\t// allow any code to manipulate the set; DFA states will point at\n\t\t// the sets and they must not change. This does not protect the other\n\t\t// fields; in particular, conflictingAlts is set after\n\t\t// we've made this readonly.\n\t\tthis.readOnly = false;\n\t\t// Track the elements as they are added to the set; supports get(i)///\n\t\tthis.configs = [];\n\n\t\t// TODO: these fields make me pretty uncomfortable but nice to pack up info\n\t\t// together, saves recomputation\n\t\t// TODO: can we track conflicts as they are added to save scanning configs\n\t\t// later?\n\t\tthis.uniqueAlt = 0;\n\t\tthis.conflictingAlts = null;\n\n\t\t// Used in parser and lexer. In lexer, it indicates we hit a pred\n\t\t// while computing a closure operation. Don't make a DFA state from this.\n\t\tthis.hasSemanticContext = false;\n\t\tthis.dipsIntoOuterContext = false;\n\n\t\tthis.cachedHashCode = -1;\n\n\t\treturn this;\n\t}\n\n\t// Adding a new config means merging contexts with existing configs for\n\t// {@code (s, i, pi, _)}, where {@code s} is the\n\t// {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and\n\t// {@code pi} is the {@link ATNConfig//semanticContext}. We use\n\t// {@code (s,i,pi)} as key.\n\t//\n\t// <p>This method updates {@link //dipsIntoOuterContext} and\n\t// {@link //hasSemanticContext} when necessary.</p>\n\t// /\n\tATNConfigSet.prototype.add = function (config, mergeCache) {\n\t\tif (mergeCache === undefined) {\n\t\t\tmergeCache = null;\n\t\t}\n\t\tif (this.readOnly) {\n\t\t\tthrow \"This set is readonly\";\n\t\t}\n\t\tif (config.semanticContext !== SemanticContext.NONE) {\n\t\t\tthis.hasSemanticContext = true;\n\t\t}\n\t\tif (config.reachesIntoOuterContext > 0) {\n\t\t\tthis.dipsIntoOuterContext = true;\n\t\t}\n\t\tvar existing = this.configLookup.add(config);\n\t\tif (existing === config) {\n\t\t\tthis.cachedHashCode = -1;\n\t\t\tthis.configs.push(config); // track order here\n\t\t\treturn true;\n\t\t}\n\t\t// a previous (s,i,pi,_), merge with it and save result\n\t\tvar rootIsWildcard = !this.fullCtx;\n\t\tvar merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);\n\t\t// no need to check for existing.context, config.context in cache\n\t\t// since only way to create new graphs is \"call rule\" and here. We\n\t\t// cache at both places.\n\t\texisting.reachesIntoOuterContext = Math.max(existing.reachesIntoOuterContext, config.reachesIntoOuterContext);\n\t\t// make sure to preserve the precedence filter suppression during the merge\n\t\tif (config.precedenceFilterSuppressed) {\n\t\t\texisting.precedenceFilterSuppressed = true;\n\t\t}\n\t\texisting.context = merged; // replace context; no need to alt mapping\n\t\treturn true;\n\t};\n\n\tATNConfigSet.prototype.getStates = function () {\n\t\tvar states = new Set();\n\t\tfor (var i = 0; i < this.configs.length; i++) {\n\t\t\tstates.add(this.configs[i].state);\n\t\t}\n\t\treturn states;\n\t};\n\n\tATNConfigSet.prototype.getPredicates = function () {\n\t\tvar preds = [];\n\t\tfor (var i = 0; i < this.configs.length; i++) {\n\t\t\tvar c = this.configs[i].semanticContext;\n\t\t\tif (c !== SemanticContext.NONE) {\n\t\t\t\tpreds.push(c.semanticContext);\n\t\t\t}\n\t\t}\n\t\treturn preds;\n\t};\n\n\tObject.defineProperty(ATNConfigSet.prototype, \"items\", {\n\t\tget: function get() {\n\t\t\treturn this.configs;\n\t\t}\n\t});\n\n\tATNConfigSet.prototype.optimizeConfigs = function (interpreter) {\n\t\tif (this.readOnly) {\n\t\t\tthrow \"This set is readonly\";\n\t\t}\n\t\tif (this.configLookup.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tfor (var i = 0; i < this.configs.length; i++) {\n\t\t\tvar config = this.configs[i];\n\t\t\tconfig.context = interpreter.getCachedContext(config.context);\n\t\t}\n\t};\n\n\tATNConfigSet.prototype.addAll = function (coll) {\n\t\tfor (var i = 0; i < coll.length; i++) {\n\t\t\tthis.add(coll[i]);\n\t\t}\n\t\treturn false;\n\t};\n\n\tATNConfigSet.prototype.equals = function (other) {\n\t\treturn this === other || other instanceof ATNConfigSet && Utils.equalArrays(this.configs, other.configs) && this.fullCtx === other.fullCtx && this.uniqueAlt === other.uniqueAlt && this.conflictingAlts === other.conflictingAlts && this.hasSemanticContext === other.hasSemanticContext && this.dipsIntoOuterContext === other.dipsIntoOuterContext;\n\t};\n\n\tATNConfigSet.prototype.hashCode = function () {\n\t\tvar hash = new Hash();\n\t\tthis.updateHashCode(hash);\n\t\treturn hash.finish();\n\t};\n\n\tATNConfigSet.prototype.updateHashCode = function (hash) {\n\t\tif (this.readOnly) {\n\t\t\tif (this.cachedHashCode === -1) {\n\t\t\t\tvar hash = new Hash();\n\t\t\t\thash.update(this.configs);\n\t\t\t\tthis.cachedHashCode = hash.finish();\n\t\t\t}\n\t\t\thash.update(this.cachedHashCode);\n\t\t} else {\n\t\t\thash.update(this.configs);\n\t\t}\n\t};\n\n\tObject.defineProperty(ATNConfigSet.prototype, \"length\", {\n\t\tget: function get() {\n\t\t\treturn this.configs.length;\n\t\t}\n\t});\n\n\tATNConfigSet.prototype.isEmpty = function () {\n\t\treturn this.configs.length === 0;\n\t};\n\n\tATNConfigSet.prototype.contains = function (item) {\n\t\tif (this.configLookup === null) {\n\t\t\tthrow \"This method is not implemented for readonly sets.\";\n\t\t}\n\t\treturn this.configLookup.contains(item);\n\t};\n\n\tATNConfigSet.prototype.containsFast = function (item) {\n\t\tif (this.configLookup === null) {\n\t\t\tthrow \"This method is not implemented for readonly sets.\";\n\t\t}\n\t\treturn this.configLookup.containsFast(item);\n\t};\n\n\tATNConfigSet.prototype.clear = function () {\n\t\tif (this.readOnly) {\n\t\t\tthrow \"This set is readonly\";\n\t\t}\n\t\tthis.configs = [];\n\t\tthis.cachedHashCode = -1;\n\t\tthis.configLookup = new Set();\n\t};\n\n\tATNConfigSet.prototype.setReadonly = function (readOnly) {\n\t\tthis.readOnly = readOnly;\n\t\tif (readOnly) {\n\t\t\tthis.configLookup = null; // can't mod, no need for lookup cache\n\t\t}\n\t};\n\n\tATNConfigSet.prototype.toString = function () {\n\t\treturn Utils.arrayToString(this.configs) + (this.hasSemanticContext ? \",hasSemanticContext=\" + this.hasSemanticContext : \"\") + (this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? \",uniqueAlt=\" + this.uniqueAlt : \"\") + (this.conflictingAlts !== null ? \",conflictingAlts=\" + this.conflictingAlts : \"\") + (this.dipsIntoOuterContext ? \",dipsIntoOuterContext\" : \"\");\n\t};\n\n\tfunction OrderedATNConfigSet() {\n\t\tATNConfigSet.call(this);\n\t\tthis.configLookup = new Set();\n\t\treturn this;\n\t}\n\n\tOrderedATNConfigSet.prototype = Object.create(ATNConfigSet.prototype);\n\tOrderedATNConfigSet.prototype.constructor = OrderedATNConfigSet;\n\n\texports.ATNConfigSet = ATNConfigSet;\n\texports.OrderedATNConfigSet = OrderedATNConfigSet;\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\t//\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t///\n\n\t// Represents an executor for a sequence of lexer actions which traversed during\n\t// the matching operation of a lexer rule (token).\n\t//\n\t// <p>The executor tracks position information for position-dependent lexer actions\n\t// efficiently, ensuring that actions appearing only at the end of the rule do\n\t// not cause bloating of the {@link DFA} created for the lexer.</p>\n\n\tvar hashStuff = __webpack_require__(5).hashStuff;\n\tvar LexerIndexedCustomAction = __webpack_require__(20).LexerIndexedCustomAction;\n\n\tfunction LexerActionExecutor(lexerActions) {\n\t\tthis.lexerActions = lexerActions === null ? [] : lexerActions;\n\t\t// Caches the result of {@link //hashCode} since the hash code is an element\n\t\t// of the performance-critical {@link LexerATNConfig//hashCode} operation.\n\t\tthis.cachedHashCode = hashStuff(lexerActions); // \"\".join([str(la) for la in\n\t\t// lexerActions]))\n\t\treturn this;\n\t}\n\n\t// Creates a {@link LexerActionExecutor} which executes the actions for\n\t// the input {@code lexerActionExecutor} followed by a specified\n\t// {@code lexerAction}.\n\t//\n\t// @param lexerActionExecutor The executor for actions already traversed by\n\t// the lexer while matching a token within a particular\n\t// {@link LexerATNConfig}. If this is {@code null}, the method behaves as\n\t// though it were an empty executor.\n\t// @param lexerAction The lexer action to execute after the actions\n\t// specified in {@code lexerActionExecutor}.\n\t//\n\t// @return A {@link LexerActionExecutor} for executing the combine actions\n\t// of {@code lexerActionExecutor} and {@code lexerAction}.\n\tLexerActionExecutor.append = function (lexerActionExecutor, lexerAction) {\n\t\tif (lexerActionExecutor === null) {\n\t\t\treturn new LexerActionExecutor([lexerAction]);\n\t\t}\n\t\tvar lexerActions = lexerActionExecutor.lexerActions.concat([lexerAction]);\n\t\treturn new LexerActionExecutor(lexerActions);\n\t};\n\n\t// Creates a {@link LexerActionExecutor} which encodes the current offset\n\t// for position-dependent lexer actions.\n\t//\n\t// <p>Normally, when the executor encounters lexer actions where\n\t// {@link LexerAction//isPositionDependent} returns {@code true}, it calls\n\t// {@link IntStream//seek} on the input {@link CharStream} to set the input\n\t// position to the <em>end</em> of the current token. This behavior provides\n\t// for efficient DFA representation of lexer actions which appear at the end\n\t// of a lexer rule, even when the lexer rule matches a variable number of\n\t// characters.</p>\n\t//\n\t// <p>Prior to traversing a match transition in the ATN, the current offset\n\t// from the token start index is assigned to all position-dependent lexer\n\t// actions which have not already been assigned a fixed offset. By storing\n\t// the offsets relative to the token start index, the DFA representation of\n\t// lexer actions which appear in the middle of tokens remains efficient due\n\t// to sharing among tokens of the same length, regardless of their absolute\n\t// position in the input stream.</p>\n\t//\n\t// <p>If the current executor already has offsets assigned to all\n\t// position-dependent lexer actions, the method returns {@code this}.</p>\n\t//\n\t// @param offset The current offset to assign to all position-dependent\n\t// lexer actions which do not already have offsets assigned.\n\t//\n\t// @return A {@link LexerActionExecutor} which stores input stream offsets\n\t// for all position-dependent lexer actions.\n\t// /\n\tLexerActionExecutor.prototype.fixOffsetBeforeMatch = function (offset) {\n\t\tvar updatedLexerActions = null;\n\t\tfor (var i = 0; i < this.lexerActions.length; i++) {\n\t\t\tif (this.lexerActions[i].isPositionDependent && !(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {\n\t\t\t\tif (updatedLexerActions === null) {\n\t\t\t\t\tupdatedLexerActions = this.lexerActions.concat([]);\n\t\t\t\t}\n\t\t\t\tupdatedLexerActions[i] = new LexerIndexedCustomAction(offset, this.lexerActions[i]);\n\t\t\t}\n\t\t}\n\t\tif (updatedLexerActions === null) {\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn new LexerActionExecutor(updatedLexerActions);\n\t\t}\n\t};\n\n\t// Execute the actions encapsulated by this executor within the context of a\n\t// particular {@link Lexer}.\n\t//\n\t// <p>This method calls {@link IntStream//seek} to set the position of the\n\t// {@code input} {@link CharStream} prior to calling\n\t// {@link LexerAction//execute} on a position-dependent action. Before the\n\t// method returns, the input position will be restored to the same position\n\t// it was in when the method was invoked.</p>\n\t//\n\t// @param lexer The lexer instance.\n\t// @param input The input stream which is the source for the current token.\n\t// When this method is called, the current {@link IntStream//index} for\n\t// {@code input} should be the start of the following token, i.e. 1\n\t// character past the end of the current token.\n\t// @param startIndex The token start index. This value may be passed to\n\t// {@link IntStream//seek} to set the {@code input} position to the beginning\n\t// of the token.\n\t// /\n\tLexerActionExecutor.prototype.execute = function (lexer, input, startIndex) {\n\t\tvar requiresSeek = false;\n\t\tvar stopIndex = input.index;\n\t\ttry {\n\t\t\tfor (var i = 0; i < this.lexerActions.length; i++) {\n\t\t\t\tvar lexerAction = this.lexerActions[i];\n\t\t\t\tif (lexerAction instanceof LexerIndexedCustomAction) {\n\t\t\t\t\tvar offset = lexerAction.offset;\n\t\t\t\t\tinput.seek(startIndex + offset);\n\t\t\t\t\tlexerAction = lexerAction.action;\n\t\t\t\t\trequiresSeek = startIndex + offset !== stopIndex;\n\t\t\t\t} else if (lexerAction.isPositionDependent) {\n\t\t\t\t\tinput.seek(stopIndex);\n\t\t\t\t\trequiresSeek = false;\n\t\t\t\t}\n\t\t\t\tlexerAction.execute(lexer);\n\t\t\t}\n\t\t} finally {\n\t\t\tif (requiresSeek) {\n\t\t\t\tinput.seek(stopIndex);\n\t\t\t}\n\t\t}\n\t};\n\n\tLexerActionExecutor.prototype.hashCode = function () {\n\t\treturn this.cachedHashCode;\n\t};\n\n\tLexerActionExecutor.prototype.updateHashCode = function (hash) {\n\t\thash.update(this.cachedHashCode);\n\t};\n\n\tLexerActionExecutor.prototype.equals = function (other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof LexerActionExecutor)) {\n\t\t\treturn false;\n\t\t} else if (this.cachedHashCode != other.cachedHashCode) {\n\t\t\treturn false;\n\t\t} else if (this.lexerActions.length != other.lexerActions.length) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tvar numActions = this.lexerActions.length;\n\t\t\tfor (var idx = 0; idx < numActions; ++idx) {\n\t\t\t\tif (!this.lexerActions[idx].equals(other.lexerActions[idx])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t};\n\n\texports.LexerActionExecutor = LexerActionExecutor;\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t//\n\n\t//\n\t// The embodiment of the adaptive LL(*), ALL(*), parsing strategy.\n\t//\n\t// <p>\n\t// The basic complexity of the adaptive strategy makes it harder to understand.\n\t// We begin with ATN simulation to build paths in a DFA. Subsequent prediction\n\t// requests go through the DFA first. If they reach a state without an edge for\n\t// the current symbol, the algorithm fails over to the ATN simulation to\n\t// complete the DFA path for the current input (until it finds a conflict state\n\t// or uniquely predicting state).</p>\n\t//\n\t// <p>\n\t// All of that is done without using the outer context because we want to create\n\t// a DFA that is not dependent upon the rule invocation stack when we do a\n\t// prediction. One DFA works in all contexts. We avoid using context not\n\t// necessarily because it's slower, although it can be, but because of the DFA\n\t// caching problem. The closure routine only considers the rule invocation stack\n\t// created during prediction beginning in the decision rule. For example, if\n\t// prediction occurs without invoking another rule's ATN, there are no context\n\t// stacks in the configurations. When lack of context leads to a conflict, we\n\t// don't know if it's an ambiguity or a weakness in the strong LL(*) parsing\n\t// strategy (versus full LL(*)).</p>\n\t//\n\t// <p>\n\t// When SLL yields a configuration set with conflict, we rewind the input and\n\t// retry the ATN simulation, this time using full outer context without adding\n\t// to the DFA. Configuration context stacks will be the full invocation stacks\n\t// from the start rule. If we get a conflict using full context, then we can\n\t// definitively say we have a true ambiguity for that input sequence. If we\n\t// don't get a conflict, it implies that the decision is sensitive to the outer\n\t// context. (It is not context-sensitive in the sense of context-sensitive\n\t// grammars.)</p>\n\t//\n\t// <p>\n\t// The next time we reach this DFA state with an SLL conflict, through DFA\n\t// simulation, we will again retry the ATN simulation using full context mode.\n\t// This is slow because we can't save the results and have to \"interpret\" the\n\t// ATN each time we get that input.</p>\n\t//\n\t// <p>\n\t// <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>\n\t//\n\t// <p>\n\t// We could cache results from full context to predicted alternative easily and\n\t// that saves a lot of time but doesn't work in presence of predicates. The set\n\t// of visible predicates from the ATN start state changes depending on the\n\t// context, because closure can fall off the end of a rule. I tried to cache\n\t// tuples (stack context, semantic context, predicted alt) but it was slower\n\t// than interpreting and much more complicated. Also required a huge amount of\n\t// memory. The goal is not to create the world's fastest parser anyway. I'd like\n\t// to keep this algorithm simple. By launching multiple threads, we can improve\n\t// the speed of parsing across a large number of files.</p>\n\t//\n\t// <p>\n\t// There is no strict ordering between the amount of input used by SLL vs LL,\n\t// which makes it really hard to build a cache for full context. Let's say that\n\t// we have input A B C that leads to an SLL conflict with full context X. That\n\t// implies that using X we might only use A B but we could also use A B C D to\n\t// resolve conflict. Input A B C D could predict alternative 1 in one position\n\t// in the input and A B C E could predict alternative 2 in another position in\n\t// input. The conflicting SLL configurations could still be non-unique in the\n\t// full context prediction, which would lead us to requiring more input than the\n\t// original A B C.\tTo make a\tprediction cache work, we have to track\tthe exact\n\t// input\tused during the previous prediction. That amounts to a cache that maps\n\t// X to a specific DFA for that context.</p>\n\t//\n\t// <p>\n\t// Something should be done for left-recursive expression predictions. They are\n\t// likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry\n\t// with full LL thing Sam does.</p>\n\t//\n\t// <p>\n\t// <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>\n\t//\n\t// <p>\n\t// We avoid doing full context retry when the outer context is empty, we did not\n\t// dip into the outer context by falling off the end of the decision state rule,\n\t// or when we force SLL mode.</p>\n\t//\n\t// <p>\n\t// As an example of the not dip into outer context case, consider as super\n\t// constructor calls versus function calls. One grammar might look like\n\t// this:</p>\n\t//\n\t// <pre>\n\t// ctorBody\n\t//   : '{' superCall? stat* '}'\n\t//   ;\n\t// </pre>\n\t//\n\t// <p>\n\t// Or, you might see something like</p>\n\t//\n\t// <pre>\n\t// stat\n\t//   : superCall ';'\n\t//   | expression ';'\n\t//   | ...\n\t//   ;\n\t// </pre>\n\t//\n\t// <p>\n\t// In both cases I believe that no closure operations will dip into the outer\n\t// context. In the first case ctorBody in the worst case will stop at the '}'.\n\t// In the 2nd case it should stop at the ';'. Both cases should stay within the\n\t// entry rule and not dip into the outer context.</p>\n\t//\n\t// <p>\n\t// <strong>PREDICATES</strong></p>\n\t//\n\t// <p>\n\t// Predicates are always evaluated if present in either SLL or LL both. SLL and\n\t// LL simulation deals with predicates differently. SLL collects predicates as\n\t// it performs closure operations like ANTLR v3 did. It delays predicate\n\t// evaluation until it reaches and accept state. This allows us to cache the SLL\n\t// ATN simulation whereas, if we had evaluated predicates on-the-fly during\n\t// closure, the DFA state configuration sets would be different and we couldn't\n\t// build up a suitable DFA.</p>\n\t//\n\t// <p>\n\t// When building a DFA accept state during ATN simulation, we evaluate any\n\t// predicates and return the sole semantically valid alternative. If there is\n\t// more than 1 alternative, we report an ambiguity. If there are 0 alternatives,\n\t// we throw an exception. Alternatives without predicates act like they have\n\t// true predicates. The simple way to think about it is to strip away all\n\t// alternatives with false predicates and choose the minimum alternative that\n\t// remains.</p>\n\t//\n\t// <p>\n\t// When we start in the DFA and reach an accept state that's predicated, we test\n\t// those and return the minimum semantically viable alternative. If no\n\t// alternatives are viable, we throw an exception.</p>\n\t//\n\t// <p>\n\t// During full LL ATN simulation, closure always evaluates predicates and\n\t// on-the-fly. This is crucial to reducing the configuration set size during\n\t// closure. It hits a landmine when parsing with the Java grammar, for example,\n\t// without this on-the-fly evaluation.</p>\n\t//\n\t// <p>\n\t// <strong>SHARING DFA</strong></p>\n\t//\n\t// <p>\n\t// All instances of the same parser share the same decision DFAs through a\n\t// static field. Each instance gets its own ATN simulator but they share the\n\t// same {@link //decisionToDFA} field. They also share a\n\t// {@link PredictionContextCache} object that makes sure that all\n\t// {@link PredictionContext} objects are shared among the DFA states. This makes\n\t// a big size difference.</p>\n\t//\n\t// <p>\n\t// <strong>THREAD SAFETY</strong></p>\n\t//\n\t// <p>\n\t// The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when\n\t// it adds a new DFA object to that array. {@link //addDFAEdge}\n\t// locks on the DFA for the current decision when setting the\n\t// {@link DFAState//edges} field. {@link //addDFAState} locks on\n\t// the DFA for the current decision when looking up a DFA state to see if it\n\t// already exists. We must make sure that all requests to add DFA states that\n\t// are equivalent result in the same shared DFA object. This is because lots of\n\t// threads will be trying to update the DFA at once. The\n\t// {@link //addDFAState} method also locks inside the DFA lock\n\t// but this time on the shared context cache when it rebuilds the\n\t// configurations' {@link PredictionContext} objects using cached\n\t// subgraphs/nodes. No other locking occurs, even during DFA simulation. This is\n\t// safe as long as we can guarantee that all threads referencing\n\t// {@code s.edge[t]} get the same physical target {@link DFAState}, or\n\t// {@code null}. Once into the DFA, the DFA simulation does not reference the\n\t// {@link DFA//states} map. It follows the {@link DFAState//edges} field to new\n\t// targets. The DFA simulator will either find {@link DFAState//edges} to be\n\t// {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or\n\t// {@code dfa.edges[t]} to be non-null. The\n\t// {@link //addDFAEdge} method could be racing to set the field\n\t// but in either case the DFA simulator works; if {@code null}, and requests ATN\n\t// simulation. It could also race trying to get {@code dfa.edges[t]}, but either\n\t// way it will work because it's not doing a test and set operation.</p>\n\t//\n\t// <p>\n\t// <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage\n\t// Parsing)</strong></p>\n\t//\n\t// <p>\n\t// Sam pointed out that if SLL does not give a syntax error, then there is no\n\t// point in doing full LL, which is slower. We only have to try LL if we get a\n\t// syntax error. For maximum speed, Sam starts the parser set to pure SLL\n\t// mode with the {@link BailErrorStrategy}:</p>\n\t//\n\t// <pre>\n\t// parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};\n\t// parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());\n\t// </pre>\n\t//\n\t// <p>\n\t// If it does not get a syntax error, then we're done. If it does get a syntax\n\t// error, we need to retry with the combined SLL/LL strategy.</p>\n\t//\n\t// <p>\n\t// The reason this works is as follows. If there are no SLL conflicts, then the\n\t// grammar is SLL (at least for that input set). If there is an SLL conflict,\n\t// the full LL analysis must yield a set of viable alternatives which is a\n\t// subset of the alternatives reported by SLL. If the LL set is a singleton,\n\t// then the grammar is LL but not SLL. If the LL set is the same size as the SLL\n\t// set, the decision is SLL. If the LL set has size &gt; 1, then that decision\n\t// is truly ambiguous on the current input. If the LL set is smaller, then the\n\t// SLL conflict resolution might choose an alternative that the full LL would\n\t// rule out as a possibility based upon better context information. If that's\n\t// the case, then the SLL parse will definitely get an error because the full LL\n\t// analysis says it's not viable. If SLL conflict resolution chooses an\n\t// alternative within the LL set, them both SLL and LL would choose the same\n\t// alternative because they both choose the minimum of multiple conflicting\n\t// alternatives.</p>\n\t//\n\t// <p>\n\t// Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and\n\t// a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL\n\t// parsing will get an error because SLL will pursue alternative 1. If\n\t// <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will\n\t// choose the same alternative because alternative one is the minimum of either\n\t// set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax\n\t// error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>\n\t//\n\t// <p>\n\t// Of course, if the input is invalid, then we will get an error for sure in\n\t// both SLL and LL parsing. Erroneous input will therefore require 2 passes over\n\t// the input.</p>\n\t//\n\n\tvar Utils = __webpack_require__(5);\n\tvar Set = Utils.Set;\n\tvar BitSet = Utils.BitSet;\n\tvar DoubleDict = Utils.DoubleDict;\n\tvar ATN = __webpack_require__(3).ATN;\n\tvar ATNState = __webpack_require__(8).ATNState;\n\tvar ATNConfig = __webpack_require__(7).ATNConfig;\n\tvar ATNConfigSet = __webpack_require__(29).ATNConfigSet;\n\tvar Token = __webpack_require__(6).Token;\n\tvar DFAState = __webpack_require__(28).DFAState;\n\tvar PredPrediction = __webpack_require__(28).PredPrediction;\n\tvar ATNSimulator = __webpack_require__(27).ATNSimulator;\n\tvar PredictionMode = __webpack_require__(32).PredictionMode;\n\tvar RuleContext = __webpack_require__(13).RuleContext;\n\tvar ParserRuleContext = __webpack_require__(16).ParserRuleContext;\n\tvar SemanticContext = __webpack_require__(9).SemanticContext;\n\tvar StarLoopEntryState = __webpack_require__(8).StarLoopEntryState;\n\tvar RuleStopState = __webpack_require__(8).RuleStopState;\n\tvar PredictionContext = __webpack_require__(12).PredictionContext;\n\tvar Interval = __webpack_require__(10).Interval;\n\tvar Transitions = __webpack_require__(11);\n\tvar Transition = Transitions.Transition;\n\tvar SetTransition = Transitions.SetTransition;\n\tvar NotSetTransition = Transitions.NotSetTransition;\n\tvar RuleTransition = Transitions.RuleTransition;\n\tvar ActionTransition = Transitions.ActionTransition;\n\tvar NoViableAltException = __webpack_require__(26).NoViableAltException;\n\n\tvar SingletonPredictionContext = __webpack_require__(12).SingletonPredictionContext;\n\tvar predictionContextFromRuleContext = __webpack_require__(12).predictionContextFromRuleContext;\n\n\tfunction ParserATNSimulator(parser, atn, decisionToDFA, sharedContextCache) {\n\t    ATNSimulator.call(this, atn, sharedContextCache);\n\t    this.parser = parser;\n\t    this.decisionToDFA = decisionToDFA;\n\t    // SLL, LL, or LL + exact ambig detection?//\n\t    this.predictionMode = PredictionMode.LL;\n\t    // LAME globals to avoid parameters!!!!! I need these down deep in predTransition\n\t    this._input = null;\n\t    this._startIndex = 0;\n\t    this._outerContext = null;\n\t    this._dfa = null;\n\t    // Each prediction operation uses a cache for merge of prediction contexts.\n\t    //  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap\n\t    //  isn't synchronized but we're ok since two threads shouldn't reuse same\n\t    //  parser/atnsim object because it can only handle one input at a time.\n\t    //  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid\n\t    //  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should\n\t    //  also be examined during cache lookup.\n\t    //\n\t    this.mergeCache = null;\n\t    return this;\n\t}\n\n\tParserATNSimulator.prototype = Object.create(ATNSimulator.prototype);\n\tParserATNSimulator.prototype.constructor = ParserATNSimulator;\n\n\tParserATNSimulator.prototype.debug = false;\n\tParserATNSimulator.prototype.debug_closure = false;\n\tParserATNSimulator.prototype.debug_add = false;\n\tParserATNSimulator.prototype.debug_list_atn_decisions = false;\n\tParserATNSimulator.prototype.dfa_debug = false;\n\tParserATNSimulator.prototype.retry_debug = false;\n\n\tParserATNSimulator.prototype.reset = function () {};\n\n\tParserATNSimulator.prototype.adaptivePredict = function (input, decision, outerContext) {\n\t    if (this.debug || this.debug_list_atn_decisions) {\n\t        console.log(\"adaptivePredict decision \" + decision + \" exec LA(1)==\" + this.getLookaheadName(input) + \" line \" + input.LT(1).line + \":\" + input.LT(1).column);\n\t    }\n\t    this._input = input;\n\t    this._startIndex = input.index;\n\t    this._outerContext = outerContext;\n\n\t    var dfa = this.decisionToDFA[decision];\n\t    this._dfa = dfa;\n\t    var m = input.mark();\n\t    var index = input.index;\n\n\t    // Now we are certain to have a specific decision's DFA\n\t    // But, do we still need an initial state?\n\t    try {\n\t        var s0;\n\t        if (dfa.precedenceDfa) {\n\t            // the start state for a precedence DFA depends on the current\n\t            // parser precedence, and is provided by a DFA method.\n\t            s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());\n\t        } else {\n\t            // the start state for a \"regular\" DFA is just s0\n\t            s0 = dfa.s0;\n\t        }\n\t        if (s0 === null) {\n\t            if (outerContext === null) {\n\t                outerContext = RuleContext.EMPTY;\n\t            }\n\t            if (this.debug || this.debug_list_atn_decisions) {\n\t                console.log(\"predictATN decision \" + dfa.decision + \" exec LA(1)==\" + this.getLookaheadName(input) + \", outerContext=\" + outerContext.toString(this.parser.ruleNames));\n\t            }\n\n\t            var fullCtx = false;\n\t            var s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);\n\n\t            if (dfa.precedenceDfa) {\n\t                // If this is a precedence DFA, we use applyPrecedenceFilter\n\t                // to convert the computed start state to a precedence start\n\t                // state. We then use DFA.setPrecedenceStartState to set the\n\t                // appropriate start state for the precedence level rather\n\t                // than simply setting DFA.s0.\n\t                //\n\t                dfa.s0.configs = s0_closure; // not used for prediction but useful to know start configs anyway\n\t                s0_closure = this.applyPrecedenceFilter(s0_closure);\n\t                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));\n\t                dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);\n\t            } else {\n\t                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));\n\t                dfa.s0 = s0;\n\t            }\n\t        }\n\t        var alt = this.execATN(dfa, s0, input, index, outerContext);\n\t        if (this.debug) {\n\t            console.log(\"DFA after predictATN: \" + dfa.toString(this.parser.literalNames));\n\t        }\n\t        return alt;\n\t    } finally {\n\t        this._dfa = null;\n\t        this.mergeCache = null; // wack cache after each prediction\n\t        input.seek(index);\n\t        input.release(m);\n\t    }\n\t};\n\t// Performs ATN simulation to compute a predicted alternative based\n\t//  upon the remaining input, but also updates the DFA cache to avoid\n\t//  having to traverse the ATN again for the same input sequence.\n\n\t// There are some key conditions we're looking for after computing a new\n\t// set of ATN configs (proposed DFA state):\n\t// if the set is empty, there is no viable alternative for current symbol\n\t// does the state uniquely predict an alternative?\n\t// does the state have a conflict that would prevent us from\n\t//   putting it on the work list?\n\n\t// We also have some key operations to do:\n\t// add an edge from previous DFA state to potentially new DFA state, D,\n\t//   upon current symbol but only if adding to work list, which means in all\n\t//   cases except no viable alternative (and possibly non-greedy decisions?)\n\t// collecting predicates and adding semantic context to DFA accept states\n\t// adding rule context to context-sensitive DFA accept states\n\t// consuming an input symbol\n\t// reporting a conflict\n\t// reporting an ambiguity\n\t// reporting a context sensitivity\n\t// reporting insufficient predicates\n\n\t// cover these cases:\n\t//    dead end\n\t//    single alt\n\t//    single alt + preds\n\t//    conflict\n\t//    conflict + preds\n\t//\n\tParserATNSimulator.prototype.execATN = function (dfa, s0, input, startIndex, outerContext) {\n\t    if (this.debug || this.debug_list_atn_decisions) {\n\t        console.log(\"execATN decision \" + dfa.decision + \" exec LA(1)==\" + this.getLookaheadName(input) + \" line \" + input.LT(1).line + \":\" + input.LT(1).column);\n\t    }\n\t    var alt;\n\t    var previousD = s0;\n\n\t    if (this.debug) {\n\t        console.log(\"s0 = \" + s0);\n\t    }\n\t    var t = input.LA(1);\n\t    while (true) {\n\t        // while more work\n\t        var D = this.getExistingTargetState(previousD, t);\n\t        if (D === null) {\n\t            D = this.computeTargetState(dfa, previousD, t);\n\t        }\n\t        if (D === ATNSimulator.ERROR) {\n\t            // if any configs in previous dipped into outer context, that\n\t            // means that input up to t actually finished entry rule\n\t            // at least for SLL decision. Full LL doesn't dip into outer\n\t            // so don't need special case.\n\t            // We will get an error no matter what so delay until after\n\t            // decision; better error message. Also, no reachable target\n\t            // ATN states in SLL implies LL will also get nowhere.\n\t            // If conflict in states that dip out, choose min since we\n\t            // will get error no matter what.\n\t            var e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);\n\t            input.seek(startIndex);\n\t            alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);\n\t            if (alt !== ATN.INVALID_ALT_NUMBER) {\n\t                return alt;\n\t            } else {\n\t                throw e;\n\t            }\n\t        }\n\t        if (D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {\n\t            // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)\n\t            var conflictingAlts = null;\n\t            if (D.predicates !== null) {\n\t                if (this.debug) {\n\t                    console.log(\"DFA state has preds in DFA sim LL failover\");\n\t                }\n\t                var conflictIndex = input.index;\n\t                if (conflictIndex !== startIndex) {\n\t                    input.seek(startIndex);\n\t                }\n\t                conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);\n\t                if (conflictingAlts.length === 1) {\n\t                    if (this.debug) {\n\t                        console.log(\"Full LL avoided\");\n\t                    }\n\t                    return conflictingAlts.minValue();\n\t                }\n\t                if (conflictIndex !== startIndex) {\n\t                    // restore the index so reporting the fallback to full\n\t                    // context occurs with the index at the correct spot\n\t                    input.seek(conflictIndex);\n\t                }\n\t            }\n\t            if (this.dfa_debug) {\n\t                console.log(\"ctx sensitive state \" + outerContext + \" in \" + D);\n\t            }\n\t            var fullCtx = true;\n\t            var s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);\n\t            this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);\n\t            alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);\n\t            return alt;\n\t        }\n\t        if (D.isAcceptState) {\n\t            if (D.predicates === null) {\n\t                return D.prediction;\n\t            }\n\t            var stopIndex = input.index;\n\t            input.seek(startIndex);\n\t            var alts = this.evalSemanticContext(D.predicates, outerContext, true);\n\t            if (alts.length === 0) {\n\t                throw this.noViableAlt(input, outerContext, D.configs, startIndex);\n\t            } else if (alts.length === 1) {\n\t                return alts.minValue();\n\t            } else {\n\t                // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.\n\t                this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);\n\t                return alts.minValue();\n\t            }\n\t        }\n\t        previousD = D;\n\n\t        if (t !== Token.EOF) {\n\t            input.consume();\n\t            t = input.LA(1);\n\t        }\n\t    }\n\t};\n\t//\n\t// Get an existing target state for an edge in the DFA. If the target state\n\t// for the edge has not yet been computed or is otherwise not available,\n\t// this method returns {@code null}.\n\t//\n\t// @param previousD The current DFA state\n\t// @param t The next input symbol\n\t// @return The existing target DFA state for the given input symbol\n\t// {@code t}, or {@code null} if the target state for this edge is not\n\t// already cached\n\t//\n\tParserATNSimulator.prototype.getExistingTargetState = function (previousD, t) {\n\t    var edges = previousD.edges;\n\t    if (edges === null) {\n\t        return null;\n\t    } else {\n\t        return edges[t + 1] || null;\n\t    }\n\t};\n\t//\n\t// Compute a target state for an edge in the DFA, and attempt to add the\n\t// computed state and corresponding edge to the DFA.\n\t//\n\t// @param dfa The DFA\n\t// @param previousD The current DFA state\n\t// @param t The next input symbol\n\t//\n\t// @return The computed target DFA state for the given input symbol\n\t// {@code t}. If {@code t} does not lead to a valid DFA state, this method\n\t// returns {@link //ERROR}.\n\t//\n\tParserATNSimulator.prototype.computeTargetState = function (dfa, previousD, t) {\n\t    var reach = this.computeReachSet(previousD.configs, t, false);\n\t    if (reach === null) {\n\t        this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);\n\t        return ATNSimulator.ERROR;\n\t    }\n\t    // create new target state; we'll add to DFA after it's complete\n\t    var D = new DFAState(null, reach);\n\n\t    var predictedAlt = this.getUniqueAlt(reach);\n\n\t    if (this.debug) {\n\t        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);\n\t        console.log(\"SLL altSubSets=\" + Utils.arrayToString(altSubSets) + \", previous=\" + previousD.configs + \", configs=\" + reach + \", predict=\" + predictedAlt + \", allSubsetsConflict=\" + PredictionMode.allSubsetsConflict(altSubSets) + \", conflictingAlts=\" + this.getConflictingAlts(reach));\n\t    }\n\t    if (predictedAlt !== ATN.INVALID_ALT_NUMBER) {\n\t        // NO CONFLICT, UNIQUELY PREDICTED ALT\n\t        D.isAcceptState = true;\n\t        D.configs.uniqueAlt = predictedAlt;\n\t        D.prediction = predictedAlt;\n\t    } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {\n\t        // MORE THAN ONE VIABLE ALTERNATIVE\n\t        D.configs.conflictingAlts = this.getConflictingAlts(reach);\n\t        D.requiresFullContext = true;\n\t        // in SLL-only mode, we will stop at this state and return the minimum alt\n\t        D.isAcceptState = true;\n\t        D.prediction = D.configs.conflictingAlts.minValue();\n\t    }\n\t    if (D.isAcceptState && D.configs.hasSemanticContext) {\n\t        this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));\n\t        if (D.predicates !== null) {\n\t            D.prediction = ATN.INVALID_ALT_NUMBER;\n\t        }\n\t    }\n\t    // all adds to dfa are done after we've created full D state\n\t    D = this.addDFAEdge(dfa, previousD, t, D);\n\t    return D;\n\t};\n\n\tParserATNSimulator.prototype.predicateDFAState = function (dfaState, decisionState) {\n\t    // We need to test all predicates, even in DFA states that\n\t    // uniquely predict alternative.\n\t    var nalts = decisionState.transitions.length;\n\t    // Update DFA so reach becomes accept state with (predicate,alt)\n\t    // pairs if preds found for conflicting alts\n\t    var altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);\n\t    var altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);\n\t    if (altToPred !== null) {\n\t        dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);\n\t        dfaState.prediction = ATN.INVALID_ALT_NUMBER; // make sure we use preds\n\t    } else {\n\t        // There are preds in configs but they might go away\n\t        // when OR'd together like {p}? || NONE == NONE. If neither\n\t        // alt has preds, resolve to min alt\n\t        dfaState.prediction = altsToCollectPredsFrom.minValue();\n\t    }\n\t};\n\n\t// comes back with reach.uniqueAlt set to a valid alt\n\tParserATNSimulator.prototype.execATNWithFullContext = function (dfa, D, // how far we got before failing over\n\ts0, input, startIndex, outerContext) {\n\t    if (this.debug || this.debug_list_atn_decisions) {\n\t        console.log(\"execATNWithFullContext \" + s0);\n\t    }\n\t    var fullCtx = true;\n\t    var foundExactAmbig = false;\n\t    var reach = null;\n\t    var previous = s0;\n\t    input.seek(startIndex);\n\t    var t = input.LA(1);\n\t    var predictedAlt = -1;\n\t    while (true) {\n\t        // while more work\n\t        reach = this.computeReachSet(previous, t, fullCtx);\n\t        if (reach === null) {\n\t            // if any configs in previous dipped into outer context, that\n\t            // means that input up to t actually finished entry rule\n\t            // at least for LL decision. Full LL doesn't dip into outer\n\t            // so don't need special case.\n\t            // We will get an error no matter what so delay until after\n\t            // decision; better error message. Also, no reachable target\n\t            // ATN states in SLL implies LL will also get nowhere.\n\t            // If conflict in states that dip out, choose min since we\n\t            // will get error no matter what.\n\t            var e = this.noViableAlt(input, outerContext, previous, startIndex);\n\t            input.seek(startIndex);\n\t            var alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);\n\t            if (alt !== ATN.INVALID_ALT_NUMBER) {\n\t                return alt;\n\t            } else {\n\t                throw e;\n\t            }\n\t        }\n\t        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);\n\t        if (this.debug) {\n\t            console.log(\"LL altSubSets=\" + altSubSets + \", predict=\" + PredictionMode.getUniqueAlt(altSubSets) + \", resolvesToJustOneViableAlt=\" + PredictionMode.resolvesToJustOneViableAlt(altSubSets));\n\t        }\n\t        reach.uniqueAlt = this.getUniqueAlt(reach);\n\t        // unique prediction?\n\t        if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER) {\n\t            predictedAlt = reach.uniqueAlt;\n\t            break;\n\t        } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {\n\t            predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);\n\t            if (predictedAlt !== ATN.INVALID_ALT_NUMBER) {\n\t                break;\n\t            }\n\t        } else {\n\t            // In exact ambiguity mode, we never try to terminate early.\n\t            // Just keeps scarfing until we know what the conflict is\n\t            if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {\n\t                foundExactAmbig = true;\n\t                predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);\n\t                break;\n\t            }\n\t            // else there are multiple non-conflicting subsets or\n\t            // we're not sure what the ambiguity is yet.\n\t            // So, keep going.\n\t        }\n\t        previous = reach;\n\t        if (t !== Token.EOF) {\n\t            input.consume();\n\t            t = input.LA(1);\n\t        }\n\t    }\n\t    // If the configuration set uniquely predicts an alternative,\n\t    // without conflict, then we know that it's a full LL decision\n\t    // not SLL.\n\t    if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER) {\n\t        this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);\n\t        return predictedAlt;\n\t    }\n\t    // We do not check predicates here because we have checked them\n\t    // on-the-fly when doing full context prediction.\n\n\t    //\n\t    // In non-exact ambiguity detection mode, we might\tactually be able to\n\t    // detect an exact ambiguity, but I'm not going to spend the cycles\n\t    // needed to check. We only emit ambiguity warnings in exact ambiguity\n\t    // mode.\n\t    //\n\t    // For example, we might know that we have conflicting configurations.\n\t    // But, that does not mean that there is no way forward without a\n\t    // conflict. It's possible to have nonconflicting alt subsets as in:\n\n\t    // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]\n\n\t    // from\n\t    //\n\t    //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),\n\t    //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]\n\t    //\n\t    // In this case, (17,1,[5 $]) indicates there is some next sequence that\n\t    // would resolve this without conflict to alternative 1. Any other viable\n\t    // next sequence, however, is associated with a conflict.  We stop\n\t    // looking for input because no amount of further lookahead will alter\n\t    // the fact that we should predict alternative 1.  We just can't say for\n\t    // sure that there is an ambiguity without looking further.\n\n\t    this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);\n\n\t    return predictedAlt;\n\t};\n\n\tParserATNSimulator.prototype.computeReachSet = function (closure, t, fullCtx) {\n\t    if (this.debug) {\n\t        console.log(\"in computeReachSet, starting closure: \" + closure);\n\t    }\n\t    if (this.mergeCache === null) {\n\t        this.mergeCache = new DoubleDict();\n\t    }\n\t    var intermediate = new ATNConfigSet(fullCtx);\n\n\t    // Configurations already in a rule stop state indicate reaching the end\n\t    // of the decision rule (local context) or end of the start rule (full\n\t    // context). Once reached, these configurations are never updated by a\n\t    // closure operation, so they are handled separately for the performance\n\t    // advantage of having a smaller intermediate set when calling closure.\n\t    //\n\t    // For full-context reach operations, separate handling is required to\n\t    // ensure that the alternative matching the longest overall sequence is\n\t    // chosen when multiple such configurations can match the input.\n\n\t    var skippedStopStates = null;\n\n\t    // First figure out where we can reach on input t\n\t    for (var i = 0; i < closure.items.length; i++) {\n\t        var c = closure.items[i];\n\t        if (this.debug_add) {\n\t            console.log(\"testing \" + this.getTokenName(t) + \" at \" + c);\n\t        }\n\t        if (c.state instanceof RuleStopState) {\n\t            if (fullCtx || t === Token.EOF) {\n\t                if (skippedStopStates === null) {\n\t                    skippedStopStates = [];\n\t                }\n\t                skippedStopStates.push(c);\n\t                if (this.debug_add) {\n\t                    console.log(\"added \" + c + \" to skippedStopStates\");\n\t                }\n\t            }\n\t            continue;\n\t        }\n\t        for (var j = 0; j < c.state.transitions.length; j++) {\n\t            var trans = c.state.transitions[j];\n\t            var target = this.getReachableTarget(trans, t);\n\t            if (target !== null) {\n\t                var cfg = new ATNConfig({ state: target }, c);\n\t                intermediate.add(cfg, this.mergeCache);\n\t                if (this.debug_add) {\n\t                    console.log(\"added \" + cfg + \" to intermediate\");\n\t                }\n\t            }\n\t        }\n\t    }\n\t    // Now figure out where the reach operation can take us...\n\t    var reach = null;\n\n\t    // This block optimizes the reach operation for intermediate sets which\n\t    // trivially indicate a termination state for the overall\n\t    // adaptivePredict operation.\n\t    //\n\t    // The conditions assume that intermediate\n\t    // contains all configurations relevant to the reach set, but this\n\t    // condition is not true when one or more configurations have been\n\t    // withheld in skippedStopStates, or when the current symbol is EOF.\n\t    //\n\t    if (skippedStopStates === null && t !== Token.EOF) {\n\t        if (intermediate.items.length === 1) {\n\t            // Don't pursue the closure if there is just one state.\n\t            // It can only have one alternative; just add to result\n\t            // Also don't pursue the closure if there is unique alternative\n\t            // among the configurations.\n\t            reach = intermediate;\n\t        } else if (this.getUniqueAlt(intermediate) !== ATN.INVALID_ALT_NUMBER) {\n\t            // Also don't pursue the closure if there is unique alternative\n\t            // among the configurations.\n\t            reach = intermediate;\n\t        }\n\t    }\n\t    // If the reach set could not be trivially determined, perform a closure\n\t    // operation on the intermediate set to compute its initial value.\n\t    //\n\t    if (reach === null) {\n\t        reach = new ATNConfigSet(fullCtx);\n\t        var closureBusy = new Set();\n\t        var treatEofAsEpsilon = t === Token.EOF;\n\t        for (var k = 0; k < intermediate.items.length; k++) {\n\t            this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);\n\t        }\n\t    }\n\t    if (t === Token.EOF) {\n\t        // After consuming EOF no additional input is possible, so we are\n\t        // only interested in configurations which reached the end of the\n\t        // decision rule (local context) or end of the start rule (full\n\t        // context). Update reach to contain only these configurations. This\n\t        // handles both explicit EOF transitions in the grammar and implicit\n\t        // EOF transitions following the end of the decision or start rule.\n\t        //\n\t        // When reach==intermediate, no closure operation was performed. In\n\t        // this case, removeAllConfigsNotInRuleStopState needs to check for\n\t        // reachable rule stop states as well as configurations already in\n\t        // a rule stop state.\n\t        //\n\t        // This is handled before the configurations in skippedStopStates,\n\t        // because any configurations potentially added from that list are\n\t        // already guaranteed to meet this condition whether or not it's\n\t        // required.\n\t        //\n\t        reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);\n\t    }\n\t    // If skippedStopStates!==null, then it contains at least one\n\t    // configuration. For full-context reach operations, these\n\t    // configurations reached the end of the start rule, in which case we\n\t    // only add them back to reach if no configuration during the current\n\t    // closure operation reached such a state. This ensures adaptivePredict\n\t    // chooses an alternative matching the longest overall sequence when\n\t    // multiple alternatives are viable.\n\t    //\n\t    if (skippedStopStates !== null && (!fullCtx || !PredictionMode.hasConfigInRuleStopState(reach))) {\n\t        for (var l = 0; l < skippedStopStates.length; l++) {\n\t            reach.add(skippedStopStates[l], this.mergeCache);\n\t        }\n\t    }\n\t    if (reach.items.length === 0) {\n\t        return null;\n\t    } else {\n\t        return reach;\n\t    }\n\t};\n\t//\n\t// Return a configuration set containing only the configurations from\n\t// {@code configs} which are in a {@link RuleStopState}. If all\n\t// configurations in {@code configs} are already in a rule stop state, this\n\t// method simply returns {@code configs}.\n\t//\n\t// <p>When {@code lookToEndOfRule} is true, this method uses\n\t// {@link ATN//nextTokens} for each configuration in {@code configs} which is\n\t// not already in a rule stop state to see if a rule stop state is reachable\n\t// from the configuration via epsilon-only transitions.</p>\n\t//\n\t// @param configs the configuration set to update\n\t// @param lookToEndOfRule when true, this method checks for rule stop states\n\t// reachable by epsilon-only transitions from each configuration in\n\t// {@code configs}.\n\t//\n\t// @return {@code configs} if all configurations in {@code configs} are in a\n\t// rule stop state, otherwise return a new configuration set containing only\n\t// the configurations from {@code configs} which are in a rule stop state\n\t//\n\tParserATNSimulator.prototype.removeAllConfigsNotInRuleStopState = function (configs, lookToEndOfRule) {\n\t    if (PredictionMode.allConfigsInRuleStopStates(configs)) {\n\t        return configs;\n\t    }\n\t    var result = new ATNConfigSet(configs.fullCtx);\n\t    for (var i = 0; i < configs.items.length; i++) {\n\t        var config = configs.items[i];\n\t        if (config.state instanceof RuleStopState) {\n\t            result.add(config, this.mergeCache);\n\t            continue;\n\t        }\n\t        if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {\n\t            var nextTokens = this.atn.nextTokens(config.state);\n\t            if (nextTokens.contains(Token.EPSILON)) {\n\t                var endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];\n\t                result.add(new ATNConfig({ state: endOfRuleState }, config), this.mergeCache);\n\t            }\n\t        }\n\t    }\n\t    return result;\n\t};\n\n\tParserATNSimulator.prototype.computeStartState = function (p, ctx, fullCtx) {\n\t    // always at least the implicit call to start rule\n\t    var initialContext = predictionContextFromRuleContext(this.atn, ctx);\n\t    var configs = new ATNConfigSet(fullCtx);\n\t    for (var i = 0; i < p.transitions.length; i++) {\n\t        var target = p.transitions[i].target;\n\t        var c = new ATNConfig({ state: target, alt: i + 1, context: initialContext }, null);\n\t        var closureBusy = new Set();\n\t        this.closure(c, configs, closureBusy, true, fullCtx, false);\n\t    }\n\t    return configs;\n\t};\n\n\t//\n\t// This method transforms the start state computed by\n\t// {@link //computeStartState} to the special start state used by a\n\t// precedence DFA for a particular precedence value. The transformation\n\t// process applies the following changes to the start state's configuration\n\t// set.\n\t//\n\t// <ol>\n\t// <li>Evaluate the precedence predicates for each configuration using\n\t// {@link SemanticContext//evalPrecedence}.</li>\n\t// <li>Remove all configurations which predict an alternative greater than\n\t// 1, for which another configuration that predicts alternative 1 is in the\n\t// same ATN state with the same prediction context. This transformation is\n\t// valid for the following reasons:\n\t// <ul>\n\t// <li>The closure block cannot contain any epsilon transitions which bypass\n\t// the body of the closure, so all states reachable via alternative 1 are\n\t// part of the precedence alternatives of the transformed left-recursive\n\t// rule.</li>\n\t// <li>The \"primary\" portion of a left recursive rule cannot contain an\n\t// epsilon transition, so the only way an alternative other than 1 can exist\n\t// in a state that is also reachable via alternative 1 is by nesting calls\n\t// to the left-recursive rule, with the outer calls not being at the\n\t// preferred precedence level.</li>\n\t// </ul>\n\t// </li>\n\t// </ol>\n\t//\n\t// <p>\n\t// The prediction context must be considered by this filter to address\n\t// situations like the following.\n\t// </p>\n\t// <code>\n\t// <pre>\n\t// grammar TA;\n\t// prog: statement* EOF;\n\t// statement: letterA | statement letterA 'b' ;\n\t// letterA: 'a';\n\t// </pre>\n\t// </code>\n\t// <p>\n\t// If the above grammar, the ATN state immediately before the token\n\t// reference {@code 'a'} in {@code letterA} is reachable from the left edge\n\t// of both the primary and closure blocks of the left-recursive rule\n\t// {@code statement}. The prediction context associated with each of these\n\t// configurations distinguishes between them, and prevents the alternative\n\t// which stepped out to {@code prog} (and then back in to {@code statement}\n\t// from being eliminated by the filter.\n\t// </p>\n\t//\n\t// @param configs The configuration set computed by\n\t// {@link //computeStartState} as the start state for the DFA.\n\t// @return The transformed configuration set representing the start state\n\t// for a precedence DFA at a particular precedence level (determined by\n\t// calling {@link Parser//getPrecedence}).\n\t//\n\tParserATNSimulator.prototype.applyPrecedenceFilter = function (configs) {\n\t    var config;\n\t    var statesFromAlt1 = [];\n\t    var configSet = new ATNConfigSet(configs.fullCtx);\n\t    for (var i = 0; i < configs.items.length; i++) {\n\t        config = configs.items[i];\n\t        // handle alt 1 first\n\t        if (config.alt !== 1) {\n\t            continue;\n\t        }\n\t        var updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);\n\t        if (updatedContext === null) {\n\t            // the configuration was eliminated\n\t            continue;\n\t        }\n\t        statesFromAlt1[config.state.stateNumber] = config.context;\n\t        if (updatedContext !== config.semanticContext) {\n\t            configSet.add(new ATNConfig({ semanticContext: updatedContext }, config), this.mergeCache);\n\t        } else {\n\t            configSet.add(config, this.mergeCache);\n\t        }\n\t    }\n\t    for (i = 0; i < configs.items.length; i++) {\n\t        config = configs.items[i];\n\t        if (config.alt === 1) {\n\t            // already handled\n\t            continue;\n\t        }\n\t        // In the future, this elimination step could be updated to also\n\t        // filter the prediction context for alternatives predicting alt>1\n\t        // (basically a graph subtraction algorithm).\n\t        if (!config.precedenceFilterSuppressed) {\n\t            var context = statesFromAlt1[config.state.stateNumber] || null;\n\t            if (context !== null && context.equals(config.context)) {\n\t                // eliminated\n\t                continue;\n\t            }\n\t        }\n\t        configSet.add(config, this.mergeCache);\n\t    }\n\t    return configSet;\n\t};\n\n\tParserATNSimulator.prototype.getReachableTarget = function (trans, ttype) {\n\t    if (trans.matches(ttype, 0, this.atn.maxTokenType)) {\n\t        return trans.target;\n\t    } else {\n\t        return null;\n\t    }\n\t};\n\n\tParserATNSimulator.prototype.getPredsForAmbigAlts = function (ambigAlts, configs, nalts) {\n\t    // REACH=[1|1|[]|0:0, 1|2|[]|0:1]\n\t    // altToPred starts as an array of all null contexts. The entry at index i\n\t    // corresponds to alternative i. altToPred[i] may have one of three values:\n\t    //   1. null: no ATNConfig c is found such that c.alt==i\n\t    //   2. SemanticContext.NONE: At least one ATNConfig c exists such that\n\t    //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,\n\t    //      alt i has at least one unpredicated config.\n\t    //   3. Non-NONE Semantic Context: There exists at least one, and for all\n\t    //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.\n\t    //\n\t    // From this, it is clear that NONE||anything==NONE.\n\t    //\n\t    var altToPred = [];\n\t    for (var i = 0; i < configs.items.length; i++) {\n\t        var c = configs.items[i];\n\t        if (ambigAlts.contains(c.alt)) {\n\t            altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);\n\t        }\n\t    }\n\t    var nPredAlts = 0;\n\t    for (i = 1; i < nalts + 1; i++) {\n\t        var pred = altToPred[i] || null;\n\t        if (pred === null) {\n\t            altToPred[i] = SemanticContext.NONE;\n\t        } else if (pred !== SemanticContext.NONE) {\n\t            nPredAlts += 1;\n\t        }\n\t    }\n\t    // nonambig alts are null in altToPred\n\t    if (nPredAlts === 0) {\n\t        altToPred = null;\n\t    }\n\t    if (this.debug) {\n\t        console.log(\"getPredsForAmbigAlts result \" + Utils.arrayToString(altToPred));\n\t    }\n\t    return altToPred;\n\t};\n\n\tParserATNSimulator.prototype.getPredicatePredictions = function (ambigAlts, altToPred) {\n\t    var pairs = [];\n\t    var containsPredicate = false;\n\t    for (var i = 1; i < altToPred.length; i++) {\n\t        var pred = altToPred[i];\n\t        // unpredicated is indicated by SemanticContext.NONE\n\t        if (ambigAlts !== null && ambigAlts.contains(i)) {\n\t            pairs.push(new PredPrediction(pred, i));\n\t        }\n\t        if (pred !== SemanticContext.NONE) {\n\t            containsPredicate = true;\n\t        }\n\t    }\n\t    if (!containsPredicate) {\n\t        return null;\n\t    }\n\t    return pairs;\n\t};\n\n\t//\n\t// This method is used to improve the localization of error messages by\n\t// choosing an alternative rather than throwing a\n\t// {@link NoViableAltException} in particular prediction scenarios where the\n\t// {@link //ERROR} state was reached during ATN simulation.\n\t//\n\t// <p>\n\t// The default implementation of this method uses the following\n\t// algorithm to identify an ATN configuration which successfully parsed the\n\t// decision entry rule. Choosing such an alternative ensures that the\n\t// {@link ParserRuleContext} returned by the calling rule will be complete\n\t// and valid, and the syntax error will be reported later at a more\n\t// localized location.</p>\n\t//\n\t// <ul>\n\t// <li>If a syntactically valid path or paths reach the end of the decision rule and\n\t// they are semantically valid if predicated, return the min associated alt.</li>\n\t// <li>Else, if a semantically invalid but syntactically valid path exist\n\t// or paths exist, return the minimum associated alt.\n\t// </li>\n\t// <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>\n\t// </ul>\n\t//\n\t// <p>\n\t// In some scenarios, the algorithm described above could predict an\n\t// alternative which will result in a {@link FailedPredicateException} in\n\t// the parser. Specifically, this could occur if the <em>only</em> configuration\n\t// capable of successfully parsing to the end of the decision rule is\n\t// blocked by a semantic predicate. By choosing this alternative within\n\t// {@link //adaptivePredict} instead of throwing a\n\t// {@link NoViableAltException}, the resulting\n\t// {@link FailedPredicateException} in the parser will identify the specific\n\t// predicate which is preventing the parser from successfully parsing the\n\t// decision rule, which helps developers identify and correct logic errors\n\t// in semantic predicates.\n\t// </p>\n\t//\n\t// @param configs The ATN configurations which were valid immediately before\n\t// the {@link //ERROR} state was reached\n\t// @param outerContext The is the \\gamma_0 initial parser context from the paper\n\t// or the parser stack at the instant before prediction commences.\n\t//\n\t// @return The value to return from {@link //adaptivePredict}, or\n\t// {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not\n\t// identified and {@link //adaptivePredict} should report an error instead.\n\t//\n\tParserATNSimulator.prototype.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule = function (configs, outerContext) {\n\t    var cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);\n\t    var semValidConfigs = cfgs[0];\n\t    var semInvalidConfigs = cfgs[1];\n\t    var alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);\n\t    if (alt !== ATN.INVALID_ALT_NUMBER) {\n\t        // semantically/syntactically viable path exists\n\t        return alt;\n\t    }\n\t    // Is there a syntactically valid path with a failed pred?\n\t    if (semInvalidConfigs.items.length > 0) {\n\t        alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);\n\t        if (alt !== ATN.INVALID_ALT_NUMBER) {\n\t            // syntactically viable path exists\n\t            return alt;\n\t        }\n\t    }\n\t    return ATN.INVALID_ALT_NUMBER;\n\t};\n\n\tParserATNSimulator.prototype.getAltThatFinishedDecisionEntryRule = function (configs) {\n\t    var alts = [];\n\t    for (var i = 0; i < configs.items.length; i++) {\n\t        var c = configs.items[i];\n\t        if (c.reachesIntoOuterContext > 0 || c.state instanceof RuleStopState && c.context.hasEmptyPath()) {\n\t            if (alts.indexOf(c.alt) < 0) {\n\t                alts.push(c.alt);\n\t            }\n\t        }\n\t    }\n\t    if (alts.length === 0) {\n\t        return ATN.INVALID_ALT_NUMBER;\n\t    } else {\n\t        return Math.min.apply(null, alts);\n\t    }\n\t};\n\t// Walk the list of configurations and split them according to\n\t//  those that have preds evaluating to true/false.  If no pred, assume\n\t//  true pred and include in succeeded set.  Returns Pair of sets.\n\t//\n\t//  Create a new set so as not to alter the incoming parameter.\n\t//\n\t//  Assumption: the input stream has been restored to the starting point\n\t//  prediction, which is where predicates need to evaluate.\n\t//\n\tParserATNSimulator.prototype.splitAccordingToSemanticValidity = function (configs, outerContext) {\n\t    var succeeded = new ATNConfigSet(configs.fullCtx);\n\t    var failed = new ATNConfigSet(configs.fullCtx);\n\t    for (var i = 0; i < configs.items.length; i++) {\n\t        var c = configs.items[i];\n\t        if (c.semanticContext !== SemanticContext.NONE) {\n\t            var predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);\n\t            if (predicateEvaluationResult) {\n\t                succeeded.add(c);\n\t            } else {\n\t                failed.add(c);\n\t            }\n\t        } else {\n\t            succeeded.add(c);\n\t        }\n\t    }\n\t    return [succeeded, failed];\n\t};\n\n\t// Look through a list of predicate/alt pairs, returning alts for the\n\t//  pairs that win. A {@code NONE} predicate indicates an alt containing an\n\t//  unpredicated config which behaves as \"always true.\" If !complete\n\t//  then we stop at the first predicate that evaluates to true. This\n\t//  includes pairs with null predicates.\n\t//\n\tParserATNSimulator.prototype.evalSemanticContext = function (predPredictions, outerContext, complete) {\n\t    var predictions = new BitSet();\n\t    for (var i = 0; i < predPredictions.length; i++) {\n\t        var pair = predPredictions[i];\n\t        if (pair.pred === SemanticContext.NONE) {\n\t            predictions.add(pair.alt);\n\t            if (!complete) {\n\t                break;\n\t            }\n\t            continue;\n\t        }\n\t        var predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);\n\t        if (this.debug || this.dfa_debug) {\n\t            console.log(\"eval pred \" + pair + \"=\" + predicateEvaluationResult);\n\t        }\n\t        if (predicateEvaluationResult) {\n\t            if (this.debug || this.dfa_debug) {\n\t                console.log(\"PREDICT \" + pair.alt);\n\t            }\n\t            predictions.add(pair.alt);\n\t            if (!complete) {\n\t                break;\n\t            }\n\t        }\n\t    }\n\t    return predictions;\n\t};\n\n\t// TODO: If we are doing predicates, there is no point in pursuing\n\t//     closure operations if we reach a DFA state that uniquely predicts\n\t//     alternative. We will not be caching that DFA state and it is a\n\t//     waste to pursue the closure. Might have to advance when we do\n\t//     ambig detection thought :(\n\t//\n\n\tParserATNSimulator.prototype.closure = function (config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {\n\t    var initialDepth = 0;\n\t    this.closureCheckingStopState(config, configs, closureBusy, collectPredicates, fullCtx, initialDepth, treatEofAsEpsilon);\n\t};\n\n\tParserATNSimulator.prototype.closureCheckingStopState = function (config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {\n\t    if (this.debug || this.debug_closure) {\n\t        console.log(\"closure(\" + config.toString(this.parser, true) + \")\");\n\t        // console.log(\"configs(\" + configs.toString() + \")\");\n\t        if (config.reachesIntoOuterContext > 50) {\n\t            throw \"problem\";\n\t        }\n\t    }\n\t    if (config.state instanceof RuleStopState) {\n\t        // We hit rule end. If we have context info, use it\n\t        // run thru all possible stack tops in ctx\n\t        if (!config.context.isEmpty()) {\n\t            for (var i = 0; i < config.context.length; i++) {\n\t                if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {\n\t                    if (fullCtx) {\n\t                        configs.add(new ATNConfig({ state: config.state, context: PredictionContext.EMPTY }, config), this.mergeCache);\n\t                        continue;\n\t                    } else {\n\t                        // we have no context info, just chase follow links (if greedy)\n\t                        if (this.debug) {\n\t                            console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n\t                        }\n\t                        this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);\n\t                    }\n\t                    continue;\n\t                }\n\t                var returnState = this.atn.states[config.context.getReturnState(i)];\n\t                var newContext = config.context.getParent(i); // \"pop\" return state\n\t                var parms = { state: returnState, alt: config.alt, context: newContext, semanticContext: config.semanticContext };\n\t                var c = new ATNConfig(parms, null);\n\t                // While we have context to pop back from, we may have\n\t                // gotten that context AFTER having falling off a rule.\n\t                // Make sure we track that we are now out of context.\n\t                c.reachesIntoOuterContext = config.reachesIntoOuterContext;\n\t                this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);\n\t            }\n\t            return;\n\t        } else if (fullCtx) {\n\t            // reached end of start rule\n\t            configs.add(config, this.mergeCache);\n\t            return;\n\t        } else {\n\t            // else if we have no context info, just chase follow links (if greedy)\n\t            if (this.debug) {\n\t                console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n\t            }\n\t        }\n\t    }\n\t    this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);\n\t};\n\n\t// Do the actual work of walking epsilon edges//\n\tParserATNSimulator.prototype.closure_ = function (config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {\n\t    var p = config.state;\n\t    // optimization\n\t    if (!p.epsilonOnlyTransitions) {\n\t        configs.add(config, this.mergeCache);\n\t        // make sure to not return here, because EOF transitions can act as\n\t        // both epsilon transitions and non-epsilon transitions.\n\t    }\n\t    for (var i = 0; i < p.transitions.length; i++) {\n\t        if (i == 0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config)) continue;\n\n\t        var t = p.transitions[i];\n\t        var continueCollecting = collectPredicates && !(t instanceof ActionTransition);\n\t        var c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);\n\t        if (c !== null) {\n\t            if (!t.isEpsilon && closureBusy.add(c) !== c) {\n\t                // avoid infinite recursion for EOF* and EOF+\n\t                continue;\n\t            }\n\t            var newDepth = depth;\n\t            if (config.state instanceof RuleStopState) {\n\t                // target fell off end of rule; mark resulting c as having dipped into outer context\n\t                // We can't get here if incoming config was rule stop and we had context\n\t                // track how far we dip into outer context.  Might\n\t                // come in handy and we avoid evaluating context dependent\n\t                // preds if this is > 0.\n\n\t                if (closureBusy.add(c) !== c) {\n\t                    // avoid infinite recursion for right-recursive rules\n\t                    continue;\n\t                }\n\n\t                if (this._dfa !== null && this._dfa.precedenceDfa) {\n\t                    if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {\n\t                        c.precedenceFilterSuppressed = true;\n\t                    }\n\t                }\n\n\t                c.reachesIntoOuterContext += 1;\n\t                configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method\n\t                newDepth -= 1;\n\t                if (this.debug) {\n\t                    console.log(\"dips into outer ctx: \" + c);\n\t                }\n\t            } else if (t instanceof RuleTransition) {\n\t                // latch when newDepth goes negative - once we step out of the entry context we can't return\n\t                if (newDepth >= 0) {\n\t                    newDepth += 1;\n\t                }\n\t            }\n\t            this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);\n\t        }\n\t    }\n\t};\n\n\tParserATNSimulator.prototype.canDropLoopEntryEdgeInLeftRecursiveRule = function (config) {\n\t    // return False\n\t    var p = config.state;\n\t    // First check to see if we are in StarLoopEntryState generated during\n\t    // left-recursion elimination. For efficiency, also check if\n\t    // the context has an empty stack case. If so, it would mean\n\t    // global FOLLOW so we can't perform optimization\n\t    // Are we the special loop entry/exit state? or SLL wildcard\n\t    if (p.stateType != ATNState.STAR_LOOP_ENTRY) return false;\n\t    if (p.stateType != ATNState.STAR_LOOP_ENTRY || !p.isPrecedenceDecision || config.context.isEmpty() || config.context.hasEmptyPath()) return false;\n\n\t    // Require all return states to return back to the same rule that p is in.\n\t    var numCtxs = config.context.length;\n\t    for (var i = 0; i < numCtxs; i++) {\n\t        // for each stack context\n\t        var returnState = this.atn.states[config.context.getReturnState(i)];\n\t        if (returnState.ruleIndex != p.ruleIndex) return false;\n\t    }\n\n\t    var decisionStartState = p.transitions[0].target;\n\t    var blockEndStateNum = decisionStartState.endState.stateNumber;\n\t    var blockEndState = this.atn.states[blockEndStateNum];\n\n\t    // Verify that the top of each stack context leads to loop entry/exit\n\t    // state through epsilon edges and w/o leaving rule.\n\t    for (var i = 0; i < numCtxs; i++) {\n\t        // for each stack context\n\t        var returnStateNumber = config.context.getReturnState(i);\n\t        var returnState = this.atn.states[returnStateNumber];\n\t        // all states must have single outgoing epsilon edge\n\t        if (returnState.transitions.length != 1 || !returnState.transitions[0].isEpsilon) return false;\n\n\t        // Look for prefix op case like 'not expr', (' type ')' expr\n\t        var returnStateTarget = returnState.transitions[0].target;\n\t        if (returnState.stateType == ATNState.BLOCK_END && returnStateTarget == p) continue;\n\n\t        // Look for 'expr op expr' or case where expr's return state is block end\n\t        // of (...)* internal block; the block end points to loop back\n\t        // which points to p but we don't need to check that\n\t        if (returnState == blockEndState) continue;\n\n\t        // Look for ternary expr ? expr : expr. The return state points at block end,\n\t        // which points at loop entry state\n\t        if (returnStateTarget == blockEndState) continue;\n\n\t        // Look for complex prefix 'between expr and expr' case where 2nd expr's\n\t        // return state points at block end state of (...)* internal block\n\t        if (returnStateTarget.stateType == ATNState.BLOCK_END && returnStateTarget.transitions.length == 1 && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target == p) continue;\n\n\t        // anything else ain't conforming\n\t        return false;\n\t    }\n\t    return true;\n\t};\n\n\tParserATNSimulator.prototype.getRuleName = function (index) {\n\t    if (this.parser !== null && index >= 0) {\n\t        return this.parser.ruleNames[index];\n\t    } else {\n\t        return \"<rule \" + index + \">\";\n\t    }\n\t};\n\n\tParserATNSimulator.prototype.getEpsilonTarget = function (config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {\n\t    switch (t.serializationType) {\n\t        case Transition.RULE:\n\t            return this.ruleTransition(config, t);\n\t        case Transition.PRECEDENCE:\n\t            return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);\n\t        case Transition.PREDICATE:\n\t            return this.predTransition(config, t, collectPredicates, inContext, fullCtx);\n\t        case Transition.ACTION:\n\t            return this.actionTransition(config, t);\n\t        case Transition.EPSILON:\n\t            return new ATNConfig({ state: t.target }, config);\n\t        case Transition.ATOM:\n\t        case Transition.RANGE:\n\t        case Transition.SET:\n\t            // EOF transitions act like epsilon transitions after the first EOF\n\t            // transition is traversed\n\t            if (treatEofAsEpsilon) {\n\t                if (t.matches(Token.EOF, 0, 1)) {\n\t                    return new ATNConfig({ state: t.target }, config);\n\t                }\n\t            }\n\t            return null;\n\t        default:\n\t            return null;\n\t    }\n\t};\n\n\tParserATNSimulator.prototype.actionTransition = function (config, t) {\n\t    if (this.debug) {\n\t        var index = t.actionIndex == -1 ? 65535 : t.actionIndex;\n\t        console.log(\"ACTION edge \" + t.ruleIndex + \":\" + index);\n\t    }\n\t    return new ATNConfig({ state: t.target }, config);\n\t};\n\n\tParserATNSimulator.prototype.precedenceTransition = function (config, pt, collectPredicates, inContext, fullCtx) {\n\t    if (this.debug) {\n\t        console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" + pt.precedence + \">=_p, ctx dependent=true\");\n\t        if (this.parser !== null) {\n\t            console.log(\"context surrounding pred is \" + Utils.arrayToString(this.parser.getRuleInvocationStack()));\n\t        }\n\t    }\n\t    var c = null;\n\t    if (collectPredicates && inContext) {\n\t        if (fullCtx) {\n\t            // In full context mode, we can evaluate predicates on-the-fly\n\t            // during closure, which dramatically reduces the size of\n\t            // the config sets. It also obviates the need to test predicates\n\t            // later during conflict resolution.\n\t            var currentPosition = this._input.index;\n\t            this._input.seek(this._startIndex);\n\t            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);\n\t            this._input.seek(currentPosition);\n\t            if (predSucceeds) {\n\t                c = new ATNConfig({ state: pt.target }, config); // no pred context\n\t            }\n\t        } else {\n\t            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());\n\t            c = new ATNConfig({ state: pt.target, semanticContext: newSemCtx }, config);\n\t        }\n\t    } else {\n\t        c = new ATNConfig({ state: pt.target }, config);\n\t    }\n\t    if (this.debug) {\n\t        console.log(\"config from pred transition=\" + c);\n\t    }\n\t    return c;\n\t};\n\n\tParserATNSimulator.prototype.predTransition = function (config, pt, collectPredicates, inContext, fullCtx) {\n\t    if (this.debug) {\n\t        console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" + pt.ruleIndex + \":\" + pt.predIndex + \", ctx dependent=\" + pt.isCtxDependent);\n\t        if (this.parser !== null) {\n\t            console.log(\"context surrounding pred is \" + Utils.arrayToString(this.parser.getRuleInvocationStack()));\n\t        }\n\t    }\n\t    var c = null;\n\t    if (collectPredicates && (pt.isCtxDependent && inContext || !pt.isCtxDependent)) {\n\t        if (fullCtx) {\n\t            // In full context mode, we can evaluate predicates on-the-fly\n\t            // during closure, which dramatically reduces the size of\n\t            // the config sets. It also obviates the need to test predicates\n\t            // later during conflict resolution.\n\t            var currentPosition = this._input.index;\n\t            this._input.seek(this._startIndex);\n\t            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);\n\t            this._input.seek(currentPosition);\n\t            if (predSucceeds) {\n\t                c = new ATNConfig({ state: pt.target }, config); // no pred context\n\t            }\n\t        } else {\n\t            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());\n\t            c = new ATNConfig({ state: pt.target, semanticContext: newSemCtx }, config);\n\t        }\n\t    } else {\n\t        c = new ATNConfig({ state: pt.target }, config);\n\t    }\n\t    if (this.debug) {\n\t        console.log(\"config from pred transition=\" + c);\n\t    }\n\t    return c;\n\t};\n\n\tParserATNSimulator.prototype.ruleTransition = function (config, t) {\n\t    if (this.debug) {\n\t        console.log(\"CALL rule \" + this.getRuleName(t.target.ruleIndex) + \", ctx=\" + config.context);\n\t    }\n\t    var returnState = t.followState;\n\t    var newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);\n\t    return new ATNConfig({ state: t.target, context: newContext }, config);\n\t};\n\n\tParserATNSimulator.prototype.getConflictingAlts = function (configs) {\n\t    var altsets = PredictionMode.getConflictingAltSubsets(configs);\n\t    return PredictionMode.getAlts(altsets);\n\t};\n\n\t// Sam pointed out a problem with the previous definition, v3, of\n\t// ambiguous states. If we have another state associated with conflicting\n\t// alternatives, we should keep going. For example, the following grammar\n\t//\n\t// s : (ID | ID ID?) ';' ;\n\t//\n\t// When the ATN simulation reaches the state before ';', it has a DFA\n\t// state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally\n\t// 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node\n\t// because alternative to has another way to continue, via [6|2|[]].\n\t// The key is that we have a single state that has config's only associated\n\t// with a single alternative, 2, and crucially the state transitions\n\t// among the configurations are all non-epsilon transitions. That means\n\t// we don't consider any conflicts that include alternative 2. So, we\n\t// ignore the conflict between alts 1 and 2. We ignore a set of\n\t// conflicting alts when there is an intersection with an alternative\n\t// associated with a single alt state in the state&rarr;config-list map.\n\t//\n\t// It's also the case that we might have two conflicting configurations but\n\t// also a 3rd nonconflicting configuration for a different alternative:\n\t// [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:\n\t//\n\t// a : A | A | A B ;\n\t//\n\t// After matching input A, we reach the stop state for rule A, state 1.\n\t// State 8 is the state right before B. Clearly alternatives 1 and 2\n\t// conflict and no amount of further lookahead will separate the two.\n\t// However, alternative 3 will be able to continue and so we do not\n\t// stop working on this state. In the previous example, we're concerned\n\t// with states associated with the conflicting alternatives. Here alt\n\t// 3 is not associated with the conflicting configs, but since we can continue\n\t// looking for input reasonably, I don't declare the state done. We\n\t// ignore a set of conflicting alts when we have an alternative\n\t// that we still need to pursue.\n\t//\n\n\tParserATNSimulator.prototype.getConflictingAltsOrUniqueAlt = function (configs) {\n\t    var conflictingAlts = null;\n\t    if (configs.uniqueAlt !== ATN.INVALID_ALT_NUMBER) {\n\t        conflictingAlts = new BitSet();\n\t        conflictingAlts.add(configs.uniqueAlt);\n\t    } else {\n\t        conflictingAlts = configs.conflictingAlts;\n\t    }\n\t    return conflictingAlts;\n\t};\n\n\tParserATNSimulator.prototype.getTokenName = function (t) {\n\t    if (t === Token.EOF) {\n\t        return \"EOF\";\n\t    }\n\t    if (this.parser !== null && this.parser.literalNames !== null) {\n\t        if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {\n\t            console.log(\"\" + t + \" ttype out of range: \" + this.parser.literalNames);\n\t            console.log(\"\" + this.parser.getInputStream().getTokens());\n\t        } else {\n\t            var name = this.parser.literalNames[t] || this.parser.symbolicNames[t];\n\t            return name + \"<\" + t + \">\";\n\t        }\n\t    }\n\t    return \"\" + t;\n\t};\n\n\tParserATNSimulator.prototype.getLookaheadName = function (input) {\n\t    return this.getTokenName(input.LA(1));\n\t};\n\n\t// Used for debugging in adaptivePredict around execATN but I cut\n\t//  it out for clarity now that alg. works well. We can leave this\n\t//  \"dead\" code for a bit.\n\t//\n\tParserATNSimulator.prototype.dumpDeadEndConfigs = function (nvae) {\n\t    console.log(\"dead end configs: \");\n\t    var decs = nvae.getDeadEndConfigs();\n\t    for (var i = 0; i < decs.length; i++) {\n\t        var c = decs[i];\n\t        var trans = \"no edges\";\n\t        if (c.state.transitions.length > 0) {\n\t            var t = c.state.transitions[0];\n\t            if (t instanceof AtomTransition) {\n\t                trans = \"Atom \" + this.getTokenName(t.label);\n\t            } else if (t instanceof SetTransition) {\n\t                var neg = t instanceof NotSetTransition;\n\t                trans = (neg ? \"~\" : \"\") + \"Set \" + t.set;\n\t            }\n\t        }\n\t        console.error(c.toString(this.parser, true) + \":\" + trans);\n\t    }\n\t};\n\n\tParserATNSimulator.prototype.noViableAlt = function (input, outerContext, configs, startIndex) {\n\t    return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);\n\t};\n\n\tParserATNSimulator.prototype.getUniqueAlt = function (configs) {\n\t    var alt = ATN.INVALID_ALT_NUMBER;\n\t    for (var i = 0; i < configs.items.length; i++) {\n\t        var c = configs.items[i];\n\t        if (alt === ATN.INVALID_ALT_NUMBER) {\n\t            alt = c.alt; // found first alt\n\t        } else if (c.alt !== alt) {\n\t            return ATN.INVALID_ALT_NUMBER;\n\t        }\n\t    }\n\t    return alt;\n\t};\n\n\t//\n\t// Add an edge to the DFA, if possible. This method calls\n\t// {@link //addDFAState} to ensure the {@code to} state is present in the\n\t// DFA. If {@code from} is {@code null}, or if {@code t} is outside the\n\t// range of edges that can be represented in the DFA tables, this method\n\t// returns without adding the edge to the DFA.\n\t//\n\t// <p>If {@code to} is {@code null}, this method returns {@code null}.\n\t// Otherwise, this method returns the {@link DFAState} returned by calling\n\t// {@link //addDFAState} for the {@code to} state.</p>\n\t//\n\t// @param dfa The DFA\n\t// @param from The source state for the edge\n\t// @param t The input symbol\n\t// @param to The target state for the edge\n\t//\n\t// @return If {@code to} is {@code null}, this method returns {@code null};\n\t// otherwise this method returns the result of calling {@link //addDFAState}\n\t// on {@code to}\n\t//\n\tParserATNSimulator.prototype.addDFAEdge = function (dfa, from_, t, to) {\n\t    if (this.debug) {\n\t        console.log(\"EDGE \" + from_ + \" -> \" + to + \" upon \" + this.getTokenName(t));\n\t    }\n\t    if (to === null) {\n\t        return null;\n\t    }\n\t    to = this.addDFAState(dfa, to); // used existing if possible not incoming\n\t    if (from_ === null || t < -1 || t > this.atn.maxTokenType) {\n\t        return to;\n\t    }\n\t    if (from_.edges === null) {\n\t        from_.edges = [];\n\t    }\n\t    from_.edges[t + 1] = to; // connect\n\n\t    if (this.debug) {\n\t        var literalNames = this.parser === null ? null : this.parser.literalNames;\n\t        var symbolicNames = this.parser === null ? null : this.parser.symbolicNames;\n\t        console.log(\"DFA=\\n\" + dfa.toString(literalNames, symbolicNames));\n\t    }\n\t    return to;\n\t};\n\t//\n\t// Add state {@code D} to the DFA if it is not already present, and return\n\t// the actual instance stored in the DFA. If a state equivalent to {@code D}\n\t// is already in the DFA, the existing state is returned. Otherwise this\n\t// method returns {@code D} after adding it to the DFA.\n\t//\n\t// <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and\n\t// does not change the DFA.</p>\n\t//\n\t// @param dfa The dfa\n\t// @param D The DFA state to add\n\t// @return The state stored in the DFA. This will be either the existing\n\t// state if {@code D} is already in the DFA, or {@code D} itself if the\n\t// state was not already present.\n\t//\n\tParserATNSimulator.prototype.addDFAState = function (dfa, D) {\n\t    if (D == ATNSimulator.ERROR) {\n\t        return D;\n\t    }\n\t    var existing = dfa.states.get(D);\n\t    if (existing !== null) {\n\t        return existing;\n\t    }\n\t    D.stateNumber = dfa.states.length;\n\t    if (!D.configs.readOnly) {\n\t        D.configs.optimizeConfigs(this);\n\t        D.configs.setReadonly(true);\n\t    }\n\t    dfa.states.add(D);\n\t    if (this.debug) {\n\t        console.log(\"adding new DFA state: \" + D);\n\t    }\n\t    return D;\n\t};\n\n\tParserATNSimulator.prototype.reportAttemptingFullContext = function (dfa, conflictingAlts, configs, startIndex, stopIndex) {\n\t    if (this.debug || this.retry_debug) {\n\t        var interval = new Interval(startIndex, stopIndex + 1);\n\t        console.log(\"reportAttemptingFullContext decision=\" + dfa.decision + \":\" + configs + \", input=\" + this.parser.getTokenStream().getText(interval));\n\t    }\n\t    if (this.parser !== null) {\n\t        this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);\n\t    }\n\t};\n\n\tParserATNSimulator.prototype.reportContextSensitivity = function (dfa, prediction, configs, startIndex, stopIndex) {\n\t    if (this.debug || this.retry_debug) {\n\t        var interval = new Interval(startIndex, stopIndex + 1);\n\t        console.log(\"reportContextSensitivity decision=\" + dfa.decision + \":\" + configs + \", input=\" + this.parser.getTokenStream().getText(interval));\n\t    }\n\t    if (this.parser !== null) {\n\t        this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);\n\t    }\n\t};\n\n\t// If context sensitive parsing, we know it's ambiguity not conflict//\n\tParserATNSimulator.prototype.reportAmbiguity = function (dfa, D, startIndex, stopIndex, exact, ambigAlts, configs) {\n\t    if (this.debug || this.retry_debug) {\n\t        var interval = new Interval(startIndex, stopIndex + 1);\n\t        console.log(\"reportAmbiguity \" + ambigAlts + \":\" + configs + \", input=\" + this.parser.getTokenStream().getText(interval));\n\t    }\n\t    if (this.parser !== null) {\n\t        this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);\n\t    }\n\t};\n\n\texports.ParserATNSimulator = ParserATNSimulator;\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t//\n\t//\n\t// This enumeration defines the prediction modes available in ANTLR 4 along with\n\t// utility methods for analyzing configuration sets for conflicts and/or\n\t// ambiguities.\n\n\tvar Set = __webpack_require__(5).Set;\n\tvar Map = __webpack_require__(5).Map;\n\tvar BitSet = __webpack_require__(5).BitSet;\n\tvar AltDict = __webpack_require__(5).AltDict;\n\tvar ATN = __webpack_require__(3).ATN;\n\tvar RuleStopState = __webpack_require__(8).RuleStopState;\n\tvar ATNConfigSet = __webpack_require__(29).ATNConfigSet;\n\tvar ATNConfig = __webpack_require__(7).ATNConfig;\n\tvar SemanticContext = __webpack_require__(9).SemanticContext;\n\tvar Hash = __webpack_require__(5).Hash;\n\tvar hashStuff = __webpack_require__(5).hashStuff;\n\tvar equalArrays = __webpack_require__(5).equalArrays;\n\n\tfunction PredictionMode() {\n\t    return this;\n\t}\n\n\t//\n\t// The SLL(*) prediction mode. This prediction mode ignores the current\n\t// parser context when making predictions. This is the fastest prediction\n\t// mode, and provides correct results for many grammars. This prediction\n\t// mode is more powerful than the prediction mode provided by ANTLR 3, but\n\t// may result in syntax errors for grammar and input combinations which are\n\t// not SLL.\n\t//\n\t// <p>\n\t// When using this prediction mode, the parser will either return a correct\n\t// parse tree (i.e. the same parse tree that would be returned with the\n\t// {@link //LL} prediction mode), or it will report a syntax error. If a\n\t// syntax error is encountered when using the {@link //SLL} prediction mode,\n\t// it may be due to either an actual syntax error in the input or indicate\n\t// that the particular combination of grammar and input requires the more\n\t// powerful {@link //LL} prediction abilities to complete successfully.</p>\n\t//\n\t// <p>\n\t// This prediction mode does not provide any guarantees for prediction\n\t// behavior for syntactically-incorrect inputs.</p>\n\t//\n\tPredictionMode.SLL = 0;\n\t//\n\t// The LL(*) prediction mode. This prediction mode allows the current parser\n\t// context to be used for resolving SLL conflicts that occur during\n\t// prediction. This is the fastest prediction mode that guarantees correct\n\t// parse results for all combinations of grammars with syntactically correct\n\t// inputs.\n\t//\n\t// <p>\n\t// When using this prediction mode, the parser will make correct decisions\n\t// for all syntactically-correct grammar and input combinations. However, in\n\t// cases where the grammar is truly ambiguous this prediction mode might not\n\t// report a precise answer for <em>exactly which</em> alternatives are\n\t// ambiguous.</p>\n\t//\n\t// <p>\n\t// This prediction mode does not provide any guarantees for prediction\n\t// behavior for syntactically-incorrect inputs.</p>\n\t//\n\tPredictionMode.LL = 1;\n\t//\n\t// The LL(*) prediction mode with exact ambiguity detection. In addition to\n\t// the correctness guarantees provided by the {@link //LL} prediction mode,\n\t// this prediction mode instructs the prediction algorithm to determine the\n\t// complete and exact set of ambiguous alternatives for every ambiguous\n\t// decision encountered while parsing.\n\t//\n\t// <p>\n\t// This prediction mode may be used for diagnosing ambiguities during\n\t// grammar development. Due to the performance overhead of calculating sets\n\t// of ambiguous alternatives, this prediction mode should be avoided when\n\t// the exact results are not necessary.</p>\n\t//\n\t// <p>\n\t// This prediction mode does not provide any guarantees for prediction\n\t// behavior for syntactically-incorrect inputs.</p>\n\t//\n\tPredictionMode.LL_EXACT_AMBIG_DETECTION = 2;\n\n\t//\n\t// Computes the SLL prediction termination condition.\n\t//\n\t// <p>\n\t// This method computes the SLL prediction termination condition for both of\n\t// the following cases.</p>\n\t//\n\t// <ul>\n\t// <li>The usual SLL+LL fallback upon SLL conflict</li>\n\t// <li>Pure SLL without LL fallback</li>\n\t// </ul>\n\t//\n\t// <p><strong>COMBINED SLL+LL PARSING</strong></p>\n\t//\n\t// <p>When LL-fallback is enabled upon SLL conflict, correct predictions are\n\t// ensured regardless of how the termination condition is computed by this\n\t// method. Due to the substantially higher cost of LL prediction, the\n\t// prediction should only fall back to LL when the additional lookahead\n\t// cannot lead to a unique SLL prediction.</p>\n\t//\n\t// <p>Assuming combined SLL+LL parsing, an SLL configuration set with only\n\t// conflicting subsets should fall back to full LL, even if the\n\t// configuration sets don't resolve to the same alternative (e.g.\n\t// {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting\n\t// configuration, SLL could continue with the hopes that more lookahead will\n\t// resolve via one of those non-conflicting configurations.</p>\n\t//\n\t// <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)\n\t// stops when it sees only conflicting configuration subsets. In contrast,\n\t// full LL keeps going when there is uncertainty.</p>\n\t//\n\t// <p><strong>HEURISTIC</strong></p>\n\t//\n\t// <p>As a heuristic, we stop prediction when we see any conflicting subset\n\t// unless we see a state that only has one alternative associated with it.\n\t// The single-alt-state thing lets prediction continue upon rules like\n\t// (otherwise, it would admit defeat too soon):</p>\n\t//\n\t// <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>\n\t//\n\t// <p>When the ATN simulation reaches the state before {@code ';'}, it has a\n\t// DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally\n\t// {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop\n\t// processing this node because alternative to has another way to continue,\n\t// via {@code [6|2|[]]}.</p>\n\t//\n\t// <p>It also let's us continue for this rule:</p>\n\t//\n\t// <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>\n\t//\n\t// <p>After matching input A, we reach the stop state for rule A, state 1.\n\t// State 8 is the state right before B. Clearly alternatives 1 and 2\n\t// conflict and no amount of further lookahead will separate the two.\n\t// However, alternative 3 will be able to continue and so we do not stop\n\t// working on this state. In the previous example, we're concerned with\n\t// states associated with the conflicting alternatives. Here alt 3 is not\n\t// associated with the conflicting configs, but since we can continue\n\t// looking for input reasonably, don't declare the state done.</p>\n\t//\n\t// <p><strong>PURE SLL PARSING</strong></p>\n\t//\n\t// <p>To handle pure SLL parsing, all we have to do is make sure that we\n\t// combine stack contexts for configurations that differ only by semantic\n\t// predicate. From there, we can do the usual SLL termination heuristic.</p>\n\t//\n\t// <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>\n\t//\n\t// <p>SLL decisions don't evaluate predicates until after they reach DFA stop\n\t// states because they need to create the DFA cache that works in all\n\t// semantic situations. In contrast, full LL evaluates predicates collected\n\t// during start state computation so it can ignore predicates thereafter.\n\t// This means that SLL termination detection can totally ignore semantic\n\t// predicates.</p>\n\t//\n\t// <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not\n\t// semantic predicate contexts so we might see two configurations like the\n\t// following.</p>\n\t//\n\t// <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>\n\t//\n\t// <p>Before testing these configurations against others, we have to merge\n\t// {@code x} and {@code x'} (without modifying the existing configurations).\n\t// For example, we test {@code (x+x')==x''} when looking for conflicts in\n\t// the following configurations.</p>\n\t//\n\t// <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>\n\t//\n\t// <p>If the configuration set has predicates (as indicated by\n\t// {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of\n\t// the configurations to strip out all of the predicates so that a standard\n\t// {@link ATNConfigSet} will merge everything ignoring predicates.</p>\n\t//\n\tPredictionMode.hasSLLConflictTerminatingPrediction = function (mode, configs) {\n\t    // Configs in rule stop states indicate reaching the end of the decision\n\t    // rule (local context) or end of start rule (full context). If all\n\t    // configs meet this condition, then none of the configurations is able\n\t    // to match additional input so we terminate prediction.\n\t    //\n\t    if (PredictionMode.allConfigsInRuleStopStates(configs)) {\n\t        return true;\n\t    }\n\t    // pure SLL mode parsing\n\t    if (mode === PredictionMode.SLL) {\n\t        // Don't bother with combining configs from different semantic\n\t        // contexts if we can fail over to full LL; costs more time\n\t        // since we'll often fail over anyway.\n\t        if (configs.hasSemanticContext) {\n\t            // dup configs, tossing out semantic predicates\n\t            var dup = new ATNConfigSet();\n\t            for (var i = 0; i < configs.items.length; i++) {\n\t                var c = configs.items[i];\n\t                c = new ATNConfig({ semanticContext: SemanticContext.NONE }, c);\n\t                dup.add(c);\n\t            }\n\t            configs = dup;\n\t        }\n\t        // now we have combined contexts for configs with dissimilar preds\n\t    }\n\t    // pure SLL or combined SLL+LL mode parsing\n\t    var altsets = PredictionMode.getConflictingAltSubsets(configs);\n\t    return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);\n\t};\n\n\t// Checks if any configuration in {@code configs} is in a\n\t// {@link RuleStopState}. Configurations meeting this condition have reached\n\t// the end of the decision rule (local context) or end of start rule (full\n\t// context).\n\t//\n\t// @param configs the configuration set to test\n\t// @return {@code true} if any configuration in {@code configs} is in a\n\t// {@link RuleStopState}, otherwise {@code false}\n\tPredictionMode.hasConfigInRuleStopState = function (configs) {\n\t    for (var i = 0; i < configs.items.length; i++) {\n\t        var c = configs.items[i];\n\t        if (c.state instanceof RuleStopState) {\n\t            return true;\n\t        }\n\t    }\n\t    return false;\n\t};\n\n\t// Checks if all configurations in {@code configs} are in a\n\t// {@link RuleStopState}. Configurations meeting this condition have reached\n\t// the end of the decision rule (local context) or end of start rule (full\n\t// context).\n\t//\n\t// @param configs the configuration set to test\n\t// @return {@code true} if all configurations in {@code configs} are in a\n\t// {@link RuleStopState}, otherwise {@code false}\n\tPredictionMode.allConfigsInRuleStopStates = function (configs) {\n\t    for (var i = 0; i < configs.items.length; i++) {\n\t        var c = configs.items[i];\n\t        if (!(c.state instanceof RuleStopState)) {\n\t            return false;\n\t        }\n\t    }\n\t    return true;\n\t};\n\n\t//\n\t// Full LL prediction termination.\n\t//\n\t// <p>Can we stop looking ahead during ATN simulation or is there some\n\t// uncertainty as to which alternative we will ultimately pick, after\n\t// consuming more input? Even if there are partial conflicts, we might know\n\t// that everything is going to resolve to the same minimum alternative. That\n\t// means we can stop since no more lookahead will change that fact. On the\n\t// other hand, there might be multiple conflicts that resolve to different\n\t// minimums. That means we need more look ahead to decide which of those\n\t// alternatives we should predict.</p>\n\t//\n\t// <p>The basic idea is to split the set of configurations {@code C}, into\n\t// conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with\n\t// non-conflicting configurations. Two configurations conflict if they have\n\t// identical {@link ATNConfig//state} and {@link ATNConfig//context} values\n\t// but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}\n\t// and {@code (s, j, ctx, _)} for {@code i!=j}.</p>\n\t//\n\t// <p>Reduce these configuration subsets to the set of possible alternatives.\n\t// You can compute the alternative subsets in one pass as follows:</p>\n\t//\n\t// <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in\n\t// {@code C} holding {@code s} and {@code ctx} fixed.</p>\n\t//\n\t// <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>\n\t//\n\t// <pre>\n\t// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not\n\t// alt and not pred\n\t// </pre>\n\t//\n\t// <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>\n\t//\n\t// <p>If {@code |A_s,ctx|=1} then there is no conflict associated with\n\t// {@code s} and {@code ctx}.</p>\n\t//\n\t// <p>Reduce the subsets to singletons by choosing a minimum of each subset. If\n\t// the union of these alternative subsets is a singleton, then no amount of\n\t// more lookahead will help us. We will always pick that alternative. If,\n\t// however, there is more than one alternative, then we are uncertain which\n\t// alternative to predict and must continue looking for resolution. We may\n\t// or may not discover an ambiguity in the future, even if there are no\n\t// conflicting subsets this round.</p>\n\t//\n\t// <p>The biggest sin is to terminate early because it means we've made a\n\t// decision but were uncertain as to the eventual outcome. We haven't used\n\t// enough lookahead. On the other hand, announcing a conflict too late is no\n\t// big deal; you will still have the conflict. It's just inefficient. It\n\t// might even look until the end of file.</p>\n\t//\n\t// <p>No special consideration for semantic predicates is required because\n\t// predicates are evaluated on-the-fly for full LL prediction, ensuring that\n\t// no configuration contains a semantic context during the termination\n\t// check.</p>\n\t//\n\t// <p><strong>CONFLICTING CONFIGS</strong></p>\n\t//\n\t// <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict\n\t// when {@code i!=j} but {@code x=x'}. Because we merge all\n\t// {@code (s, i, _)} configurations together, that means that there are at\n\t// most {@code n} configurations associated with state {@code s} for\n\t// {@code n} possible alternatives in the decision. The merged stacks\n\t// complicate the comparison of configuration contexts {@code x} and\n\t// {@code x'}. Sam checks to see if one is a subset of the other by calling\n\t// merge and checking to see if the merged result is either {@code x} or\n\t// {@code x'}. If the {@code x} associated with lowest alternative {@code i}\n\t// is the superset, then {@code i} is the only possible prediction since the\n\t// others resolve to {@code min(i)} as well. However, if {@code x} is\n\t// associated with {@code j>i} then at least one stack configuration for\n\t// {@code j} is not in conflict with alternative {@code i}. The algorithm\n\t// should keep going, looking for more lookahead due to the uncertainty.</p>\n\t//\n\t// <p>For simplicity, I'm doing a equality check between {@code x} and\n\t// {@code x'} that lets the algorithm continue to consume lookahead longer\n\t// than necessary. The reason I like the equality is of course the\n\t// simplicity but also because that is the test you need to detect the\n\t// alternatives that are actually in conflict.</p>\n\t//\n\t// <p><strong>CONTINUE/STOP RULE</strong></p>\n\t//\n\t// <p>Continue if union of resolved alternative sets from non-conflicting and\n\t// conflicting alternative subsets has more than one alternative. We are\n\t// uncertain about which alternative to predict.</p>\n\t//\n\t// <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which\n\t// alternatives are still in the running for the amount of input we've\n\t// consumed at this point. The conflicting sets let us to strip away\n\t// configurations that won't lead to more states because we resolve\n\t// conflicts to the configuration with a minimum alternate for the\n\t// conflicting set.</p>\n\t//\n\t// <p><strong>CASES</strong></p>\n\t//\n\t// <ul>\n\t//\n\t// <li>no conflicts and more than 1 alternative in set =&gt; continue</li>\n\t//\n\t// <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},\n\t// {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set\n\t// {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =\n\t// {@code {1,3}} =&gt; continue\n\t// </li>\n\t//\n\t// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},\n\t// {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set\n\t// {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =\n\t// {@code {1}} =&gt; stop and predict 1</li>\n\t//\n\t// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},\n\t// {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U\n\t// {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce\n\t// ambiguity {@code {1,2}}</li>\n\t//\n\t// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},\n\t// {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U\n\t// {@code {2}} = {@code {1,2}} =&gt; continue</li>\n\t//\n\t// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},\n\t// {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U\n\t// {@code {3}} = {@code {1,3}} =&gt; continue</li>\n\t//\n\t// </ul>\n\t//\n\t// <p><strong>EXACT AMBIGUITY DETECTION</strong></p>\n\t//\n\t// <p>If all states report the same conflicting set of alternatives, then we\n\t// know we have the exact ambiguity set.</p>\n\t//\n\t// <p><code>|A_<em>i</em>|&gt;1</code> and\n\t// <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>\n\t//\n\t// <p>In other words, we continue examining lookahead until all {@code A_i}\n\t// have more than one alternative and all {@code A_i} are the same. If\n\t// {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate\n\t// because the resolved set is {@code {1}}. To determine what the real\n\t// ambiguity is, we have to know whether the ambiguity is between one and\n\t// two or one and three so we keep going. We can only stop prediction when\n\t// we need exact ambiguity detection when the sets look like\n\t// {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>\n\t//\n\tPredictionMode.resolvesToJustOneViableAlt = function (altsets) {\n\t    return PredictionMode.getSingleViableAlt(altsets);\n\t};\n\n\t//\n\t// Determines if every alternative subset in {@code altsets} contains more\n\t// than one alternative.\n\t//\n\t// @param altsets a collection of alternative subsets\n\t// @return {@code true} if every {@link BitSet} in {@code altsets} has\n\t// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}\n\t//\n\tPredictionMode.allSubsetsConflict = function (altsets) {\n\t    return !PredictionMode.hasNonConflictingAltSet(altsets);\n\t};\n\t//\n\t// Determines if any single alternative subset in {@code altsets} contains\n\t// exactly one alternative.\n\t//\n\t// @param altsets a collection of alternative subsets\n\t// @return {@code true} if {@code altsets} contains a {@link BitSet} with\n\t// {@link BitSet//cardinality cardinality} 1, otherwise {@code false}\n\t//\n\tPredictionMode.hasNonConflictingAltSet = function (altsets) {\n\t    for (var i = 0; i < altsets.length; i++) {\n\t        var alts = altsets[i];\n\t        if (alts.length === 1) {\n\t            return true;\n\t        }\n\t    }\n\t    return false;\n\t};\n\n\t//\n\t// Determines if any single alternative subset in {@code altsets} contains\n\t// more than one alternative.\n\t//\n\t// @param altsets a collection of alternative subsets\n\t// @return {@code true} if {@code altsets} contains a {@link BitSet} with\n\t// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}\n\t//\n\tPredictionMode.hasConflictingAltSet = function (altsets) {\n\t    for (var i = 0; i < altsets.length; i++) {\n\t        var alts = altsets[i];\n\t        if (alts.length > 1) {\n\t            return true;\n\t        }\n\t    }\n\t    return false;\n\t};\n\n\t//\n\t// Determines if every alternative subset in {@code altsets} is equivalent.\n\t//\n\t// @param altsets a collection of alternative subsets\n\t// @return {@code true} if every member of {@code altsets} is equal to the\n\t// others, otherwise {@code false}\n\t//\n\tPredictionMode.allSubsetsEqual = function (altsets) {\n\t    var first = null;\n\t    for (var i = 0; i < altsets.length; i++) {\n\t        var alts = altsets[i];\n\t        if (first === null) {\n\t            first = alts;\n\t        } else if (alts !== first) {\n\t            return false;\n\t        }\n\t    }\n\t    return true;\n\t};\n\n\t//\n\t// Returns the unique alternative predicted by all alternative subsets in\n\t// {@code altsets}. If no such alternative exists, this method returns\n\t// {@link ATN//INVALID_ALT_NUMBER}.\n\t//\n\t// @param altsets a collection of alternative subsets\n\t//\n\tPredictionMode.getUniqueAlt = function (altsets) {\n\t    var all = PredictionMode.getAlts(altsets);\n\t    if (all.length === 1) {\n\t        return all.minValue();\n\t    } else {\n\t        return ATN.INVALID_ALT_NUMBER;\n\t    }\n\t};\n\n\t// Gets the complete set of represented alternatives for a collection of\n\t// alternative subsets. This method returns the union of each {@link BitSet}\n\t// in {@code altsets}.\n\t//\n\t// @param altsets a collection of alternative subsets\n\t// @return the set of represented alternatives in {@code altsets}\n\t//\n\tPredictionMode.getAlts = function (altsets) {\n\t    var all = new BitSet();\n\t    altsets.map(function (alts) {\n\t        all.or(alts);\n\t    });\n\t    return all;\n\t};\n\n\t//\n\t// This function gets the conflicting alt subsets from a configuration set.\n\t// For each configuration {@code c} in {@code configs}:\n\t//\n\t// <pre>\n\t// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not\n\t// alt and not pred\n\t// </pre>\n\n\tPredictionMode.getConflictingAltSubsets = function (configs) {\n\t    var configToAlts = new Map();\n\t    configToAlts.hashFunction = function (cfg) {\n\t        hashStuff(cfg.state.stateNumber, cfg.context);\n\t    };\n\t    configToAlts.equalsFunction = function (c1, c2) {\n\t        return c1.state.stateNumber == c2.state.stateNumber && c1.context.equals(c2.context);\n\t    };\n\t    configs.items.map(function (cfg) {\n\t        var alts = configToAlts.get(cfg);\n\t        if (alts === null) {\n\t            alts = new BitSet();\n\t            configToAlts.put(cfg, alts);\n\t        }\n\t        alts.add(cfg.alt);\n\t    });\n\t    return configToAlts.getValues();\n\t};\n\n\t//\n\t// Get a map from state to alt subset from a configuration set. For each\n\t// configuration {@code c} in {@code configs}:\n\t//\n\t// <pre>\n\t// map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}\n\t// </pre>\n\t//\n\tPredictionMode.getStateToAltMap = function (configs) {\n\t    var m = new AltDict();\n\t    configs.items.map(function (c) {\n\t        var alts = m.get(c.state);\n\t        if (alts === null) {\n\t            alts = new BitSet();\n\t            m.put(c.state, alts);\n\t        }\n\t        alts.add(c.alt);\n\t    });\n\t    return m;\n\t};\n\n\tPredictionMode.hasStateAssociatedWithOneAlt = function (configs) {\n\t    var values = PredictionMode.getStateToAltMap(configs).values();\n\t    for (var i = 0; i < values.length; i++) {\n\t        if (values[i].length === 1) {\n\t            return true;\n\t        }\n\t    }\n\t    return false;\n\t};\n\n\tPredictionMode.getSingleViableAlt = function (altsets) {\n\t    var result = null;\n\t    for (var i = 0; i < altsets.length; i++) {\n\t        var alts = altsets[i];\n\t        var minAlt = alts.minValue();\n\t        if (result === null) {\n\t            result = minAlt;\n\t        } else if (result !== minAlt) {\n\t            // more than 1 viable alt\n\t            return ATN.INVALID_ALT_NUMBER;\n\t        }\n\t    }\n\t    return result;\n\t};\n\n\texports.PredictionMode = PredictionMode;\n\n/***/ },\n/* 33 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\t/*! https://mths.be/codepointat v0.2.0 by @mathias */\n\tif (!String.prototype.codePointAt) {\n\t\t(function () {\n\t\t\t'use strict'; // needed to support `apply`/`call` with `undefined`/`null`\n\n\t\t\tvar defineProperty = function () {\n\t\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\t\ttry {\n\t\t\t\t\tvar object = {};\n\t\t\t\t\tvar $defineProperty = Object.defineProperty;\n\t\t\t\t\tvar result = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t\t} catch (error) {}\n\t\t\t\treturn result;\n\t\t\t}();\n\t\t\tvar codePointAt = function codePointAt(position) {\n\t\t\t\tif (this == null) {\n\t\t\t\t\tthrow TypeError();\n\t\t\t\t}\n\t\t\t\tvar string = String(this);\n\t\t\t\tvar size = string.length;\n\t\t\t\t// `ToInteger`\n\t\t\t\tvar index = position ? Number(position) : 0;\n\t\t\t\tif (index != index) {\n\t\t\t\t\t// better `isNaN`\n\t\t\t\t\tindex = 0;\n\t\t\t\t}\n\t\t\t\t// Account for out-of-bounds indices:\n\t\t\t\tif (index < 0 || index >= size) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\t// Get the first code unit\n\t\t\t\tvar first = string.charCodeAt(index);\n\t\t\t\tvar second;\n\t\t\t\tif ( // check if it’s the start of a surrogate pair\n\t\t\t\tfirst >= 0xD800 && first <= 0xDBFF && // high surrogate\n\t\t\t\tsize > index + 1 // there is a next code unit\n\t\t\t\t) {\n\t\t\t\t\t\tsecond = string.charCodeAt(index + 1);\n\t\t\t\t\t\tif (second >= 0xDC00 && second <= 0xDFFF) {\n\t\t\t\t\t\t\t// low surrogate\n\t\t\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\t\t\treturn (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\treturn first;\n\t\t\t};\n\t\t\tif (defineProperty) {\n\t\t\t\tdefineProperty(String.prototype, 'codePointAt', {\n\t\t\t\t\t'value': codePointAt,\n\t\t\t\t\t'configurable': true,\n\t\t\t\t\t'writable': true\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tString.prototype.codePointAt = codePointAt;\n\t\t\t}\n\t\t})();\n\t}\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\n\texports.DFA = __webpack_require__(35).DFA;\n\texports.DFASerializer = __webpack_require__(36).DFASerializer;\n\texports.LexerDFASerializer = __webpack_require__(36).LexerDFASerializer;\n\texports.PredPrediction = __webpack_require__(28).PredPrediction;\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\n\tvar Set = __webpack_require__(5).Set;\n\tvar DFAState = __webpack_require__(28).DFAState;\n\tvar StarLoopEntryState = __webpack_require__(8).StarLoopEntryState;\n\tvar ATNConfigSet = __webpack_require__(29).ATNConfigSet;\n\tvar DFASerializer = __webpack_require__(36).DFASerializer;\n\tvar LexerDFASerializer = __webpack_require__(36).LexerDFASerializer;\n\n\tfunction DFA(atnStartState, decision) {\n\t\tif (decision === undefined) {\n\t\t\tdecision = 0;\n\t\t}\n\t\t// From which ATN state did we create this DFA?\n\t\tthis.atnStartState = atnStartState;\n\t\tthis.decision = decision;\n\t\t// A set of all DFA states. Use {@link Map} so we can get old state back\n\t\t// ({@link Set} only allows you to see if it's there).\n\t\tthis._states = new Set();\n\t\tthis.s0 = null;\n\t\t// {@code true} if this DFA is for a precedence decision; otherwise,\n\t\t// {@code false}. This is the backing field for {@link //isPrecedenceDfa},\n\t\t// {@link //setPrecedenceDfa}.\n\t\tthis.precedenceDfa = false;\n\t\tif (atnStartState instanceof StarLoopEntryState) {\n\t\t\tif (atnStartState.isPrecedenceDecision) {\n\t\t\t\tthis.precedenceDfa = true;\n\t\t\t\tvar precedenceState = new DFAState(null, new ATNConfigSet());\n\t\t\t\tprecedenceState.edges = [];\n\t\t\t\tprecedenceState.isAcceptState = false;\n\t\t\t\tprecedenceState.requiresFullContext = false;\n\t\t\t\tthis.s0 = precedenceState;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t// Get the start state for a specific precedence value.\n\t//\n\t// @param precedence The current precedence.\n\t// @return The start state corresponding to the specified precedence, or\n\t// {@code null} if no start state exists for the specified precedence.\n\t//\n\t// @throws IllegalStateException if this is not a precedence DFA.\n\t// @see //isPrecedenceDfa()\n\n\tDFA.prototype.getPrecedenceStartState = function (precedence) {\n\t\tif (!this.precedenceDfa) {\n\t\t\tthrow \"Only precedence DFAs may contain a precedence start state.\";\n\t\t}\n\t\t// s0.edges is never null for a precedence DFA\n\t\tif (precedence < 0 || precedence >= this.s0.edges.length) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.s0.edges[precedence] || null;\n\t};\n\n\t// Set the start state for a specific precedence value.\n\t//\n\t// @param precedence The current precedence.\n\t// @param startState The start state corresponding to the specified\n\t// precedence.\n\t//\n\t// @throws IllegalStateException if this is not a precedence DFA.\n\t// @see //isPrecedenceDfa()\n\t//\n\tDFA.prototype.setPrecedenceStartState = function (precedence, startState) {\n\t\tif (!this.precedenceDfa) {\n\t\t\tthrow \"Only precedence DFAs may contain a precedence start state.\";\n\t\t}\n\t\tif (precedence < 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// synchronization on s0 here is ok. when the DFA is turned into a\n\t\t// precedence DFA, s0 will be initialized once and not updated again\n\t\t// s0.edges is never null for a precedence DFA\n\t\tthis.s0.edges[precedence] = startState;\n\t};\n\n\t//\n\t// Sets whether this is a precedence DFA. If the specified value differs\n\t// from the current DFA configuration, the following actions are taken;\n\t// otherwise no changes are made to the current DFA.\n\t//\n\t// <ul>\n\t// <li>The {@link //states} map is cleared</li>\n\t// <li>If {@code precedenceDfa} is {@code false}, the initial state\n\t// {@link //s0} is set to {@code null}; otherwise, it is initialized to a new\n\t// {@link DFAState} with an empty outgoing {@link DFAState//edges} array to\n\t// store the start states for individual precedence values.</li>\n\t// <li>The {@link //precedenceDfa} field is updated</li>\n\t// </ul>\n\t//\n\t// @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,\n\t// {@code false}\n\n\tDFA.prototype.setPrecedenceDfa = function (precedenceDfa) {\n\t\tif (this.precedenceDfa !== precedenceDfa) {\n\t\t\tthis._states = new DFAStatesSet();\n\t\t\tif (precedenceDfa) {\n\t\t\t\tvar precedenceState = new DFAState(null, new ATNConfigSet());\n\t\t\t\tprecedenceState.edges = [];\n\t\t\t\tprecedenceState.isAcceptState = false;\n\t\t\t\tprecedenceState.requiresFullContext = false;\n\t\t\t\tthis.s0 = precedenceState;\n\t\t\t} else {\n\t\t\t\tthis.s0 = null;\n\t\t\t}\n\t\t\tthis.precedenceDfa = precedenceDfa;\n\t\t}\n\t};\n\n\tObject.defineProperty(DFA.prototype, \"states\", {\n\t\tget: function get() {\n\t\t\treturn this._states;\n\t\t}\n\t});\n\n\t// Return a list of all states in this DFA, ordered by state number.\n\tDFA.prototype.sortedStates = function () {\n\t\tvar list = this._states.values();\n\t\treturn list.sort(function (a, b) {\n\t\t\treturn a.stateNumber - b.stateNumber;\n\t\t});\n\t};\n\n\tDFA.prototype.toString = function (literalNames, symbolicNames) {\n\t\tliteralNames = literalNames || null;\n\t\tsymbolicNames = symbolicNames || null;\n\t\tif (this.s0 === null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tvar serializer = new DFASerializer(this, literalNames, symbolicNames);\n\t\treturn serializer.toString();\n\t};\n\n\tDFA.prototype.toLexerString = function () {\n\t\tif (this.s0 === null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tvar serializer = new LexerDFASerializer(this);\n\t\treturn serializer.toString();\n\t};\n\n\texports.DFA = DFA;\n\n/***/ },\n/* 36 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\n\t// A DFA walker that knows how to dump them to serialized strings.#/\n\n\n\tfunction DFASerializer(dfa, literalNames, symbolicNames) {\n\t    this.dfa = dfa;\n\t    this.literalNames = literalNames || [];\n\t    this.symbolicNames = symbolicNames || [];\n\t    return this;\n\t}\n\n\tDFASerializer.prototype.toString = function () {\n\t    if (this.dfa.s0 === null) {\n\t        return null;\n\t    }\n\t    var buf = \"\";\n\t    var states = this.dfa.sortedStates();\n\t    for (var i = 0; i < states.length; i++) {\n\t        var s = states[i];\n\t        if (s.edges !== null) {\n\t            var n = s.edges.length;\n\t            for (var j = 0; j < n; j++) {\n\t                var t = s.edges[j] || null;\n\t                if (t !== null && t.stateNumber !== 0x7FFFFFFF) {\n\t                    buf = buf.concat(this.getStateString(s));\n\t                    buf = buf.concat(\"-\");\n\t                    buf = buf.concat(this.getEdgeLabel(j));\n\t                    buf = buf.concat(\"->\");\n\t                    buf = buf.concat(this.getStateString(t));\n\t                    buf = buf.concat('\\n');\n\t                }\n\t            }\n\t        }\n\t    }\n\t    return buf.length === 0 ? null : buf;\n\t};\n\n\tDFASerializer.prototype.getEdgeLabel = function (i) {\n\t    if (i === 0) {\n\t        return \"EOF\";\n\t    } else if (this.literalNames !== null || this.symbolicNames !== null) {\n\t        return this.literalNames[i - 1] || this.symbolicNames[i - 1];\n\t    } else {\n\t        return String.fromCharCode(i - 1);\n\t    }\n\t};\n\n\tDFASerializer.prototype.getStateString = function (s) {\n\t    var baseStateStr = (s.isAcceptState ? \":\" : \"\") + \"s\" + s.stateNumber + (s.requiresFullContext ? \"^\" : \"\");\n\t    if (s.isAcceptState) {\n\t        if (s.predicates !== null) {\n\t            return baseStateStr + \"=>\" + s.predicates.toString();\n\t        } else {\n\t            return baseStateStr + \"=>\" + s.prediction.toString();\n\t        }\n\t    } else {\n\t        return baseStateStr;\n\t    }\n\t};\n\n\tfunction LexerDFASerializer(dfa) {\n\t    DFASerializer.call(this, dfa, null);\n\t    return this;\n\t}\n\n\tLexerDFASerializer.prototype = Object.create(DFASerializer.prototype);\n\tLexerDFASerializer.prototype.constructor = LexerDFASerializer;\n\n\tLexerDFASerializer.prototype.getEdgeLabel = function (i) {\n\t    return \"'\" + String.fromCharCode(i) + \"'\";\n\t};\n\n\texports.DFASerializer = DFASerializer;\n\texports.LexerDFASerializer = LexerDFASerializer;\n\n/***/ },\n/* 37 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\t/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */\n\tif (!String.fromCodePoint) {\n\t\t(function () {\n\t\t\tvar defineProperty = function () {\n\t\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\t\ttry {\n\t\t\t\t\tvar object = {};\n\t\t\t\t\tvar $defineProperty = Object.defineProperty;\n\t\t\t\t\tvar result = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t\t} catch (error) {}\n\t\t\t\treturn result;\n\t\t\t}();\n\t\t\tvar stringFromCharCode = String.fromCharCode;\n\t\t\tvar floor = Math.floor;\n\t\t\tvar fromCodePoint = function fromCodePoint(_) {\n\t\t\t\tvar MAX_SIZE = 0x4000;\n\t\t\t\tvar codeUnits = [];\n\t\t\t\tvar highSurrogate;\n\t\t\t\tvar lowSurrogate;\n\t\t\t\tvar index = -1;\n\t\t\t\tvar length = arguments.length;\n\t\t\t\tif (!length) {\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\tvar result = '';\n\t\t\t\twhile (++index < length) {\n\t\t\t\t\tvar codePoint = Number(arguments[index]);\n\t\t\t\t\tif (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n\t\t\t\t\tcodePoint < 0 || // not a valid Unicode code point\n\t\t\t\t\tcodePoint > 0x10FFFF || // not a valid Unicode code point\n\t\t\t\t\tfloor(codePoint) != codePoint // not an integer\n\t\t\t\t\t) {\n\t\t\t\t\t\t\tthrow RangeError('Invalid code point: ' + codePoint);\n\t\t\t\t\t\t}\n\t\t\t\t\tif (codePoint <= 0xFFFF) {\n\t\t\t\t\t\t// BMP code point\n\t\t\t\t\t\tcodeUnits.push(codePoint);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Astral code point; split in surrogate halves\n\t\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\t\tcodePoint -= 0x10000;\n\t\t\t\t\t\thighSurrogate = (codePoint >> 10) + 0xD800;\n\t\t\t\t\t\tlowSurrogate = codePoint % 0x400 + 0xDC00;\n\t\t\t\t\t\tcodeUnits.push(highSurrogate, lowSurrogate);\n\t\t\t\t\t}\n\t\t\t\t\tif (index + 1 == length || codeUnits.length > MAX_SIZE) {\n\t\t\t\t\t\tresult += stringFromCharCode.apply(null, codeUnits);\n\t\t\t\t\t\tcodeUnits.length = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t};\n\t\t\tif (defineProperty) {\n\t\t\t\tdefineProperty(String, 'fromCodePoint', {\n\t\t\t\t\t'value': fromCodePoint,\n\t\t\t\t\t'configurable': true,\n\t\t\t\t\t'writable': true\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tString.fromCodePoint = fromCodePoint;\n\t\t\t}\n\t\t})();\n\t}\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\n\tvar Tree = __webpack_require__(14);\n\texports.Trees = __webpack_require__(15).Trees;\n\texports.RuleNode = Tree.RuleNode;\n\texports.ParseTreeListener = Tree.ParseTreeListener;\n\texports.ParseTreeVisitor = Tree.ParseTreeVisitor;\n\texports.ParseTreeWalker = Tree.ParseTreeWalker;\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\n\texports.RecognitionException = __webpack_require__(26).RecognitionException;\n\texports.NoViableAltException = __webpack_require__(26).NoViableAltException;\n\texports.LexerNoViableAltException = __webpack_require__(26).LexerNoViableAltException;\n\texports.InputMismatchException = __webpack_require__(26).InputMismatchException;\n\texports.FailedPredicateException = __webpack_require__(26).FailedPredicateException;\n\texports.DiagnosticErrorListener = __webpack_require__(40).DiagnosticErrorListener;\n\texports.BailErrorStrategy = __webpack_require__(41).BailErrorStrategy;\n\texports.ErrorListener = __webpack_require__(24).ErrorListener;\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t//\n\n\t//\n\t// This implementation of {@link ANTLRErrorListener} can be used to identify\n\t// certain potential correctness and performance problems in grammars. \"Reports\"\n\t// are made by calling {@link Parser//notifyErrorListeners} with the appropriate\n\t// message.\n\t//\n\t// <ul>\n\t// <li><b>Ambiguities</b>: These are cases where more than one path through the\n\t// grammar can match the input.</li>\n\t// <li><b>Weak context sensitivity</b>: These are cases where full-context\n\t// prediction resolved an SLL conflict to a unique alternative which equaled the\n\t// minimum alternative of the SLL conflict.</li>\n\t// <li><b>Strong (forced) context sensitivity</b>: These are cases where the\n\t// full-context prediction resolved an SLL conflict to a unique alternative,\n\t// <em>and</em> the minimum alternative of the SLL conflict was found to not be\n\t// a truly viable alternative. Two-stage parsing cannot be used for inputs where\n\t// this situation occurs.</li>\n\t// </ul>\n\n\tvar BitSet = __webpack_require__(5).BitSet;\n\tvar ErrorListener = __webpack_require__(24).ErrorListener;\n\tvar Interval = __webpack_require__(10).Interval;\n\n\tfunction DiagnosticErrorListener(exactOnly) {\n\t\tErrorListener.call(this);\n\t\texactOnly = exactOnly || true;\n\t\t// whether all ambiguities or only exact ambiguities are reported.\n\t\tthis.exactOnly = exactOnly;\n\t\treturn this;\n\t}\n\n\tDiagnosticErrorListener.prototype = Object.create(ErrorListener.prototype);\n\tDiagnosticErrorListener.prototype.constructor = DiagnosticErrorListener;\n\n\tDiagnosticErrorListener.prototype.reportAmbiguity = function (recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n\t\tif (this.exactOnly && !exact) {\n\t\t\treturn;\n\t\t}\n\t\tvar msg = \"reportAmbiguity d=\" + this.getDecisionDescription(recognizer, dfa) + \": ambigAlts=\" + this.getConflictingAlts(ambigAlts, configs) + \", input='\" + recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\";\n\t\trecognizer.notifyErrorListeners(msg);\n\t};\n\n\tDiagnosticErrorListener.prototype.reportAttemptingFullContext = function (recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n\t\tvar msg = \"reportAttemptingFullContext d=\" + this.getDecisionDescription(recognizer, dfa) + \", input='\" + recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\";\n\t\trecognizer.notifyErrorListeners(msg);\n\t};\n\n\tDiagnosticErrorListener.prototype.reportContextSensitivity = function (recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n\t\tvar msg = \"reportContextSensitivity d=\" + this.getDecisionDescription(recognizer, dfa) + \", input='\" + recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\";\n\t\trecognizer.notifyErrorListeners(msg);\n\t};\n\n\tDiagnosticErrorListener.prototype.getDecisionDescription = function (recognizer, dfa) {\n\t\tvar decision = dfa.decision;\n\t\tvar ruleIndex = dfa.atnStartState.ruleIndex;\n\n\t\tvar ruleNames = recognizer.ruleNames;\n\t\tif (ruleIndex < 0 || ruleIndex >= ruleNames.length) {\n\t\t\treturn \"\" + decision;\n\t\t}\n\t\tvar ruleName = ruleNames[ruleIndex] || null;\n\t\tif (ruleName === null || ruleName.length === 0) {\n\t\t\treturn \"\" + decision;\n\t\t}\n\t\treturn \"\" + decision + \" (\" + ruleName + \")\";\n\t};\n\n\t//\n\t// Computes the set of conflicting or ambiguous alternatives from a\n\t// configuration set, if that information was not already provided by the\n\t// parser.\n\t//\n\t// @param reportedAlts The set of conflicting or ambiguous alternatives, as\n\t// reported by the parser.\n\t// @param configs The conflicting or ambiguous configuration set.\n\t// @return Returns {@code reportedAlts} if it is not {@code null}, otherwise\n\t// returns the set of alternatives represented in {@code configs}.\n\t//\n\tDiagnosticErrorListener.prototype.getConflictingAlts = function (reportedAlts, configs) {\n\t\tif (reportedAlts !== null) {\n\t\t\treturn reportedAlts;\n\t\t}\n\t\tvar result = new BitSet();\n\t\tfor (var i = 0; i < configs.items.length; i++) {\n\t\t\tresult.add(configs.items[i].alt);\n\t\t}\n\t\treturn \"{\" + result.values().join(\", \") + \"}\";\n\t};\n\n\texports.DiagnosticErrorListener = DiagnosticErrorListener;\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t//\n\n\tvar Token = __webpack_require__(6).Token;\n\tvar Errors = __webpack_require__(26);\n\tvar NoViableAltException = Errors.NoViableAltException;\n\tvar InputMismatchException = Errors.InputMismatchException;\n\tvar FailedPredicateException = Errors.FailedPredicateException;\n\tvar ParseCancellationException = Errors.ParseCancellationException;\n\tvar ATNState = __webpack_require__(8).ATNState;\n\tvar Interval = __webpack_require__(10).Interval;\n\tvar IntervalSet = __webpack_require__(10).IntervalSet;\n\n\tfunction ErrorStrategy() {}\n\n\tErrorStrategy.prototype.reset = function (recognizer) {};\n\n\tErrorStrategy.prototype.recoverInline = function (recognizer) {};\n\n\tErrorStrategy.prototype.recover = function (recognizer, e) {};\n\n\tErrorStrategy.prototype.sync = function (recognizer) {};\n\n\tErrorStrategy.prototype.inErrorRecoveryMode = function (recognizer) {};\n\n\tErrorStrategy.prototype.reportError = function (recognizer) {};\n\n\t// This is the default implementation of {@link ANTLRErrorStrategy} used for\n\t// error reporting and recovery in ANTLR parsers.\n\t//\n\tfunction DefaultErrorStrategy() {\n\t    ErrorStrategy.call(this);\n\t    // Indicates whether the error strategy is currently \"recovering from an\n\t    // error\". This is used to suppress reporting multiple error messages while\n\t    // attempting to recover from a detected syntax error.\n\t    //\n\t    // @see //inErrorRecoveryMode\n\t    //\n\t    this.errorRecoveryMode = false;\n\n\t    // The index into the input stream where the last error occurred.\n\t    // This is used to prevent infinite loops where an error is found\n\t    // but no token is consumed during recovery...another error is found,\n\t    // ad nauseum. This is a failsafe mechanism to guarantee that at least\n\t    // one token/tree node is consumed for two errors.\n\t    //\n\t    this.lastErrorIndex = -1;\n\t    this.lastErrorStates = null;\n\t    return this;\n\t}\n\n\tDefaultErrorStrategy.prototype = Object.create(ErrorStrategy.prototype);\n\tDefaultErrorStrategy.prototype.constructor = DefaultErrorStrategy;\n\n\t// <p>The default implementation simply calls {@link //endErrorCondition} to\n\t// ensure that the handler is not in error recovery mode.</p>\n\tDefaultErrorStrategy.prototype.reset = function (recognizer) {\n\t    this.endErrorCondition(recognizer);\n\t};\n\n\t//\n\t// This method is called to enter error recovery mode when a recognition\n\t// exception is reported.\n\t//\n\t// @param recognizer the parser instance\n\t//\n\tDefaultErrorStrategy.prototype.beginErrorCondition = function (recognizer) {\n\t    this.errorRecoveryMode = true;\n\t};\n\n\tDefaultErrorStrategy.prototype.inErrorRecoveryMode = function (recognizer) {\n\t    return this.errorRecoveryMode;\n\t};\n\n\t//\n\t// This method is called to leave error recovery mode after recovering from\n\t// a recognition exception.\n\t//\n\t// @param recognizer\n\t//\n\tDefaultErrorStrategy.prototype.endErrorCondition = function (recognizer) {\n\t    this.errorRecoveryMode = false;\n\t    this.lastErrorStates = null;\n\t    this.lastErrorIndex = -1;\n\t};\n\n\t//\n\t// {@inheritDoc}\n\t//\n\t// <p>The default implementation simply calls {@link //endErrorCondition}.</p>\n\t//\n\tDefaultErrorStrategy.prototype.reportMatch = function (recognizer) {\n\t    this.endErrorCondition(recognizer);\n\t};\n\n\t//\n\t// {@inheritDoc}\n\t//\n\t// <p>The default implementation returns immediately if the handler is already\n\t// in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}\n\t// and dispatches the reporting task based on the runtime type of {@code e}\n\t// according to the following table.</p>\n\t//\n\t// <ul>\n\t// <li>{@link NoViableAltException}: Dispatches the call to\n\t// {@link //reportNoViableAlternative}</li>\n\t// <li>{@link InputMismatchException}: Dispatches the call to\n\t// {@link //reportInputMismatch}</li>\n\t// <li>{@link FailedPredicateException}: Dispatches the call to\n\t// {@link //reportFailedPredicate}</li>\n\t// <li>All other types: calls {@link Parser//notifyErrorListeners} to report\n\t// the exception</li>\n\t// </ul>\n\t//\n\tDefaultErrorStrategy.prototype.reportError = function (recognizer, e) {\n\t    // if we've already reported an error and have not matched a token\n\t    // yet successfully, don't report any errors.\n\t    if (this.inErrorRecoveryMode(recognizer)) {\n\t        return; // don't report spurious errors\n\t    }\n\t    this.beginErrorCondition(recognizer);\n\t    if (e instanceof NoViableAltException) {\n\t        this.reportNoViableAlternative(recognizer, e);\n\t    } else if (e instanceof InputMismatchException) {\n\t        this.reportInputMismatch(recognizer, e);\n\t    } else if (e instanceof FailedPredicateException) {\n\t        this.reportFailedPredicate(recognizer, e);\n\t    } else {\n\t        console.log(\"unknown recognition error type: \" + e.constructor.name);\n\t        console.log(e.stack);\n\t        recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);\n\t    }\n\t};\n\t//\n\t// {@inheritDoc}\n\t//\n\t// <p>The default implementation resynchronizes the parser by consuming tokens\n\t// until we find one in the resynchronization set--loosely the set of tokens\n\t// that can follow the current rule.</p>\n\t//\n\tDefaultErrorStrategy.prototype.recover = function (recognizer, e) {\n\t    if (this.lastErrorIndex === recognizer.getInputStream().index && this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state) >= 0) {\n\t        // uh oh, another error at same token index and previously-visited\n\t        // state in ATN; must be a case where LT(1) is in the recovery\n\t        // token set so nothing got consumed. Consume a single token\n\t        // at least to prevent an infinite loop; this is a failsafe.\n\t        recognizer.consume();\n\t    }\n\t    this.lastErrorIndex = recognizer._input.index;\n\t    if (this.lastErrorStates === null) {\n\t        this.lastErrorStates = [];\n\t    }\n\t    this.lastErrorStates.push(recognizer.state);\n\t    var followSet = this.getErrorRecoverySet(recognizer);\n\t    this.consumeUntil(recognizer, followSet);\n\t};\n\n\t// The default implementation of {@link ANTLRErrorStrategy//sync} makes sure\n\t// that the current lookahead symbol is consistent with what were expecting\n\t// at this point in the ATN. You can call this anytime but ANTLR only\n\t// generates code to check before subrules/loops and each iteration.\n\t//\n\t// <p>Implements Jim Idle's magic sync mechanism in closures and optional\n\t// subrules. E.g.,</p>\n\t//\n\t// <pre>\n\t// a : sync ( stuff sync )* ;\n\t// sync : {consume to what can follow sync} ;\n\t// </pre>\n\t//\n\t// At the start of a sub rule upon error, {@link //sync} performs single\n\t// token deletion, if possible. If it can't do that, it bails on the current\n\t// rule and uses the default error recovery, which consumes until the\n\t// resynchronization set of the current rule.\n\t//\n\t// <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block\n\t// with an empty alternative), then the expected set includes what follows\n\t// the subrule.</p>\n\t//\n\t// <p>During loop iteration, it consumes until it sees a token that can start a\n\t// sub rule or what follows loop. Yes, that is pretty aggressive. We opt to\n\t// stay in the loop as long as possible.</p>\n\t//\n\t// <p><strong>ORIGINS</strong></p>\n\t//\n\t// <p>Previous versions of ANTLR did a poor job of their recovery within loops.\n\t// A single mismatch token or missing token would force the parser to bail\n\t// out of the entire rules surrounding the loop. So, for rule</p>\n\t//\n\t// <pre>\n\t// classDef : 'class' ID '{' member* '}'\n\t// </pre>\n\t//\n\t// input with an extra token between members would force the parser to\n\t// consume until it found the next class definition rather than the next\n\t// member definition of the current class.\n\t//\n\t// <p>This functionality cost a little bit of effort because the parser has to\n\t// compare token set at the start of the loop and at each iteration. If for\n\t// some reason speed is suffering for you, you can turn off this\n\t// functionality by simply overriding this method as a blank { }.</p>\n\t//\n\tDefaultErrorStrategy.prototype.sync = function (recognizer) {\n\t    // If already recovering, don't try to sync\n\t    if (this.inErrorRecoveryMode(recognizer)) {\n\t        return;\n\t    }\n\t    var s = recognizer._interp.atn.states[recognizer.state];\n\t    var la = recognizer.getTokenStream().LA(1);\n\t    // try cheaper subset first; might get lucky. seems to shave a wee bit off\n\t    var nextTokens = recognizer.atn.nextTokens(s);\n\t    if (nextTokens.contains(Token.EPSILON) || nextTokens.contains(la)) {\n\t        return;\n\t    }\n\t    switch (s.stateType) {\n\t        case ATNState.BLOCK_START:\n\t        case ATNState.STAR_BLOCK_START:\n\t        case ATNState.PLUS_BLOCK_START:\n\t        case ATNState.STAR_LOOP_ENTRY:\n\t            // report error and recover if possible\n\t            if (this.singleTokenDeletion(recognizer) !== null) {\n\t                return;\n\t            } else {\n\t                throw new InputMismatchException(recognizer);\n\t            }\n\t            break;\n\t        case ATNState.PLUS_LOOP_BACK:\n\t        case ATNState.STAR_LOOP_BACK:\n\t            this.reportUnwantedToken(recognizer);\n\t            var expecting = new IntervalSet();\n\t            expecting.addSet(recognizer.getExpectedTokens());\n\t            var whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer));\n\t            this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);\n\t            break;\n\t        default:\n\t        // do nothing if we can't identify the exact kind of ATN state\n\t    }\n\t};\n\n\t// This is called by {@link //reportError} when the exception is a\n\t// {@link NoViableAltException}.\n\t//\n\t// @see //reportError\n\t//\n\t// @param recognizer the parser instance\n\t// @param e the recognition exception\n\t//\n\tDefaultErrorStrategy.prototype.reportNoViableAlternative = function (recognizer, e) {\n\t    var tokens = recognizer.getTokenStream();\n\t    var input;\n\t    if (tokens !== null) {\n\t        if (e.startToken.type === Token.EOF) {\n\t            input = \"<EOF>\";\n\t        } else {\n\t            input = tokens.getText(new Interval(e.startToken.tokenIndex, e.offendingToken.tokenIndex));\n\t        }\n\t    } else {\n\t        input = \"<unknown input>\";\n\t    }\n\t    var msg = \"no viable alternative at input \" + this.escapeWSAndQuote(input);\n\t    recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n\t};\n\n\t//\n\t// This is called by {@link //reportError} when the exception is an\n\t// {@link InputMismatchException}.\n\t//\n\t// @see //reportError\n\t//\n\t// @param recognizer the parser instance\n\t// @param e the recognition exception\n\t//\n\tDefaultErrorStrategy.prototype.reportInputMismatch = function (recognizer, e) {\n\t    var msg = \"mismatched input \" + this.getTokenErrorDisplay(e.offendingToken) + \" expecting \" + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames);\n\t    recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n\t};\n\n\t//\n\t// This is called by {@link //reportError} when the exception is a\n\t// {@link FailedPredicateException}.\n\t//\n\t// @see //reportError\n\t//\n\t// @param recognizer the parser instance\n\t// @param e the recognition exception\n\t//\n\tDefaultErrorStrategy.prototype.reportFailedPredicate = function (recognizer, e) {\n\t    var ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex];\n\t    var msg = \"rule \" + ruleName + \" \" + e.message;\n\t    recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n\t};\n\n\t// This method is called to report a syntax error which requires the removal\n\t// of a token from the input stream. At the time this method is called, the\n\t// erroneous symbol is current {@code LT(1)} symbol and has not yet been\n\t// removed from the input stream. When this method returns,\n\t// {@code recognizer} is in error recovery mode.\n\t//\n\t// <p>This method is called when {@link //singleTokenDeletion} identifies\n\t// single-token deletion as a viable recovery strategy for a mismatched\n\t// input error.</p>\n\t//\n\t// <p>The default implementation simply returns if the handler is already in\n\t// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to\n\t// enter error recovery mode, followed by calling\n\t// {@link Parser//notifyErrorListeners}.</p>\n\t//\n\t// @param recognizer the parser instance\n\t//\n\tDefaultErrorStrategy.prototype.reportUnwantedToken = function (recognizer) {\n\t    if (this.inErrorRecoveryMode(recognizer)) {\n\t        return;\n\t    }\n\t    this.beginErrorCondition(recognizer);\n\t    var t = recognizer.getCurrentToken();\n\t    var tokenName = this.getTokenErrorDisplay(t);\n\t    var expecting = this.getExpectedTokens(recognizer);\n\t    var msg = \"extraneous input \" + tokenName + \" expecting \" + expecting.toString(recognizer.literalNames, recognizer.symbolicNames);\n\t    recognizer.notifyErrorListeners(msg, t, null);\n\t};\n\t// This method is called to report a syntax error which requires the\n\t// insertion of a missing token into the input stream. At the time this\n\t// method is called, the missing token has not yet been inserted. When this\n\t// method returns, {@code recognizer} is in error recovery mode.\n\t//\n\t// <p>This method is called when {@link //singleTokenInsertion} identifies\n\t// single-token insertion as a viable recovery strategy for a mismatched\n\t// input error.</p>\n\t//\n\t// <p>The default implementation simply returns if the handler is already in\n\t// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to\n\t// enter error recovery mode, followed by calling\n\t// {@link Parser//notifyErrorListeners}.</p>\n\t//\n\t// @param recognizer the parser instance\n\t//\n\tDefaultErrorStrategy.prototype.reportMissingToken = function (recognizer) {\n\t    if (this.inErrorRecoveryMode(recognizer)) {\n\t        return;\n\t    }\n\t    this.beginErrorCondition(recognizer);\n\t    var t = recognizer.getCurrentToken();\n\t    var expecting = this.getExpectedTokens(recognizer);\n\t    var msg = \"missing \" + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) + \" at \" + this.getTokenErrorDisplay(t);\n\t    recognizer.notifyErrorListeners(msg, t, null);\n\t};\n\n\t// <p>The default implementation attempts to recover from the mismatched input\n\t// by using single token insertion and deletion as described below. If the\n\t// recovery attempt fails, this method throws an\n\t// {@link InputMismatchException}.</p>\n\t//\n\t// <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>\n\t//\n\t// <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the\n\t// right token, however, then assume {@code LA(1)} is some extra spurious\n\t// token and delete it. Then consume and return the next token (which was\n\t// the {@code LA(2)} token) as the successful result of the match operation.</p>\n\t//\n\t// <p>This recovery strategy is implemented by {@link\n\t// //singleTokenDeletion}.</p>\n\t//\n\t// <p><strong>MISSING TOKEN</strong> (single token insertion)</p>\n\t//\n\t// <p>If current token (at {@code LA(1)}) is consistent with what could come\n\t// after the expected {@code LA(1)} token, then assume the token is missing\n\t// and use the parser's {@link TokenFactory} to create it on the fly. The\n\t// \"insertion\" is performed by returning the created token as the successful\n\t// result of the match operation.</p>\n\t//\n\t// <p>This recovery strategy is implemented by {@link\n\t// //singleTokenInsertion}.</p>\n\t//\n\t// <p><strong>EXAMPLE</strong></p>\n\t//\n\t// <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When\n\t// the parser returns from the nested call to {@code expr}, it will have\n\t// call chain:</p>\n\t//\n\t// <pre>\n\t// stat &rarr; expr &rarr; atom\n\t// </pre>\n\t//\n\t// and it will be trying to match the {@code ')'} at this point in the\n\t// derivation:\n\t//\n\t// <pre>\n\t// =&gt; ID '=' '(' INT ')' ('+' atom)* ';'\n\t// ^\n\t// </pre>\n\t//\n\t// The attempt to match {@code ')'} will fail when it sees {@code ';'} and\n\t// call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}\n\t// is in the set of tokens that can follow the {@code ')'} token reference\n\t// in rule {@code atom}. It can assume that you forgot the {@code ')'}.\n\t//\n\tDefaultErrorStrategy.prototype.recoverInline = function (recognizer) {\n\t    // SINGLE TOKEN DELETION\n\t    var matchedSymbol = this.singleTokenDeletion(recognizer);\n\t    if (matchedSymbol !== null) {\n\t        // we have deleted the extra token.\n\t        // now, move past ttype token as if all were ok\n\t        recognizer.consume();\n\t        return matchedSymbol;\n\t    }\n\t    // SINGLE TOKEN INSERTION\n\t    if (this.singleTokenInsertion(recognizer)) {\n\t        return this.getMissingSymbol(recognizer);\n\t    }\n\t    // even that didn't work; must throw the exception\n\t    throw new InputMismatchException(recognizer);\n\t};\n\n\t//\n\t// This method implements the single-token insertion inline error recovery\n\t// strategy. It is called by {@link //recoverInline} if the single-token\n\t// deletion strategy fails to recover from the mismatched input. If this\n\t// method returns {@code true}, {@code recognizer} will be in error recovery\n\t// mode.\n\t//\n\t// <p>This method determines whether or not single-token insertion is viable by\n\t// checking if the {@code LA(1)} input symbol could be successfully matched\n\t// if it were instead the {@code LA(2)} symbol. If this method returns\n\t// {@code true}, the caller is responsible for creating and inserting a\n\t// token with the correct type to produce this behavior.</p>\n\t//\n\t// @param recognizer the parser instance\n\t// @return {@code true} if single-token insertion is a viable recovery\n\t// strategy for the current mismatched input, otherwise {@code false}\n\t//\n\tDefaultErrorStrategy.prototype.singleTokenInsertion = function (recognizer) {\n\t    var currentSymbolType = recognizer.getTokenStream().LA(1);\n\t    // if current token is consistent with what could come after current\n\t    // ATN state, then we know we're missing a token; error recovery\n\t    // is free to conjure up and insert the missing token\n\t    var atn = recognizer._interp.atn;\n\t    var currentState = atn.states[recognizer.state];\n\t    var next = currentState.transitions[0].target;\n\t    var expectingAtLL2 = atn.nextTokens(next, recognizer._ctx);\n\t    if (expectingAtLL2.contains(currentSymbolType)) {\n\t        this.reportMissingToken(recognizer);\n\t        return true;\n\t    } else {\n\t        return false;\n\t    }\n\t};\n\n\t// This method implements the single-token deletion inline error recovery\n\t// strategy. It is called by {@link //recoverInline} to attempt to recover\n\t// from mismatched input. If this method returns null, the parser and error\n\t// handler state will not have changed. If this method returns non-null,\n\t// {@code recognizer} will <em>not</em> be in error recovery mode since the\n\t// returned token was a successful match.\n\t//\n\t// <p>If the single-token deletion is successful, this method calls\n\t// {@link //reportUnwantedToken} to report the error, followed by\n\t// {@link Parser//consume} to actually \"delete\" the extraneous token. Then,\n\t// before returning {@link //reportMatch} is called to signal a successful\n\t// match.</p>\n\t//\n\t// @param recognizer the parser instance\n\t// @return the successfully matched {@link Token} instance if single-token\n\t// deletion successfully recovers from the mismatched input, otherwise\n\t// {@code null}\n\t//\n\tDefaultErrorStrategy.prototype.singleTokenDeletion = function (recognizer) {\n\t    var nextTokenType = recognizer.getTokenStream().LA(2);\n\t    var expecting = this.getExpectedTokens(recognizer);\n\t    if (expecting.contains(nextTokenType)) {\n\t        this.reportUnwantedToken(recognizer);\n\t        // print(\"recoverFromMismatchedToken deleting \" \\\n\t        // + str(recognizer.getTokenStream().LT(1)) \\\n\t        // + \" since \" + str(recognizer.getTokenStream().LT(2)) \\\n\t        // + \" is what we want\", file=sys.stderr)\n\t        recognizer.consume(); // simply delete extra token\n\t        // we want to return the token we're actually matching\n\t        var matchedSymbol = recognizer.getCurrentToken();\n\t        this.reportMatch(recognizer); // we know current token is correct\n\t        return matchedSymbol;\n\t    } else {\n\t        return null;\n\t    }\n\t};\n\n\t// Conjure up a missing token during error recovery.\n\t//\n\t// The recognizer attempts to recover from single missing\n\t// symbols. But, actions might refer to that missing symbol.\n\t// For example, x=ID {f($x);}. The action clearly assumes\n\t// that there has been an identifier matched previously and that\n\t// $x points at that token. If that token is missing, but\n\t// the next token in the stream is what we want we assume that\n\t// this token is missing and we keep going. Because we\n\t// have to return some token to replace the missing token,\n\t// we have to conjure one up. This method gives the user control\n\t// over the tokens returned for missing tokens. Mostly,\n\t// you will want to create something special for identifier\n\t// tokens. For literals such as '{' and ',', the default\n\t// action in the parser or tree parser works. It simply creates\n\t// a CommonToken of the appropriate type. The text will be the token.\n\t// If you change what tokens must be created by the lexer,\n\t// override this method to create the appropriate tokens.\n\t//\n\tDefaultErrorStrategy.prototype.getMissingSymbol = function (recognizer) {\n\t    var currentSymbol = recognizer.getCurrentToken();\n\t    var expecting = this.getExpectedTokens(recognizer);\n\t    var expectedTokenType = expecting.first(); // get any element\n\t    var tokenText;\n\t    if (expectedTokenType === Token.EOF) {\n\t        tokenText = \"<missing EOF>\";\n\t    } else {\n\t        tokenText = \"<missing \" + recognizer.literalNames[expectedTokenType] + \">\";\n\t    }\n\t    var current = currentSymbol;\n\t    var lookback = recognizer.getTokenStream().LT(-1);\n\t    if (current.type === Token.EOF && lookback !== null) {\n\t        current = lookback;\n\t    }\n\t    return recognizer.getTokenFactory().create(current.source, expectedTokenType, tokenText, Token.DEFAULT_CHANNEL, -1, -1, current.line, current.column);\n\t};\n\n\tDefaultErrorStrategy.prototype.getExpectedTokens = function (recognizer) {\n\t    return recognizer.getExpectedTokens();\n\t};\n\n\t// How should a token be displayed in an error message? The default\n\t// is to display just the text, but during development you might\n\t// want to have a lot of information spit out. Override in that case\n\t// to use t.toString() (which, for CommonToken, dumps everything about\n\t// the token). This is better than forcing you to override a method in\n\t// your token objects because you don't have to go modify your lexer\n\t// so that it creates a new Java type.\n\t//\n\tDefaultErrorStrategy.prototype.getTokenErrorDisplay = function (t) {\n\t    if (t === null) {\n\t        return \"<no token>\";\n\t    }\n\t    var s = t.text;\n\t    if (s === null) {\n\t        if (t.type === Token.EOF) {\n\t            s = \"<EOF>\";\n\t        } else {\n\t            s = \"<\" + t.type + \">\";\n\t        }\n\t    }\n\t    return this.escapeWSAndQuote(s);\n\t};\n\n\tDefaultErrorStrategy.prototype.escapeWSAndQuote = function (s) {\n\t    s = s.replace(/\\n/g, \"\\\\n\");\n\t    s = s.replace(/\\r/g, \"\\\\r\");\n\t    s = s.replace(/\\t/g, \"\\\\t\");\n\t    return \"'\" + s + \"'\";\n\t};\n\n\t// Compute the error recovery set for the current rule. During\n\t// rule invocation, the parser pushes the set of tokens that can\n\t// follow that rule reference on the stack; this amounts to\n\t// computing FIRST of what follows the rule reference in the\n\t// enclosing rule. See LinearApproximator.FIRST().\n\t// This local follow set only includes tokens\n\t// from within the rule; i.e., the FIRST computation done by\n\t// ANTLR stops at the end of a rule.\n\t//\n\t// EXAMPLE\n\t//\n\t// When you find a \"no viable alt exception\", the input is not\n\t// consistent with any of the alternatives for rule r. The best\n\t// thing to do is to consume tokens until you see something that\n\t// can legally follow a call to r//or* any rule that called r.\n\t// You don't want the exact set of viable next tokens because the\n\t// input might just be missing a token--you might consume the\n\t// rest of the input looking for one of the missing tokens.\n\t//\n\t// Consider grammar:\n\t//\n\t// a : '[' b ']'\n\t// | '(' b ')'\n\t// ;\n\t// b : c '^' INT ;\n\t// c : ID\n\t// | INT\n\t// ;\n\t//\n\t// At each rule invocation, the set of tokens that could follow\n\t// that rule is pushed on a stack. Here are the various\n\t// context-sensitive follow sets:\n\t//\n\t// FOLLOW(b1_in_a) = FIRST(']') = ']'\n\t// FOLLOW(b2_in_a) = FIRST(')') = ')'\n\t// FOLLOW(c_in_b) = FIRST('^') = '^'\n\t//\n\t// Upon erroneous input \"[]\", the call chain is\n\t//\n\t// a -> b -> c\n\t//\n\t// and, hence, the follow context stack is:\n\t//\n\t// depth follow set start of rule execution\n\t// 0 <EOF> a (from main())\n\t// 1 ']' b\n\t// 2 '^' c\n\t//\n\t// Notice that ')' is not included, because b would have to have\n\t// been called from a different context in rule a for ')' to be\n\t// included.\n\t//\n\t// For error recovery, we cannot consider FOLLOW(c)\n\t// (context-sensitive or otherwise). We need the combined set of\n\t// all context-sensitive FOLLOW sets--the set of all tokens that\n\t// could follow any reference in the call chain. We need to\n\t// resync to one of those tokens. Note that FOLLOW(c)='^' and if\n\t// we resync'd to that token, we'd consume until EOF. We need to\n\t// sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.\n\t// In this case, for input \"[]\", LA(1) is ']' and in the set, so we would\n\t// not consume anything. After printing an error, rule c would\n\t// return normally. Rule b would not find the required '^' though.\n\t// At this point, it gets a mismatched token error and throws an\n\t// exception (since LA(1) is not in the viable following token\n\t// set). The rule exception handler tries to recover, but finds\n\t// the same recovery set and doesn't consume anything. Rule b\n\t// exits normally returning to rule a. Now it finds the ']' (and\n\t// with the successful match exits errorRecovery mode).\n\t//\n\t// So, you can see that the parser walks up the call chain looking\n\t// for the token that was a member of the recovery set.\n\t//\n\t// Errors are not generated in errorRecovery mode.\n\t//\n\t// ANTLR's error recovery mechanism is based upon original ideas:\n\t//\n\t// \"Algorithms + Data Structures = Programs\" by Niklaus Wirth\n\t//\n\t// and\n\t//\n\t// \"A note on error recovery in recursive descent parsers\":\n\t// http://portal.acm.org/citation.cfm?id=947902.947905\n\t//\n\t// Later, Josef Grosch had some good ideas:\n\t//\n\t// \"Efficient and Comfortable Error Recovery in Recursive Descent\n\t// Parsers\":\n\t// ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip\n\t//\n\t// Like Grosch I implement context-sensitive FOLLOW sets that are combined\n\t// at run-time upon error to avoid overhead during parsing.\n\t//\n\tDefaultErrorStrategy.prototype.getErrorRecoverySet = function (recognizer) {\n\t    var atn = recognizer._interp.atn;\n\t    var ctx = recognizer._ctx;\n\t    var recoverSet = new IntervalSet();\n\t    while (ctx !== null && ctx.invokingState >= 0) {\n\t        // compute what follows who invoked us\n\t        var invokingState = atn.states[ctx.invokingState];\n\t        var rt = invokingState.transitions[0];\n\t        var follow = atn.nextTokens(rt.followState);\n\t        recoverSet.addSet(follow);\n\t        ctx = ctx.parentCtx;\n\t    }\n\t    recoverSet.removeOne(Token.EPSILON);\n\t    return recoverSet;\n\t};\n\n\t// Consume tokens until one matches the given token set.//\n\tDefaultErrorStrategy.prototype.consumeUntil = function (recognizer, set) {\n\t    var ttype = recognizer.getTokenStream().LA(1);\n\t    while (ttype !== Token.EOF && !set.contains(ttype)) {\n\t        recognizer.consume();\n\t        ttype = recognizer.getTokenStream().LA(1);\n\t    }\n\t};\n\n\t//\n\t// This implementation of {@link ANTLRErrorStrategy} responds to syntax errors\n\t// by immediately canceling the parse operation with a\n\t// {@link ParseCancellationException}. The implementation ensures that the\n\t// {@link ParserRuleContext//exception} field is set for all parse tree nodes\n\t// that were not completed prior to encountering the error.\n\t//\n\t// <p>\n\t// This error strategy is useful in the following scenarios.</p>\n\t//\n\t// <ul>\n\t// <li><strong>Two-stage parsing:</strong> This error strategy allows the first\n\t// stage of two-stage parsing to immediately terminate if an error is\n\t// encountered, and immediately fall back to the second stage. In addition to\n\t// avoiding wasted work by attempting to recover from errors here, the empty\n\t// implementation of {@link BailErrorStrategy//sync} improves the performance of\n\t// the first stage.</li>\n\t// <li><strong>Silent validation:</strong> When syntax errors are not being\n\t// reported or logged, and the parse result is simply ignored if errors occur,\n\t// the {@link BailErrorStrategy} avoids wasting work on recovering from errors\n\t// when the result will be ignored either way.</li>\n\t// </ul>\n\t//\n\t// <p>\n\t// {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>\n\t//\n\t// @see Parser//setErrorHandler(ANTLRErrorStrategy)\n\t//\n\tfunction BailErrorStrategy() {\n\t    DefaultErrorStrategy.call(this);\n\t    return this;\n\t}\n\n\tBailErrorStrategy.prototype = Object.create(DefaultErrorStrategy.prototype);\n\tBailErrorStrategy.prototype.constructor = BailErrorStrategy;\n\n\t// Instead of recovering from exception {@code e}, re-throw it wrapped\n\t// in a {@link ParseCancellationException} so it is not caught by the\n\t// rule function catches. Use {@link Exception//getCause()} to get the\n\t// original {@link RecognitionException}.\n\t//\n\tBailErrorStrategy.prototype.recover = function (recognizer, e) {\n\t    var context = recognizer._ctx;\n\t    while (context !== null) {\n\t        context.exception = e;\n\t        context = context.parentCtx;\n\t    }\n\t    throw new ParseCancellationException(e);\n\t};\n\n\t// Make sure we don't attempt to recover inline; if the parser\n\t// successfully recovers, it won't throw an exception.\n\t//\n\tBailErrorStrategy.prototype.recoverInline = function (recognizer) {\n\t    this.recover(recognizer, new InputMismatchException(recognizer));\n\t};\n\n\t// Make sure we don't attempt to recover from problems in subrules.//\n\tBailErrorStrategy.prototype.sync = function (recognizer) {\n\t    // pass\n\t};\n\n\texports.BailErrorStrategy = BailErrorStrategy;\n\texports.DefaultErrorStrategy = DefaultErrorStrategy;\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t//\n\n\tvar InputStream = __webpack_require__(43).InputStream;\n\n\tvar isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';\n\tvar fs = isNodeJs ? __webpack_require__(44) : null;\n\n\t// Utility functions to create InputStreams from various sources.\n\t//\n\t// All returned InputStreams support the full range of Unicode\n\t// up to U+10FFFF (the default behavior of InputStream only supports\n\t// code points up to U+FFFF).\n\tvar CharStreams = {\n\t  // Creates an InputStream from a string.\n\t  fromString: function fromString(str) {\n\t    return new InputStream(str, true);\n\t  },\n\n\t  // Asynchronously creates an InputStream from a blob given the\n\t  // encoding of the bytes in that blob (defaults to 'utf8' if\n\t  // encoding is null).\n\t  //\n\t  // Invokes onLoad(result) on success, onError(error) on\n\t  // failure.\n\t  fromBlob: function fromBlob(blob, encoding, onLoad, onError) {\n\t    var reader = FileReader();\n\t    reader.onload = function (e) {\n\t      var is = new InputStream(e.target.result, true);\n\t      onLoad(is);\n\t    };\n\t    reader.onerror = onError;\n\t    reader.readAsText(blob, encoding);\n\t  },\n\n\t  // Creates an InputStream from a Buffer given the\n\t  // encoding of the bytes in that buffer (defaults to 'utf8' if\n\t  // encoding is null).\n\t  fromBuffer: function fromBuffer(buffer, encoding) {\n\t    return new InputStream(buffer.toString(encoding), true);\n\t  },\n\n\t  // Asynchronously creates an InputStream from a file on disk given\n\t  // the encoding of the bytes in that file (defaults to 'utf8' if\n\t  // encoding is null).\n\t  //\n\t  // Invokes callback(error, result) on completion.\n\t  fromPath: function fromPath(path, encoding, callback) {\n\t    fs.readFile(path, encoding, function (err, data) {\n\t      var is = null;\n\t      if (data !== null) {\n\t        is = new InputStream(data, true);\n\t      }\n\t      callback(err, is);\n\t    });\n\t  },\n\n\t  // Synchronously creates an InputStream given a path to a file\n\t  // on disk and the encoding of the bytes in that file (defaults to\n\t  // 'utf8' if encoding is null).\n\t  fromPathSync: function fromPathSync(path, encoding) {\n\t    var data = fs.readFileSync(path, encoding);\n\t    return new InputStream(data, true);\n\t  }\n\t};\n\n\texports.CharStreams = CharStreams;\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t//\n\n\tvar Token = __webpack_require__(6).Token;\n\t__webpack_require__(33);\n\t__webpack_require__(37);\n\n\t// Vacuum all input from a string and then treat it like a buffer.\n\n\tfunction _loadString(stream, decodeToUnicodeCodePoints) {\n\t\tstream._index = 0;\n\t\tstream.data = [];\n\t\tif (stream.decodeToUnicodeCodePoints) {\n\t\t\tfor (var i = 0; i < stream.strdata.length;) {\n\t\t\t\tvar codePoint = stream.strdata.codePointAt(i);\n\t\t\t\tstream.data.push(codePoint);\n\t\t\t\ti += codePoint <= 0xFFFF ? 1 : 2;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (var i = 0; i < stream.strdata.length; i++) {\n\t\t\t\tvar codeUnit = stream.strdata.charCodeAt(i);\n\t\t\t\tstream.data.push(codeUnit);\n\t\t\t}\n\t\t}\n\t\tstream._size = stream.data.length;\n\t}\n\n\t// If decodeToUnicodeCodePoints is true, the input is treated\n\t// as a series of Unicode code points.\n\t//\n\t// Otherwise, the input is treated as a series of 16-bit UTF-16 code\n\t// units.\n\tfunction InputStream(data, decodeToUnicodeCodePoints) {\n\t\tthis.name = \"<empty>\";\n\t\tthis.strdata = data;\n\t\tthis.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;\n\t\t_loadString(this);\n\t\treturn this;\n\t}\n\n\tObject.defineProperty(InputStream.prototype, \"index\", {\n\t\tget: function get() {\n\t\t\treturn this._index;\n\t\t}\n\t});\n\n\tObject.defineProperty(InputStream.prototype, \"size\", {\n\t\tget: function get() {\n\t\t\treturn this._size;\n\t\t}\n\t});\n\n\t// Reset the stream so that it's in the same state it was\n\t// when the object was created *except* the data array is not\n\t// touched.\n\t//\n\tInputStream.prototype.reset = function () {\n\t\tthis._index = 0;\n\t};\n\n\tInputStream.prototype.consume = function () {\n\t\tif (this._index >= this._size) {\n\t\t\t// assert this.LA(1) == Token.EOF\n\t\t\tthrow \"cannot consume EOF\";\n\t\t}\n\t\tthis._index += 1;\n\t};\n\n\tInputStream.prototype.LA = function (offset) {\n\t\tif (offset === 0) {\n\t\t\treturn 0; // undefined\n\t\t}\n\t\tif (offset < 0) {\n\t\t\toffset += 1; // e.g., translate LA(-1) to use offset=0\n\t\t}\n\t\tvar pos = this._index + offset - 1;\n\t\tif (pos < 0 || pos >= this._size) {\n\t\t\t// invalid\n\t\t\treturn Token.EOF;\n\t\t}\n\t\treturn this.data[pos];\n\t};\n\n\tInputStream.prototype.LT = function (offset) {\n\t\treturn this.LA(offset);\n\t};\n\n\t// mark/release do nothing; we have entire buffer\n\tInputStream.prototype.mark = function () {\n\t\treturn -1;\n\t};\n\n\tInputStream.prototype.release = function (marker) {};\n\n\t// consume() ahead until p==_index; can't just set p=_index as we must\n\t// update line and column. If we seek backwards, just set p\n\t//\n\tInputStream.prototype.seek = function (_index) {\n\t\tif (_index <= this._index) {\n\t\t\tthis._index = _index; // just jump; don't update stream state (line,\n\t\t\t// ...)\n\t\t\treturn;\n\t\t}\n\t\t// seek forward\n\t\tthis._index = Math.min(_index, this._size);\n\t};\n\n\tInputStream.prototype.getText = function (start, stop) {\n\t\tif (stop >= this._size) {\n\t\t\tstop = this._size - 1;\n\t\t}\n\t\tif (start >= this._size) {\n\t\t\treturn \"\";\n\t\t} else {\n\t\t\tif (this.decodeToUnicodeCodePoints) {\n\t\t\t\tvar result = \"\";\n\t\t\t\tfor (var i = start; i <= stop; i++) {\n\t\t\t\t\tresult += String.fromCodePoint(this.data[i]);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this.strdata.slice(start, stop + 1);\n\t\t\t}\n\t\t}\n\t};\n\n\tInputStream.prototype.toString = function () {\n\t\treturn this.strdata;\n\t};\n\n\texports.InputStream = InputStream;\n\n/***/ },\n/* 44 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t//\n\n\t//\n\t//  This is an InputStream that is loaded from a file all at once\n\t//  when you construct the object.\n\t//\n\tvar InputStream = __webpack_require__(43).InputStream;\n\tvar isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';\n\tvar fs = isNodeJs ? __webpack_require__(44) : null;\n\n\tfunction FileStream(fileName, decodeToUnicodeCodePoints) {\n\t\tvar data = fs.readFileSync(fileName, \"utf8\");\n\t\tInputStream.call(this, data, decodeToUnicodeCodePoints);\n\t\tthis.fileName = fileName;\n\t\treturn this;\n\t}\n\n\tFileStream.prototype = Object.create(InputStream.prototype);\n\tFileStream.prototype.constructor = FileStream;\n\n\texports.FileStream = FileStream;\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\t///\n\n\t//\n\t// This class extends {@link BufferedTokenStream} with functionality to filter\n\t// token streams to tokens on a particular channel (tokens where\n\t// {@link Token//getChannel} returns a particular value).\n\t//\n\t// <p>\n\t// This token stream provides access to all tokens by index or when calling\n\t// methods like {@link //getText}. The channel filtering is only used for code\n\t// accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and\n\t// {@link //LB}.</p>\n\t//\n\t// <p>\n\t// By default, tokens are placed on the default channel\n\t// ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the\n\t// {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to\n\t// call {@link Lexer//setChannel}.\n\t// </p>\n\t//\n\t// <p>\n\t// Note: lexer rules which use the {@code ->skip} lexer command or call\n\t// {@link Lexer//skip} do not produce tokens at all, so input text matched by\n\t// such a rule will not be available as part of the token stream, regardless of\n\t// channel.</p>\n\t///\n\n\tvar Token = __webpack_require__(6).Token;\n\tvar BufferedTokenStream = __webpack_require__(47).BufferedTokenStream;\n\n\tfunction CommonTokenStream(lexer, channel) {\n\t    BufferedTokenStream.call(this, lexer);\n\t    this.channel = channel === undefined ? Token.DEFAULT_CHANNEL : channel;\n\t    return this;\n\t}\n\n\tCommonTokenStream.prototype = Object.create(BufferedTokenStream.prototype);\n\tCommonTokenStream.prototype.constructor = CommonTokenStream;\n\n\tCommonTokenStream.prototype.adjustSeekIndex = function (i) {\n\t    return this.nextTokenOnChannel(i, this.channel);\n\t};\n\n\tCommonTokenStream.prototype.LB = function (k) {\n\t    if (k === 0 || this.index - k < 0) {\n\t        return null;\n\t    }\n\t    var i = this.index;\n\t    var n = 1;\n\t    // find k good tokens looking backwards\n\t    while (n <= k) {\n\t        // skip off-channel tokens\n\t        i = this.previousTokenOnChannel(i - 1, this.channel);\n\t        n += 1;\n\t    }\n\t    if (i < 0) {\n\t        return null;\n\t    }\n\t    return this.tokens[i];\n\t};\n\n\tCommonTokenStream.prototype.LT = function (k) {\n\t    this.lazyInit();\n\t    if (k === 0) {\n\t        return null;\n\t    }\n\t    if (k < 0) {\n\t        return this.LB(-k);\n\t    }\n\t    var i = this.index;\n\t    var n = 1; // we know tokens[pos] is a good one\n\t    // find k good tokens\n\t    while (n < k) {\n\t        // skip off-channel tokens, but make sure to not look past EOF\n\t        if (this.sync(i + 1)) {\n\t            i = this.nextTokenOnChannel(i + 1, this.channel);\n\t        }\n\t        n += 1;\n\t    }\n\t    return this.tokens[i];\n\t};\n\n\t// Count EOF just once.///\n\tCommonTokenStream.prototype.getNumberOfOnChannelTokens = function () {\n\t    var n = 0;\n\t    this.fill();\n\t    for (var i = 0; i < this.tokens.length; i++) {\n\t        var t = this.tokens[i];\n\t        if (t.channel === this.channel) {\n\t            n += 1;\n\t        }\n\t        if (t.type === Token.EOF) {\n\t            break;\n\t        }\n\t    }\n\t    return n;\n\t};\n\n\texports.CommonTokenStream = CommonTokenStream;\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t//\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\n\t// This implementation of {@link TokenStream} loads tokens from a\n\t// {@link TokenSource} on-demand, and places the tokens in a buffer to provide\n\t// access to any previous token by index.\n\t//\n\t// <p>\n\t// This token stream ignores the value of {@link Token//getChannel}. If your\n\t// parser requires the token stream filter tokens to only those on a particular\n\t// channel, such as {@link Token//DEFAULT_CHANNEL} or\n\t// {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a\n\t// {@link CommonTokenStream}.</p>\n\n\tvar Token = __webpack_require__(6).Token;\n\tvar Lexer = __webpack_require__(22).Lexer;\n\tvar Interval = __webpack_require__(10).Interval;\n\n\t// this is just to keep meaningful parameter types to Parser\n\tfunction TokenStream() {\n\t\treturn this;\n\t}\n\n\tfunction BufferedTokenStream(tokenSource) {\n\n\t\tTokenStream.call(this);\n\t\t// The {@link TokenSource} from which tokens for this stream are fetched.\n\t\tthis.tokenSource = tokenSource;\n\n\t\t// A collection of all tokens fetched from the token source. The list is\n\t\t// considered a complete view of the input once {@link //fetchedEOF} is set\n\t\t// to {@code true}.\n\t\tthis.tokens = [];\n\n\t\t// The index into {@link //tokens} of the current token (next token to\n\t\t// {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should\n\t\t// be\n\t\t// {@link //LT LT(1)}.\n\t\t//\n\t\t// <p>This field is set to -1 when the stream is first constructed or when\n\t\t// {@link //setTokenSource} is called, indicating that the first token has\n\t\t// not yet been fetched from the token source. For additional information,\n\t\t// see the documentation of {@link IntStream} for a description of\n\t\t// Initializing Methods.</p>\n\t\tthis.index = -1;\n\n\t\t// Indicates whether the {@link Token//EOF} token has been fetched from\n\t\t// {@link //tokenSource} and added to {@link //tokens}. This field improves\n\t\t// performance for the following cases:\n\t\t//\n\t\t// <ul>\n\t\t// <li>{@link //consume}: The lookahead check in {@link //consume} to\n\t\t// prevent\n\t\t// consuming the EOF symbol is optimized by checking the values of\n\t\t// {@link //fetchedEOF} and {@link //p} instead of calling {@link\n\t\t// //LA}.</li>\n\t\t// <li>{@link //fetch}: The check to prevent adding multiple EOF symbols\n\t\t// into\n\t\t// {@link //tokens} is trivial with this field.</li>\n\t\t// <ul>\n\t\tthis.fetchedEOF = false;\n\t\treturn this;\n\t}\n\n\tBufferedTokenStream.prototype = Object.create(TokenStream.prototype);\n\tBufferedTokenStream.prototype.constructor = BufferedTokenStream;\n\n\tBufferedTokenStream.prototype.mark = function () {\n\t\treturn 0;\n\t};\n\n\tBufferedTokenStream.prototype.release = function (marker) {\n\t\t// no resources to release\n\t};\n\n\tBufferedTokenStream.prototype.reset = function () {\n\t\tthis.seek(0);\n\t};\n\n\tBufferedTokenStream.prototype.seek = function (index) {\n\t\tthis.lazyInit();\n\t\tthis.index = this.adjustSeekIndex(index);\n\t};\n\n\tBufferedTokenStream.prototype.get = function (index) {\n\t\tthis.lazyInit();\n\t\treturn this.tokens[index];\n\t};\n\n\tBufferedTokenStream.prototype.consume = function () {\n\t\tvar skipEofCheck = false;\n\t\tif (this.index >= 0) {\n\t\t\tif (this.fetchedEOF) {\n\t\t\t\t// the last token in tokens is EOF. skip check if p indexes any\n\t\t\t\t// fetched token except the last.\n\t\t\t\tskipEofCheck = this.index < this.tokens.length - 1;\n\t\t\t} else {\n\t\t\t\t// no EOF token in tokens. skip check if p indexes a fetched token.\n\t\t\t\tskipEofCheck = this.index < this.tokens.length;\n\t\t\t}\n\t\t} else {\n\t\t\t// not yet initialized\n\t\t\tskipEofCheck = false;\n\t\t}\n\t\tif (!skipEofCheck && this.LA(1) === Token.EOF) {\n\t\t\tthrow \"cannot consume EOF\";\n\t\t}\n\t\tif (this.sync(this.index + 1)) {\n\t\t\tthis.index = this.adjustSeekIndex(this.index + 1);\n\t\t}\n\t};\n\n\t// Make sure index {@code i} in tokens has a token.\n\t//\n\t// @return {@code true} if a token is located at index {@code i}, otherwise\n\t// {@code false}.\n\t// @see //get(int i)\n\t// /\n\tBufferedTokenStream.prototype.sync = function (i) {\n\t\tvar n = i - this.tokens.length + 1; // how many more elements we need?\n\t\tif (n > 0) {\n\t\t\tvar fetched = this.fetch(n);\n\t\t\treturn fetched >= n;\n\t\t}\n\t\treturn true;\n\t};\n\n\t// Add {@code n} elements to buffer.\n\t//\n\t// @return The actual number of elements added to the buffer.\n\t// /\n\tBufferedTokenStream.prototype.fetch = function (n) {\n\t\tif (this.fetchedEOF) {\n\t\t\treturn 0;\n\t\t}\n\t\tfor (var i = 0; i < n; i++) {\n\t\t\tvar t = this.tokenSource.nextToken();\n\t\t\tt.tokenIndex = this.tokens.length;\n\t\t\tthis.tokens.push(t);\n\t\t\tif (t.type === Token.EOF) {\n\t\t\t\tthis.fetchedEOF = true;\n\t\t\t\treturn i + 1;\n\t\t\t}\n\t\t}\n\t\treturn n;\n\t};\n\n\t// Get all tokens from start..stop inclusively///\n\tBufferedTokenStream.prototype.getTokens = function (start, stop, types) {\n\t\tif (types === undefined) {\n\t\t\ttypes = null;\n\t\t}\n\t\tif (start < 0 || stop < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tthis.lazyInit();\n\t\tvar subset = [];\n\t\tif (stop >= this.tokens.length) {\n\t\t\tstop = this.tokens.length - 1;\n\t\t}\n\t\tfor (var i = start; i < stop; i++) {\n\t\t\tvar t = this.tokens[i];\n\t\t\tif (t.type === Token.EOF) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (types === null || types.contains(t.type)) {\n\t\t\t\tsubset.push(t);\n\t\t\t}\n\t\t}\n\t\treturn subset;\n\t};\n\n\tBufferedTokenStream.prototype.LA = function (i) {\n\t\treturn this.LT(i).type;\n\t};\n\n\tBufferedTokenStream.prototype.LB = function (k) {\n\t\tif (this.index - k < 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.tokens[this.index - k];\n\t};\n\n\tBufferedTokenStream.prototype.LT = function (k) {\n\t\tthis.lazyInit();\n\t\tif (k === 0) {\n\t\t\treturn null;\n\t\t}\n\t\tif (k < 0) {\n\t\t\treturn this.LB(-k);\n\t\t}\n\t\tvar i = this.index + k - 1;\n\t\tthis.sync(i);\n\t\tif (i >= this.tokens.length) {\n\t\t\t// return EOF token\n\t\t\t// EOF must be last token\n\t\t\treturn this.tokens[this.tokens.length - 1];\n\t\t}\n\t\treturn this.tokens[i];\n\t};\n\n\t// Allowed derived classes to modify the behavior of operations which change\n\t// the current stream position by adjusting the target token index of a seek\n\t// operation. The default implementation simply returns {@code i}. If an\n\t// exception is thrown in this method, the current stream index should not be\n\t// changed.\n\t//\n\t// <p>For example, {@link CommonTokenStream} overrides this method to ensure\n\t// that\n\t// the seek target is always an on-channel token.</p>\n\t//\n\t// @param i The target token index.\n\t// @return The adjusted target token index.\n\n\tBufferedTokenStream.prototype.adjustSeekIndex = function (i) {\n\t\treturn i;\n\t};\n\n\tBufferedTokenStream.prototype.lazyInit = function () {\n\t\tif (this.index === -1) {\n\t\t\tthis.setup();\n\t\t}\n\t};\n\n\tBufferedTokenStream.prototype.setup = function () {\n\t\tthis.sync(0);\n\t\tthis.index = this.adjustSeekIndex(0);\n\t};\n\n\t// Reset this token stream by setting its token source.///\n\tBufferedTokenStream.prototype.setTokenSource = function (tokenSource) {\n\t\tthis.tokenSource = tokenSource;\n\t\tthis.tokens = [];\n\t\tthis.index = -1;\n\t\tthis.fetchedEOF = false;\n\t};\n\n\t// Given a starting index, return the index of the next token on channel.\n\t// Return i if tokens[i] is on channel. Return -1 if there are no tokens\n\t// on channel between i and EOF.\n\t// /\n\tBufferedTokenStream.prototype.nextTokenOnChannel = function (i, channel) {\n\t\tthis.sync(i);\n\t\tif (i >= this.tokens.length) {\n\t\t\treturn -1;\n\t\t}\n\t\tvar token = this.tokens[i];\n\t\twhile (token.channel !== this.channel) {\n\t\t\tif (token.type === Token.EOF) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\ti += 1;\n\t\t\tthis.sync(i);\n\t\t\ttoken = this.tokens[i];\n\t\t}\n\t\treturn i;\n\t};\n\n\t// Given a starting index, return the index of the previous token on channel.\n\t// Return i if tokens[i] is on channel. Return -1 if there are no tokens\n\t// on channel between i and 0.\n\tBufferedTokenStream.prototype.previousTokenOnChannel = function (i, channel) {\n\t\twhile (i >= 0 && this.tokens[i].channel !== channel) {\n\t\t\ti -= 1;\n\t\t}\n\t\treturn i;\n\t};\n\n\t// Collect all tokens on specified channel to the right of\n\t// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or\n\t// EOF. If channel is -1, find any non default channel token.\n\tBufferedTokenStream.prototype.getHiddenTokensToRight = function (tokenIndex, channel) {\n\t\tif (channel === undefined) {\n\t\t\tchannel = -1;\n\t\t}\n\t\tthis.lazyInit();\n\t\tif (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n\t\t\tthrow \"\" + tokenIndex + \" not in 0..\" + this.tokens.length - 1;\n\t\t}\n\t\tvar nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL);\n\t\tvar from_ = tokenIndex + 1;\n\t\t// if none onchannel to right, nextOnChannel=-1 so set to = last token\n\t\tvar to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;\n\t\treturn this.filterForChannel(from_, to, channel);\n\t};\n\n\t// Collect all tokens on specified channel to the left of\n\t// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.\n\t// If channel is -1, find any non default channel token.\n\tBufferedTokenStream.prototype.getHiddenTokensToLeft = function (tokenIndex, channel) {\n\t\tif (channel === undefined) {\n\t\t\tchannel = -1;\n\t\t}\n\t\tthis.lazyInit();\n\t\tif (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n\t\t\tthrow \"\" + tokenIndex + \" not in 0..\" + this.tokens.length - 1;\n\t\t}\n\t\tvar prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);\n\t\tif (prevOnChannel === tokenIndex - 1) {\n\t\t\treturn null;\n\t\t}\n\t\t// if none on channel to left, prevOnChannel=-1 then from=0\n\t\tvar from_ = prevOnChannel + 1;\n\t\tvar to = tokenIndex - 1;\n\t\treturn this.filterForChannel(from_, to, channel);\n\t};\n\n\tBufferedTokenStream.prototype.filterForChannel = function (left, right, channel) {\n\t\tvar hidden = [];\n\t\tfor (var i = left; i < right + 1; i++) {\n\t\t\tvar t = this.tokens[i];\n\t\t\tif (channel === -1) {\n\t\t\t\tif (t.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {\n\t\t\t\t\thidden.push(t);\n\t\t\t\t}\n\t\t\t} else if (t.channel === channel) {\n\t\t\t\thidden.push(t);\n\t\t\t}\n\t\t}\n\t\tif (hidden.length === 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn hidden;\n\t};\n\n\tBufferedTokenStream.prototype.getSourceName = function () {\n\t\treturn this.tokenSource.getSourceName();\n\t};\n\n\t// Get the text of all tokens in this buffer.///\n\tBufferedTokenStream.prototype.getText = function (interval) {\n\t\tthis.lazyInit();\n\t\tthis.fill();\n\t\tif (interval === undefined || interval === null) {\n\t\t\tinterval = new Interval(0, this.tokens.length - 1);\n\t\t}\n\t\tvar start = interval.start;\n\t\tif (start instanceof Token) {\n\t\t\tstart = start.tokenIndex;\n\t\t}\n\t\tvar stop = interval.stop;\n\t\tif (stop instanceof Token) {\n\t\t\tstop = stop.tokenIndex;\n\t\t}\n\t\tif (start === null || stop === null || start < 0 || stop < 0) {\n\t\t\treturn \"\";\n\t\t}\n\t\tif (stop >= this.tokens.length) {\n\t\t\tstop = this.tokens.length - 1;\n\t\t}\n\t\tvar s = \"\";\n\t\tfor (var i = start; i < stop + 1; i++) {\n\t\t\tvar t = this.tokens[i];\n\t\t\tif (t.type === Token.EOF) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ts = s + t.text;\n\t\t}\n\t\treturn s;\n\t};\n\n\t// Get all tokens from lexer until EOF///\n\tBufferedTokenStream.prototype.fill = function () {\n\t\tthis.lazyInit();\n\t\twhile (this.fetch(1000) === 1000) {\n\t\t\tcontinue;\n\t\t}\n\t};\n\n\texports.BufferedTokenStream = BufferedTokenStream;\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n\t * Use of this file is governed by the BSD 3-clause license that\n\t * can be found in the LICENSE.txt file in the project root.\n\t */\n\n\tvar Token = __webpack_require__(6).Token;\n\tvar ParseTreeListener = __webpack_require__(14).ParseTreeListener;\n\tvar Recognizer = __webpack_require__(23).Recognizer;\n\tvar DefaultErrorStrategy = __webpack_require__(41).DefaultErrorStrategy;\n\tvar ATNDeserializer = __webpack_require__(17).ATNDeserializer;\n\tvar ATNDeserializationOptions = __webpack_require__(19).ATNDeserializationOptions;\n\tvar TerminalNode = __webpack_require__(14).TerminalNode;\n\tvar ErrorNode = __webpack_require__(14).ErrorNode;\n\n\tfunction TraceListener(parser) {\n\t\tParseTreeListener.call(this);\n\t\tthis.parser = parser;\n\t\treturn this;\n\t}\n\n\tTraceListener.prototype = Object.create(ParseTreeListener.prototype);\n\tTraceListener.prototype.constructor = TraceListener;\n\n\tTraceListener.prototype.enterEveryRule = function (ctx) {\n\t\tconsole.log(\"enter   \" + this.parser.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n\t};\n\n\tTraceListener.prototype.visitTerminal = function (node) {\n\t\tconsole.log(\"consume \" + node.symbol + \" rule \" + this.parser.ruleNames[this.parser._ctx.ruleIndex]);\n\t};\n\n\tTraceListener.prototype.exitEveryRule = function (ctx) {\n\t\tconsole.log(\"exit    \" + this.parser.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n\t};\n\n\t// this is all the parsing support code essentially; most of it is error\n\t// recovery stuff.//\n\tfunction Parser(input) {\n\t\tRecognizer.call(this);\n\t\t// The input stream.\n\t\tthis._input = null;\n\t\t// The error handling strategy for the parser. The default value is a new\n\t\t// instance of {@link DefaultErrorStrategy}.\n\t\tthis._errHandler = new DefaultErrorStrategy();\n\t\tthis._precedenceStack = [];\n\t\tthis._precedenceStack.push(0);\n\t\t// The {@link ParserRuleContext} object for the currently executing rule.\n\t\t// this is always non-null during the parsing process.\n\t\tthis._ctx = null;\n\t\t// Specifies whether or not the parser should construct a parse tree during\n\t\t// the parsing process. The default value is {@code true}.\n\t\tthis.buildParseTrees = true;\n\t\t// When {@link //setTrace}{@code (true)} is called, a reference to the\n\t\t// {@link TraceListener} is stored here so it can be easily removed in a\n\t\t// later call to {@link //setTrace}{@code (false)}. The listener itself is\n\t\t// implemented as a parser listener so this field is not directly used by\n\t\t// other parser methods.\n\t\tthis._tracer = null;\n\t\t// The list of {@link ParseTreeListener} listeners registered to receive\n\t\t// events during the parse.\n\t\tthis._parseListeners = null;\n\t\t// The number of syntax errors reported during parsing. this value is\n\t\t// incremented each time {@link //notifyErrorListeners} is called.\n\t\tthis._syntaxErrors = 0;\n\t\tthis.setInputStream(input);\n\t\treturn this;\n\t}\n\n\tParser.prototype = Object.create(Recognizer.prototype);\n\tParser.prototype.contructor = Parser;\n\n\t// this field maps from the serialized ATN string to the deserialized {@link\n\t// ATN} with\n\t// bypass alternatives.\n\t//\n\t// @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()\n\t//\n\tParser.bypassAltsAtnCache = {};\n\n\t// reset the parser's state//\n\tParser.prototype.reset = function () {\n\t\tif (this._input !== null) {\n\t\t\tthis._input.seek(0);\n\t\t}\n\t\tthis._errHandler.reset(this);\n\t\tthis._ctx = null;\n\t\tthis._syntaxErrors = 0;\n\t\tthis.setTrace(false);\n\t\tthis._precedenceStack = [];\n\t\tthis._precedenceStack.push(0);\n\t\tif (this._interp !== null) {\n\t\t\tthis._interp.reset();\n\t\t}\n\t};\n\n\t// Match current input symbol against {@code ttype}. If the symbol type\n\t// matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are\n\t// called to complete the match process.\n\t//\n\t// <p>If the symbol type does not match,\n\t// {@link ANTLRErrorStrategy//recoverInline} is called on the current error\n\t// strategy to attempt recovery. If {@link //getBuildParseTree} is\n\t// {@code true} and the token index of the symbol returned by\n\t// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to\n\t// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>\n\t//\n\t// @param ttype the token type to match\n\t// @return the matched symbol\n\t// @throws RecognitionException if the current input symbol did not match\n\t// {@code ttype} and the error strategy could not recover from the\n\t// mismatched symbol\n\n\tParser.prototype.match = function (ttype) {\n\t\tvar t = this.getCurrentToken();\n\t\tif (t.type === ttype) {\n\t\t\tthis._errHandler.reportMatch(this);\n\t\t\tthis.consume();\n\t\t} else {\n\t\t\tt = this._errHandler.recoverInline(this);\n\t\t\tif (this.buildParseTrees && t.tokenIndex === -1) {\n\t\t\t\t// we must have conjured up a new token during single token\n\t\t\t\t// insertion\n\t\t\t\t// if it's not the current symbol\n\t\t\t\tthis._ctx.addErrorNode(t);\n\t\t\t}\n\t\t}\n\t\treturn t;\n\t};\n\t// Match current input symbol as a wildcard. If the symbol type matches\n\t// (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}\n\t// and {@link //consume} are called to complete the match process.\n\t//\n\t// <p>If the symbol type does not match,\n\t// {@link ANTLRErrorStrategy//recoverInline} is called on the current error\n\t// strategy to attempt recovery. If {@link //getBuildParseTree} is\n\t// {@code true} and the token index of the symbol returned by\n\t// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to\n\t// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>\n\t//\n\t// @return the matched symbol\n\t// @throws RecognitionException if the current input symbol did not match\n\t// a wildcard and the error strategy could not recover from the mismatched\n\t// symbol\n\n\tParser.prototype.matchWildcard = function () {\n\t\tvar t = this.getCurrentToken();\n\t\tif (t.type > 0) {\n\t\t\tthis._errHandler.reportMatch(this);\n\t\t\tthis.consume();\n\t\t} else {\n\t\t\tt = this._errHandler.recoverInline(this);\n\t\t\tif (this._buildParseTrees && t.tokenIndex === -1) {\n\t\t\t\t// we must have conjured up a new token during single token\n\t\t\t\t// insertion\n\t\t\t\t// if it's not the current symbol\n\t\t\t\tthis._ctx.addErrorNode(t);\n\t\t\t}\n\t\t}\n\t\treturn t;\n\t};\n\n\tParser.prototype.getParseListeners = function () {\n\t\treturn this._parseListeners || [];\n\t};\n\n\t// Registers {@code listener} to receive events during the parsing process.\n\t//\n\t// <p>To support output-preserving grammar transformations (including but not\n\t// limited to left-recursion removal, automated left-factoring, and\n\t// optimized code generation), calls to listener methods during the parse\n\t// may differ substantially from calls made by\n\t// {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In\n\t// particular, rule entry and exit events may occur in a different order\n\t// during the parse than after the parser. In addition, calls to certain\n\t// rule entry methods may be omitted.</p>\n\t//\n\t// <p>With the following specific exceptions, calls to listener events are\n\t// <em>deterministic</em>, i.e. for identical input the calls to listener\n\t// methods will be the same.</p>\n\t//\n\t// <ul>\n\t// <li>Alterations to the grammar used to generate code may change the\n\t// behavior of the listener calls.</li>\n\t// <li>Alterations to the command line options passed to ANTLR 4 when\n\t// generating the parser may change the behavior of the listener calls.</li>\n\t// <li>Changing the version of the ANTLR Tool used to generate the parser\n\t// may change the behavior of the listener calls.</li>\n\t// </ul>\n\t//\n\t// @param listener the listener to add\n\t//\n\t// @throws NullPointerException if {@code} listener is {@code null}\n\t//\n\tParser.prototype.addParseListener = function (listener) {\n\t\tif (listener === null) {\n\t\t\tthrow \"listener\";\n\t\t}\n\t\tif (this._parseListeners === null) {\n\t\t\tthis._parseListeners = [];\n\t\t}\n\t\tthis._parseListeners.push(listener);\n\t};\n\n\t//\n\t// Remove {@code listener} from the list of parse listeners.\n\t//\n\t// <p>If {@code listener} is {@code null} or has not been added as a parse\n\t// listener, this method does nothing.</p>\n\t// @param listener the listener to remove\n\t//\n\tParser.prototype.removeParseListener = function (listener) {\n\t\tif (this._parseListeners !== null) {\n\t\t\tvar idx = this._parseListeners.indexOf(listener);\n\t\t\tif (idx >= 0) {\n\t\t\t\tthis._parseListeners.splice(idx, 1);\n\t\t\t}\n\t\t\tif (this._parseListeners.length === 0) {\n\t\t\t\tthis._parseListeners = null;\n\t\t\t}\n\t\t}\n\t};\n\n\t// Remove all parse listeners.\n\tParser.prototype.removeParseListeners = function () {\n\t\tthis._parseListeners = null;\n\t};\n\n\t// Notify any parse listeners of an enter rule event.\n\tParser.prototype.triggerEnterRuleEvent = function () {\n\t\tif (this._parseListeners !== null) {\n\t\t\tvar ctx = this._ctx;\n\t\t\tthis._parseListeners.map(function (listener) {\n\t\t\t\tlistener.enterEveryRule(ctx);\n\t\t\t\tctx.enterRule(listener);\n\t\t\t});\n\t\t}\n\t};\n\n\t//\n\t// Notify any parse listeners of an exit rule event.\n\t//\n\t// @see //addParseListener\n\t//\n\tParser.prototype.triggerExitRuleEvent = function () {\n\t\tif (this._parseListeners !== null) {\n\t\t\t// reverse order walk of listeners\n\t\t\tvar ctx = this._ctx;\n\t\t\tthis._parseListeners.slice(0).reverse().map(function (listener) {\n\t\t\t\tctx.exitRule(listener);\n\t\t\t\tlistener.exitEveryRule(ctx);\n\t\t\t});\n\t\t}\n\t};\n\n\tParser.prototype.getTokenFactory = function () {\n\t\treturn this._input.tokenSource._factory;\n\t};\n\n\t// Tell our token source and error strategy about a new way to create tokens.//\n\tParser.prototype.setTokenFactory = function (factory) {\n\t\tthis._input.tokenSource._factory = factory;\n\t};\n\n\t// The ATN with bypass alternatives is expensive to create so we create it\n\t// lazily.\n\t//\n\t// @throws UnsupportedOperationException if the current parser does not\n\t// implement the {@link //getSerializedATN()} method.\n\t//\n\tParser.prototype.getATNWithBypassAlts = function () {\n\t\tvar serializedAtn = this.getSerializedATN();\n\t\tif (serializedAtn === null) {\n\t\t\tthrow \"The current parser does not support an ATN with bypass alternatives.\";\n\t\t}\n\t\tvar result = this.bypassAltsAtnCache[serializedAtn];\n\t\tif (result === null) {\n\t\t\tvar deserializationOptions = new ATNDeserializationOptions();\n\t\t\tdeserializationOptions.generateRuleBypassTransitions = true;\n\t\t\tresult = new ATNDeserializer(deserializationOptions).deserialize(serializedAtn);\n\t\t\tthis.bypassAltsAtnCache[serializedAtn] = result;\n\t\t}\n\t\treturn result;\n\t};\n\n\t// The preferred method of getting a tree pattern. For example, here's a\n\t// sample use:\n\t//\n\t// <pre>\n\t// ParseTree t = parser.expr();\n\t// ParseTreePattern p = parser.compileParseTreePattern(\"&lt;ID&gt;+0\",\n\t// MyParser.RULE_expr);\n\t// ParseTreeMatch m = p.match(t);\n\t// String id = m.get(\"ID\");\n\t// </pre>\n\n\tvar Lexer = __webpack_require__(22).Lexer;\n\n\tParser.prototype.compileParseTreePattern = function (pattern, patternRuleIndex, lexer) {\n\t\tlexer = lexer || null;\n\t\tif (lexer === null) {\n\t\t\tif (this.getTokenStream() !== null) {\n\t\t\t\tvar tokenSource = this.getTokenStream().tokenSource;\n\t\t\t\tif (tokenSource instanceof Lexer) {\n\t\t\t\t\tlexer = tokenSource;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (lexer === null) {\n\t\t\tthrow \"Parser can't discover a lexer to use\";\n\t\t}\n\t\tvar m = new ParseTreePatternMatcher(lexer, this);\n\t\treturn m.compile(pattern, patternRuleIndex);\n\t};\n\n\tParser.prototype.getInputStream = function () {\n\t\treturn this.getTokenStream();\n\t};\n\n\tParser.prototype.setInputStream = function (input) {\n\t\tthis.setTokenStream(input);\n\t};\n\n\tParser.prototype.getTokenStream = function () {\n\t\treturn this._input;\n\t};\n\n\t// Set the token stream and reset the parser.//\n\tParser.prototype.setTokenStream = function (input) {\n\t\tthis._input = null;\n\t\tthis.reset();\n\t\tthis._input = input;\n\t};\n\n\t// Match needs to return the current input symbol, which gets put\n\t// into the label for the associated token ref; e.g., x=ID.\n\t//\n\tParser.prototype.getCurrentToken = function () {\n\t\treturn this._input.LT(1);\n\t};\n\n\tParser.prototype.notifyErrorListeners = function (msg, offendingToken, err) {\n\t\toffendingToken = offendingToken || null;\n\t\terr = err || null;\n\t\tif (offendingToken === null) {\n\t\t\toffendingToken = this.getCurrentToken();\n\t\t}\n\t\tthis._syntaxErrors += 1;\n\t\tvar line = offendingToken.line;\n\t\tvar column = offendingToken.column;\n\t\tvar listener = this.getErrorListenerDispatch();\n\t\tlistener.syntaxError(this, offendingToken, line, column, msg, err);\n\t};\n\n\t//\n\t// Consume and return the {@linkplain //getCurrentToken current symbol}.\n\t//\n\t// <p>E.g., given the following input with {@code A} being the current\n\t// lookahead symbol, this function moves the cursor to {@code B} and returns\n\t// {@code A}.</p>\n\t//\n\t// <pre>\n\t// A B\n\t// ^\n\t// </pre>\n\t//\n\t// If the parser is not in error recovery mode, the consumed symbol is added\n\t// to the parse tree using {@link ParserRuleContext//addChild(Token)}, and\n\t// {@link ParseTreeListener//visitTerminal} is called on any parse listeners.\n\t// If the parser <em>is</em> in error recovery mode, the consumed symbol is\n\t// added to the parse tree using\n\t// {@link ParserRuleContext//addErrorNode(Token)}, and\n\t// {@link ParseTreeListener//visitErrorNode} is called on any parse\n\t// listeners.\n\t//\n\tParser.prototype.consume = function () {\n\t\tvar o = this.getCurrentToken();\n\t\tif (o.type !== Token.EOF) {\n\t\t\tthis.getInputStream().consume();\n\t\t}\n\t\tvar hasListener = this._parseListeners !== null && this._parseListeners.length > 0;\n\t\tif (this.buildParseTrees || hasListener) {\n\t\t\tvar node;\n\t\t\tif (this._errHandler.inErrorRecoveryMode(this)) {\n\t\t\t\tnode = this._ctx.addErrorNode(o);\n\t\t\t} else {\n\t\t\t\tnode = this._ctx.addTokenNode(o);\n\t\t\t}\n\t\t\tnode.invokingState = this.state;\n\t\t\tif (hasListener) {\n\t\t\t\tthis._parseListeners.map(function (listener) {\n\t\t\t\t\tif (node instanceof ErrorNode || node.isErrorNode !== undefined && node.isErrorNode()) {\n\t\t\t\t\t\tlistener.visitErrorNode(node);\n\t\t\t\t\t} else if (node instanceof TerminalNode) {\n\t\t\t\t\t\tlistener.visitTerminal(node);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn o;\n\t};\n\n\tParser.prototype.addContextToParseTree = function () {\n\t\t// add current context to parent if we have a parent\n\t\tif (this._ctx.parentCtx !== null) {\n\t\t\tthis._ctx.parentCtx.addChild(this._ctx);\n\t\t}\n\t};\n\n\t// Always called by generated parsers upon entry to a rule. Access field\n\t// {@link //_ctx} get the current context.\n\n\tParser.prototype.enterRule = function (localctx, state, ruleIndex) {\n\t\tthis.state = state;\n\t\tthis._ctx = localctx;\n\t\tthis._ctx.start = this._input.LT(1);\n\t\tif (this.buildParseTrees) {\n\t\t\tthis.addContextToParseTree();\n\t\t}\n\t\tif (this._parseListeners !== null) {\n\t\t\tthis.triggerEnterRuleEvent();\n\t\t}\n\t};\n\n\tParser.prototype.exitRule = function () {\n\t\tthis._ctx.stop = this._input.LT(-1);\n\t\t// trigger event on _ctx, before it reverts to parent\n\t\tif (this._parseListeners !== null) {\n\t\t\tthis.triggerExitRuleEvent();\n\t\t}\n\t\tthis.state = this._ctx.invokingState;\n\t\tthis._ctx = this._ctx.parentCtx;\n\t};\n\n\tParser.prototype.enterOuterAlt = function (localctx, altNum) {\n\t\tlocalctx.setAltNumber(altNum);\n\t\t// if we have new localctx, make sure we replace existing ctx\n\t\t// that is previous child of parse tree\n\t\tif (this.buildParseTrees && this._ctx !== localctx) {\n\t\t\tif (this._ctx.parentCtx !== null) {\n\t\t\t\tthis._ctx.parentCtx.removeLastChild();\n\t\t\t\tthis._ctx.parentCtx.addChild(localctx);\n\t\t\t}\n\t\t}\n\t\tthis._ctx = localctx;\n\t};\n\n\t// Get the precedence level for the top-most precedence rule.\n\t//\n\t// @return The precedence level for the top-most precedence rule, or -1 if\n\t// the parser context is not nested within a precedence rule.\n\n\tParser.prototype.getPrecedence = function () {\n\t\tif (this._precedenceStack.length === 0) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn this._precedenceStack[this._precedenceStack.length - 1];\n\t\t}\n\t};\n\n\tParser.prototype.enterRecursionRule = function (localctx, state, ruleIndex, precedence) {\n\t\tthis.state = state;\n\t\tthis._precedenceStack.push(precedence);\n\t\tthis._ctx = localctx;\n\t\tthis._ctx.start = this._input.LT(1);\n\t\tif (this._parseListeners !== null) {\n\t\t\tthis.triggerEnterRuleEvent(); // simulates rule entry for\n\t\t\t// left-recursive rules\n\t\t}\n\t};\n\n\t//\n\t// Like {@link //enterRule} but for recursive rules.\n\n\tParser.prototype.pushNewRecursionContext = function (localctx, state, ruleIndex) {\n\t\tvar previous = this._ctx;\n\t\tprevious.parentCtx = localctx;\n\t\tprevious.invokingState = state;\n\t\tprevious.stop = this._input.LT(-1);\n\n\t\tthis._ctx = localctx;\n\t\tthis._ctx.start = previous.start;\n\t\tif (this.buildParseTrees) {\n\t\t\tthis._ctx.addChild(previous);\n\t\t}\n\t\tif (this._parseListeners !== null) {\n\t\t\tthis.triggerEnterRuleEvent(); // simulates rule entry for\n\t\t\t// left-recursive rules\n\t\t}\n\t};\n\n\tParser.prototype.unrollRecursionContexts = function (parentCtx) {\n\t\tthis._precedenceStack.pop();\n\t\tthis._ctx.stop = this._input.LT(-1);\n\t\tvar retCtx = this._ctx; // save current ctx (return value)\n\t\t// unroll so _ctx is as it was before call to recursive method\n\t\tif (this._parseListeners !== null) {\n\t\t\twhile (this._ctx !== parentCtx) {\n\t\t\t\tthis.triggerExitRuleEvent();\n\t\t\t\tthis._ctx = this._ctx.parentCtx;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._ctx = parentCtx;\n\t\t}\n\t\t// hook into tree\n\t\tretCtx.parentCtx = parentCtx;\n\t\tif (this.buildParseTrees && parentCtx !== null) {\n\t\t\t// add return ctx into invoking rule's tree\n\t\t\tparentCtx.addChild(retCtx);\n\t\t}\n\t};\n\n\tParser.prototype.getInvokingContext = function (ruleIndex) {\n\t\tvar ctx = this._ctx;\n\t\twhile (ctx !== null) {\n\t\t\tif (ctx.ruleIndex === ruleIndex) {\n\t\t\t\treturn ctx;\n\t\t\t}\n\t\t\tctx = ctx.parentCtx;\n\t\t}\n\t\treturn null;\n\t};\n\n\tParser.prototype.precpred = function (localctx, precedence) {\n\t\treturn precedence >= this._precedenceStack[this._precedenceStack.length - 1];\n\t};\n\n\tParser.prototype.inContext = function (context) {\n\t\t// TODO: useful in parser?\n\t\treturn false;\n\t};\n\n\t//\n\t// Checks whether or not {@code symbol} can follow the current state in the\n\t// ATN. The behavior of this method is equivalent to the following, but is\n\t// implemented such that the complete context-sensitive follow set does not\n\t// need to be explicitly constructed.\n\t//\n\t// <pre>\n\t// return getExpectedTokens().contains(symbol);\n\t// </pre>\n\t//\n\t// @param symbol the symbol type to check\n\t// @return {@code true} if {@code symbol} can follow the current state in\n\t// the ATN, otherwise {@code false}.\n\n\tParser.prototype.isExpectedToken = function (symbol) {\n\t\tvar atn = this._interp.atn;\n\t\tvar ctx = this._ctx;\n\t\tvar s = atn.states[this.state];\n\t\tvar following = atn.nextTokens(s);\n\t\tif (following.contains(symbol)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!following.contains(Token.EPSILON)) {\n\t\t\treturn false;\n\t\t}\n\t\twhile (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {\n\t\t\tvar invokingState = atn.states[ctx.invokingState];\n\t\t\tvar rt = invokingState.transitions[0];\n\t\t\tfollowing = atn.nextTokens(rt.followState);\n\t\t\tif (following.contains(symbol)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tctx = ctx.parentCtx;\n\t\t}\n\t\tif (following.contains(Token.EPSILON) && symbol === Token.EOF) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t};\n\n\t// Computes the set of input symbols which could follow the current parser\n\t// state and context, as given by {@link //getState} and {@link //getContext},\n\t// respectively.\n\t//\n\t// @see ATN//getExpectedTokens(int, RuleContext)\n\t//\n\tParser.prototype.getExpectedTokens = function () {\n\t\treturn this._interp.atn.getExpectedTokens(this.state, this._ctx);\n\t};\n\n\tParser.prototype.getExpectedTokensWithinCurrentRule = function () {\n\t\tvar atn = this._interp.atn;\n\t\tvar s = atn.states[this.state];\n\t\treturn atn.nextTokens(s);\n\t};\n\n\t// Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.//\n\tParser.prototype.getRuleIndex = function (ruleName) {\n\t\tvar ruleIndex = this.getRuleIndexMap()[ruleName];\n\t\tif (ruleIndex !== null) {\n\t\t\treturn ruleIndex;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t};\n\n\t// Return List&lt;String&gt; of the rule names in your parser instance\n\t// leading up to a call to the current rule. You could override if\n\t// you want more details such as the file/line info of where\n\t// in the ATN a rule is invoked.\n\t//\n\t// this is very useful for error messages.\n\t//\n\tParser.prototype.getRuleInvocationStack = function (p) {\n\t\tp = p || null;\n\t\tif (p === null) {\n\t\t\tp = this._ctx;\n\t\t}\n\t\tvar stack = [];\n\t\twhile (p !== null) {\n\t\t\t// compute what follows who invoked us\n\t\t\tvar ruleIndex = p.ruleIndex;\n\t\t\tif (ruleIndex < 0) {\n\t\t\t\tstack.push(\"n/a\");\n\t\t\t} else {\n\t\t\t\tstack.push(this.ruleNames[ruleIndex]);\n\t\t\t}\n\t\t\tp = p.parentCtx;\n\t\t}\n\t\treturn stack;\n\t};\n\n\t// For debugging and other purposes.//\n\tParser.prototype.getDFAStrings = function () {\n\t\treturn this._interp.decisionToDFA.toString();\n\t};\n\t// For debugging and other purposes.//\n\tParser.prototype.dumpDFA = function () {\n\t\tvar seenOne = false;\n\t\tfor (var i = 0; i < this._interp.decisionToDFA.length; i++) {\n\t\t\tvar dfa = this._interp.decisionToDFA[i];\n\t\t\tif (dfa.states.length > 0) {\n\t\t\t\tif (seenOne) {\n\t\t\t\t\tconsole.log();\n\t\t\t\t}\n\t\t\t\tthis.printer.println(\"Decision \" + dfa.decision + \":\");\n\t\t\t\tthis.printer.print(dfa.toString(this.literalNames, this.symbolicNames));\n\t\t\t\tseenOne = true;\n\t\t\t}\n\t\t}\n\t};\n\n\t/*\n\t\"\t\t\tprinter = function() {\\r\\n\" +\n\t\"\t\t\t\tthis.println = function(s) { document.getElementById('output') += s + '\\\\n'; }\\r\\n\" +\n\t\"\t\t\t\tthis.print = function(s) { document.getElementById('output') += s; }\\r\\n\" +\n\t\"\t\t\t};\\r\\n\" +\n\t*/\n\n\tParser.prototype.getSourceName = function () {\n\t\treturn this._input.sourceName;\n\t};\n\n\t// During a parse is sometimes useful to listen in on the rule entry and exit\n\t// events as well as token matches. this is for quick and dirty debugging.\n\t//\n\tParser.prototype.setTrace = function (trace) {\n\t\tif (!trace) {\n\t\t\tthis.removeParseListener(this._tracer);\n\t\t\tthis._tracer = null;\n\t\t} else {\n\t\t\tif (this._tracer !== null) {\n\t\t\t\tthis.removeParseListener(this._tracer);\n\t\t\t}\n\t\t\tthis._tracer = new TraceListener(this);\n\t\t\tthis.addParseListener(this._tracer);\n\t\t}\n\t};\n\n\texports.Parser = Parser;\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\t// Generated from QLLexer.g4 by ANTLR 4.7\n\t// jshint ignore: start\n\tvar antlr4 = __webpack_require__(1);\n\n\tvar serializedATN = [\"\\x03\\u608B\\uA72A\\u8133\\uB9ED\\u417C\\u3BE7\\u7786\\u5964\", \"\\x02W\\u0271\\b\\x01\\b\\x01\\x04\\x02\\t\\x02\\x04\\x03\\t\\x03\", \"\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\\x07\", \"\\t\\x07\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\x0B\\t\\x0B\\x04\", \"\\f\\t\\f\\x04\\r\\t\\r\\x04\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\", \"\\t\\x10\\x04\\x11\\t\\x11\\x04\\x12\\t\\x12\\x04\\x13\\t\\x13\", \"\\x04\\x14\\t\\x14\\x04\\x15\\t\\x15\\x04\\x16\\t\\x16\\x04\\x17\", \"\\t\\x17\\x04\\x18\\t\\x18\\x04\\x19\\t\\x19\\x04\\x1A\\t\\x1A\", \"\\x04\\x1B\\t\\x1B\\x04\\x1C\\t\\x1C\\x04\\x1D\\t\\x1D\\x04\\x1E\", \"\\t\\x1E\\x04\\x1F\\t\\x1F\\x04 \\t \\x04!\\t!\\x04\\\"\\t\\\"\\x04#\", \"\\t#\\x04$\\t$\\x04%\\t%\\x04&\\t&\\x04'\\t'\\x04(\\t(\\x04)\\t)\\x04\", \"*\\t*\\x04+\\t+\\x04,\\t,\\x04-\\t-\\x04.\\t.\\x04/\\t/\\x040\\t0\\x04\", \"1\\t1\\x042\\t2\\x043\\t3\\x044\\t4\\x045\\t5\\x046\\t6\\x047\\t7\\x04\", \"8\\t8\\x049\\t9\\x04:\\t:\\x04;\\t;\\x04<\\t<\\x04=\\t=\\x04>\\t>\\x04\", \"?\\t?\\x04@\\t@\\x04A\\tA\\x04B\\tB\\x04C\\tC\\x04D\\tD\\x04E\\tE\\x04\", \"F\\tF\\x04G\\tG\\x04H\\tH\\x04I\\tI\\x04J\\tJ\\x04K\\tK\\x04L\\tL\\x04\", \"M\\tM\\x04N\\tN\\x04O\\tO\\x04P\\tP\\x04Q\\tQ\\x04R\\tR\\x04S\\tS\\x04\", \"T\\tT\\x04U\\tU\\x04V\\tV\\x04W\\tW\\x04X\\tX\\x04Y\\tY\\x04Z\\tZ\\x03\", \"\\x02\\x03\\x02\\x03\\x02\\x03\\x02\\x03\\x03\\x03\\x03\\x03\", \"\\x03\\x03\\x03\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x05\\x03\", \"\\x05\\x03\\x05\\x03\\x05\\x03\\x06\\x03\\x06\\x03\\x06\\x03\", \"\\x06\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\x07\\x03\", \"\\x07\\x03\\x07\\x03\\x07\\x03\\b\\x03\\b\\x03\\b\\x03\\t\\x03\", \"\\t\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\", \"\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\x0B\\x03\\x0B\\x03\\x0B\\x03\", \"\\x0B\\x03\\x0B\\x03\\x0B\\x03\\f\\x03\\f\\x03\\f\\x03\\f\\x03\", \"\\f\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\x0E\\x03\\x0E\\x03\", \"\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\", \"\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x10\\x03\\x10\\x03\", \"\\x10\\x03\\x10\\x03\\x10\\x03\\x10\\x03\\x10\\x03\\x10\\x03\", \"\\x11\\x03\\x11\\x03\\x11\\x03\\x11\\x03\\x11\\x03\\x11\\x03\", \"\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\", \"\\x13\\x03\\x13\\x03\\x13\\x03\\x13\\x03\\x13\\x03\\x13\\x03\", \"\\x13\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\", \"\\x14\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\", \"\\x16\\x03\\x16\\x03\\x16\\x03\\x17\\x03\\x17\\x03\\x17\\x03\", \"\\x17\\x03\\x17\\x03\\x17\\x03\\x17\\x03\\x17\\x03\\x18\\x03\", \"\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\", \"\\x19\\x03\\x19\\x03\\x19\\x03\\x1A\\x03\\x1A\\x03\\x1A\\x03\", \"\\x1A\\x03\\x1A\\x03\\x1A\\x03\\x1A\\x03\\x1A\\x03\\x1A\\x03\", \"\\x1A\\x03\\x1A\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\", \"\\x1C\\x03\\x1C\\x03\\x1C\\x03\\x1C\\x03\\x1D\\x03\\x1D\\x03\", \"\\x1D\\x03\\x1D\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03\", \"\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\", \"\\x1F\\x03 \\x03 \\x03 \\x03 \\x03 \\x03!\\x03!\\x03!\\x03\", \"\\\"\\x03\\\"\\x03\\\"\\x03\\\"\\x03\\\"\\x03\\\"\\x03#\\x03#\\x03#\\x03\", \"#\\x03#\\x03#\\x03#\\x03#\\x03#\\x03#\\x03$\\x03$\\x03$\\x03\", \"$\\x03$\\x03%\\x03%\\x03%\\x03%\\x03%\\x03%\\x03%\\x03&\\x03\", \"&\\x03&\\x03&\\x03&\\x03&\\x03&\\x03'\\x03'\\x03'\\x03'\", \"\\x03'\\x03'\\x03'\\x03'\\x03'\\x03'\\x03'\\x03'\\x03\", \"(\\x03(\\x03(\\x03(\\x03(\\x03(\\x03(\\x03(\\x03(\\x03(\\x03\", \")\\x03)\\x03)\\x03)\\x03)\\x03)\\x03)\\x03)\\x03)\\x03)\\x03\", \")\\x03)\\x03)\\x03*\\x03*\\x03*\\x03*\\x03*\\x03*\\x03*\\x03\", \"+\\x03+\\x03+\\x03+\\x03+\\x03+\\x03+\\x03,\\x03,\\x03,\\x03\", \",\\x03-\\x03-\\x03-\\x03-\\x03-\\x03-\\x03.\\x03.\\x03.\\x03\", \".\\x03.\\x03/\\x03/\\x03/\\x03/\\x03/\\x030\\x030\\x030\\x03\", \"0\\x030\\x031\\x031\\x031\\x031\\x031\\x031\\x032\\x032\\x03\", \"3\\x033\\x033\\x034\\x034\\x035\\x035\\x036\\x036\\x036\\x03\", \"7\\x037\\x038\\x038\\x039\\x039\\x03:\\x03:\\x03;\\x03;\\x03\", \";\\x03<\\x03<\\x03=\\x03=\\x03>\\x03>\\x03>\\x03?\\x03?\\x03\", \"@\\x03@\\x03A\\x03A\\x03B\\x03B\\x03C\\x03C\\x03D\\x03D\\x03\", \"E\\x03E\\x03F\\x03F\\x03G\\x03G\\x03H\\x03H\\x03I\\x03I\\x03\", \"I\\x03J\\x03J\\x03K\\x03K\\x03L\\x03L\\x03M\\x03M\\x03N\\x03\", \"N\\x07N\\u0216\\nN\\fN\\x0EN\\u0219\\x0BN\\x03O\\x03O\\x07O\\u021D\", \"\\nO\\fO\\x0EO\\u0220\\x0BO\\x03P\\x03P\\x03P\\x03Q\\x03Q\\x03\", \"Q\\x03R\\x06R\\u0229\\nR\\rR\\x0ER\\u022A\\x03S\\x03S\\x03S\\x03\", \"S\\x03T\\x03T\\x03T\\x03T\\x07T\\u0235\\nT\\fT\\x0ET\\u0238\\x0B\", \"T\\x03T\\x03T\\x03U\\x06U\\u023D\\nU\\rU\\x0EU\\u023E\\x03U\\x03\", \"U\\x03V\\x03V\\x03V\\x03V\\x03V\\x07V\\u0248\\nV\\fV\\x0EV\\u024B\", \"\\x0BV\\x05V\\u024D\\nV\\x03V\\x03V\\x03V\\x03V\\x03V\\x03W\\x03\", \"W\\x03W\\x03W\\x07W\\u0258\\nW\\fW\\x0EW\\u025B\\x0BW\\x03W\\x03\", \"W\\x03X\\x03X\\x03X\\x03X\\x03X\\x03X\\x03Y\\x03Y\\x03Y\\x03\", \"Y\\x03Y\\x03Z\\x06Z\\u026B\\nZ\\rZ\\x0EZ\\u026C\\x03Z\\x05Z\\u0270\", \"\\nZ\\x03\\u0249\\x02[\\x04\\x03\\x06\\x04\\b\\x05\\n\\x06\\f\\x07\", \"\\x0E\\b\\x10\\t\\x12\\n\\x14\\x0B\\x16\\f\\x18\\r\\x1A\\x0E\\x1C\", \"\\x0F\\x1E\\x10 \\x11\\\"\\x12$\\x13&\\x14(\\x15*\\x16,\\x17\", \".\\x180\\x192\\x1A4\\x1B6\\x1C8\\x1D:\\x1E<\\x1F> @!B\\\"D#F$\", \"H%J&L'N(P)R*T+V,X-Z.\\\\/^0`1b2d3f4h5j6l7n8p9r:t;v<x=z>|?~@\\x80A\\x82\", \"B\\x84C\\x86D\\x88E\\x8AF\\x8CG\\x8EH\\x90I\\x92J\\x94\\x02\", \"\\x96\\x02\\x98\\x02\\x9A\\x02\\x9CK\\x9EL\\xA0M\\xA2N\\xA4\", \"O\\xA6P\\xA8Q\\xAAR\\xACS\\xAET\\xB0U\\xB2V\\xB4W\\x04\\x02\", \"\\x03\\x0B\\x03\\x022;\\x03\\x02c|\\x03\\x02C\\\\\\x06\\x02\", \"2;C\\\\aac|\\x06\\x02\\x0B\\f\\x0F\\x0F$$^^\\x07\\x02$$^^ppttvv\", \"\\x05\\x02\\x0B\\f\\x0E\\x0F\\\"\\\"\\x03\\x02,,\\x04\\x02\\f\\f\\x0F\", \"\\x0F\\x02\\u0276\\x02\\x04\\x03\\x02\\x02\\x02\\x02\\x06\\x03\", \"\\x02\\x02\\x02\\x02\\b\\x03\\x02\\x02\\x02\\x02\\n\\x03\\x02\", \"\\x02\\x02\\x02\\f\\x03\\x02\\x02\\x02\\x02\\x0E\\x03\\x02\", \"\\x02\\x02\\x02\\x10\\x03\\x02\\x02\\x02\\x02\\x12\\x03\\x02\", \"\\x02\\x02\\x02\\x14\\x03\\x02\\x02\\x02\\x02\\x16\\x03\\x02\", \"\\x02\\x02\\x02\\x18\\x03\\x02\\x02\\x02\\x02\\x1A\\x03\\x02\", \"\\x02\\x02\\x02\\x1C\\x03\\x02\\x02\\x02\\x02\\x1E\\x03\\x02\", \"\\x02\\x02\\x02 \\x03\\x02\\x02\\x02\\x02\\\"\\x03\\x02\\x02\", \"\\x02\\x02$\\x03\\x02\\x02\\x02\\x02&\\x03\\x02\\x02\\x02\", \"\\x02(\\x03\\x02\\x02\\x02\\x02*\\x03\\x02\\x02\\x02\\x02\", \",\\x03\\x02\\x02\\x02\\x02.\\x03\\x02\\x02\\x02\\x020\\x03\", \"\\x02\\x02\\x02\\x022\\x03\\x02\\x02\\x02\\x024\\x03\\x02\", \"\\x02\\x02\\x026\\x03\\x02\\x02\\x02\\x028\\x03\\x02\\x02\", \"\\x02\\x02:\\x03\\x02\\x02\\x02\\x02<\\x03\\x02\\x02\\x02\", \"\\x02>\\x03\\x02\\x02\\x02\\x02@\\x03\\x02\\x02\\x02\\x02\", \"B\\x03\\x02\\x02\\x02\\x02D\\x03\\x02\\x02\\x02\\x02F\\x03\", \"\\x02\\x02\\x02\\x02H\\x03\\x02\\x02\\x02\\x02J\\x03\\x02\", \"\\x02\\x02\\x02L\\x03\\x02\\x02\\x02\\x02N\\x03\\x02\\x02\", \"\\x02\\x02P\\x03\\x02\\x02\\x02\\x02R\\x03\\x02\\x02\\x02\", \"\\x02T\\x03\\x02\\x02\\x02\\x02V\\x03\\x02\\x02\\x02\\x02\", \"X\\x03\\x02\\x02\\x02\\x02Z\\x03\\x02\\x02\\x02\\x02\\\\\\x03\", \"\\x02\\x02\\x02\\x02^\\x03\\x02\\x02\\x02\\x02`\\x03\\x02\", \"\\x02\\x02\\x02b\\x03\\x02\\x02\\x02\\x02d\\x03\\x02\\x02\", \"\\x02\\x02f\\x03\\x02\\x02\\x02\\x02h\\x03\\x02\\x02\\x02\", \"\\x02j\\x03\\x02\\x02\\x02\\x02l\\x03\\x02\\x02\\x02\\x02\", \"n\\x03\\x02\\x02\\x02\\x02p\\x03\\x02\\x02\\x02\\x02r\\x03\", \"\\x02\\x02\\x02\\x02t\\x03\\x02\\x02\\x02\\x02v\\x03\\x02\", \"\\x02\\x02\\x02x\\x03\\x02\\x02\\x02\\x02z\\x03\\x02\\x02\", \"\\x02\\x02|\\x03\\x02\\x02\\x02\\x02~\\x03\\x02\\x02\\x02\", \"\\x02\\x80\\x03\\x02\\x02\\x02\\x02\\x82\\x03\\x02\\x02\\x02\", \"\\x02\\x84\\x03\\x02\\x02\\x02\\x02\\x86\\x03\\x02\\x02\\x02\", \"\\x02\\x88\\x03\\x02\\x02\\x02\\x02\\x8A\\x03\\x02\\x02\\x02\", \"\\x02\\x8C\\x03\\x02\\x02\\x02\\x02\\x8E\\x03\\x02\\x02\\x02\", \"\\x02\\x90\\x03\\x02\\x02\\x02\\x02\\x92\\x03\\x02\\x02\\x02\", \"\\x02\\x9C\\x03\\x02\\x02\\x02\\x02\\x9E\\x03\\x02\\x02\\x02\", \"\\x02\\xA0\\x03\\x02\\x02\\x02\\x02\\xA2\\x03\\x02\\x02\\x02\", \"\\x02\\xA4\\x03\\x02\\x02\\x02\\x02\\xA6\\x03\\x02\\x02\\x02\", \"\\x02\\xA8\\x03\\x02\\x02\\x02\\x02\\xAA\\x03\\x02\\x02\\x02\", \"\\x02\\xAC\\x03\\x02\\x02\\x02\\x02\\xAE\\x03\\x02\\x02\\x02\", \"\\x02\\xB0\\x03\\x02\\x02\\x02\\x03\\xB2\\x03\\x02\\x02\\x02\", \"\\x03\\xB4\\x03\\x02\\x02\\x02\\x04\\xB6\\x03\\x02\\x02\\x02\", \"\\x06\\xBA\\x03\\x02\\x02\\x02\\b\\xBE\\x03\\x02\\x02\\x02\", \"\\n\\xC1\\x03\\x02\\x02\\x02\\f\\xC5\\x03\\x02\\x02\\x02\\x0E\", \"\\xC9\\x03\\x02\\x02\\x02\\x10\\xD1\\x03\\x02\\x02\\x02\\x12\", \"\\xD4\\x03\\x02\\x02\\x02\\x14\\xDA\\x03\\x02\\x02\\x02\\x16\", \"\\xE2\\x03\\x02\\x02\\x02\\x18\\xE8\\x03\\x02\\x02\\x02\\x1A\", \"\\xED\\x03\\x02\\x02\\x02\\x1C\\xF2\\x03\\x02\\x02\\x02\\x1E\", \"\\xF7\\x03\\x02\\x02\\x02 \\xFE\\x03\\x02\\x02\\x02\\\"\\u0106\", \"\\x03\\x02\\x02\\x02$\\u010C\\x03\\x02\\x02\\x02&\\u0112\\x03\", \"\\x02\\x02\\x02(\\u0119\\x03\\x02\\x02\\x02*\\u011F\\x03\\x02\", \"\\x02\\x02,\\u0124\\x03\\x02\\x02\\x02.\\u0127\\x03\\x02\\x02\", \"\\x020\\u012F\\x03\\x02\\x02\\x022\\u0136\\x03\\x02\\x02\\x02\", \"4\\u0139\\x03\\x02\\x02\\x026\\u0144\\x03\\x02\\x02\\x028\\u0148\", \"\\x03\\x02\\x02\\x02:\\u014C\\x03\\x02\\x02\\x02<\\u0150\\x03\", \"\\x02\\x02\\x02>\\u0157\\x03\\x02\\x02\\x02@\\u015B\\x03\\x02\", \"\\x02\\x02B\\u0160\\x03\\x02\\x02\\x02D\\u0163\\x03\\x02\\x02\", \"\\x02F\\u0169\\x03\\x02\\x02\\x02H\\u0173\\x03\\x02\\x02\\x02\", \"J\\u0178\\x03\\x02\\x02\\x02L\\u017F\\x03\\x02\\x02\\x02N\\u0186\", \"\\x03\\x02\\x02\\x02P\\u0192\\x03\\x02\\x02\\x02R\\u019C\\x03\", \"\\x02\\x02\\x02T\\u01A9\\x03\\x02\\x02\\x02V\\u01B0\\x03\\x02\", \"\\x02\\x02X\\u01B7\\x03\\x02\\x02\\x02Z\\u01BB\\x03\\x02\\x02\", \"\\x02\\\\\\u01C1\\x03\\x02\\x02\\x02^\\u01C6\\x03\\x02\\x02\\x02\", \"`\\u01CB\\x03\\x02\\x02\\x02b\\u01D0\\x03\\x02\\x02\\x02d\\u01D6\", \"\\x03\\x02\\x02\\x02f\\u01D8\\x03\\x02\\x02\\x02h\\u01DB\\x03\", \"\\x02\\x02\\x02j\\u01DD\\x03\\x02\\x02\\x02l\\u01DF\\x03\\x02\", \"\\x02\\x02n\\u01E2\\x03\\x02\\x02\\x02p\\u01E4\\x03\\x02\\x02\", \"\\x02r\\u01E6\\x03\\x02\\x02\\x02t\\u01E8\\x03\\x02\\x02\\x02\", \"v\\u01EA\\x03\\x02\\x02\\x02x\\u01ED\\x03\\x02\\x02\\x02z\\u01EF\", \"\\x03\\x02\\x02\\x02|\\u01F1\\x03\\x02\\x02\\x02~\\u01F4\\x03\", \"\\x02\\x02\\x02\\x80\\u01F6\\x03\\x02\\x02\\x02\\x82\\u01F8\\x03\", \"\\x02\\x02\\x02\\x84\\u01FA\\x03\\x02\\x02\\x02\\x86\\u01FC\\x03\", \"\\x02\\x02\\x02\\x88\\u01FE\\x03\\x02\\x02\\x02\\x8A\\u0200\\x03\", \"\\x02\\x02\\x02\\x8C\\u0202\\x03\\x02\\x02\\x02\\x8E\\u0204\\x03\", \"\\x02\\x02\\x02\\x90\\u0206\\x03\\x02\\x02\\x02\\x92\\u0208\\x03\", \"\\x02\\x02\\x02\\x94\\u020B\\x03\\x02\\x02\\x02\\x96\\u020D\\x03\", \"\\x02\\x02\\x02\\x98\\u020F\\x03\\x02\\x02\\x02\\x9A\\u0211\\x03\", \"\\x02\\x02\\x02\\x9C\\u0213\\x03\\x02\\x02\\x02\\x9E\\u021A\\x03\", \"\\x02\\x02\\x02\\xA0\\u0221\\x03\\x02\\x02\\x02\\xA2\\u0224\\x03\", \"\\x02\\x02\\x02\\xA4\\u0228\\x03\\x02\\x02\\x02\\xA6\\u022C\\x03\", \"\\x02\\x02\\x02\\xA8\\u0230\\x03\\x02\\x02\\x02\\xAA\\u023C\\x03\", \"\\x02\\x02\\x02\\xAC\\u0242\\x03\\x02\\x02\\x02\\xAE\\u0253\\x03\", \"\\x02\\x02\\x02\\xB0\\u025E\\x03\\x02\\x02\\x02\\xB2\\u0264\\x03\", \"\\x02\\x02\\x02\\xB4\\u026F\\x03\\x02\\x02\\x02\\xB6\\xB7\\x07\", \"c\\x02\\x02\\xB7\\xB8\\x07p\\x02\\x02\\xB8\\xB9\\x07f\\x02\", \"\\x02\\xB9\\x05\\x03\\x02\\x02\\x02\\xBA\\xBB\\x07c\\x02\", \"\\x02\\xBB\\xBC\\x07p\\x02\\x02\\xBC\\xBD\\x07{\\x02\\x02\", \"\\xBD\\x07\\x03\\x02\\x02\\x02\\xBE\\xBF\\x07c\\x02\\x02\", \"\\xBF\\xC0\\x07u\\x02\\x02\\xC0\\t\\x03\\x02\\x02\\x02\\xC1\", \"\\xC2\\x07c\\x02\\x02\\xC2\\xC3\\x07u\\x02\\x02\\xC3\\xC4\", \"\\x07e\\x02\\x02\\xC4\\x0B\\x03\\x02\\x02\\x02\\xC5\\xC6\", \"\\x07c\\x02\\x02\\xC6\\xC7\\x07x\\x02\\x02\\xC7\\xC8\\x07\", \"i\\x02\\x02\\xC8\\r\\x03\\x02\\x02\\x02\\xC9\\xCA\\x07d\\x02\", \"\\x02\\xCA\\xCB\\x07q\\x02\\x02\\xCB\\xCC\\x07q\\x02\\x02\", \"\\xCC\\xCD\\x07n\\x02\\x02\\xCD\\xCE\\x07g\\x02\\x02\\xCE\", \"\\xCF\\x07c\\x02\\x02\\xCF\\xD0\\x07p\\x02\\x02\\xD0\\x0F\", \"\\x03\\x02\\x02\\x02\\xD1\\xD2\\x07d\\x02\\x02\\xD2\\xD3\", \"\\x07{\\x02\\x02\\xD3\\x11\\x03\\x02\\x02\\x02\\xD4\\xD5\", \"\\x07e\\x02\\x02\\xD5\\xD6\\x07n\\x02\\x02\\xD6\\xD7\\x07\", \"c\\x02\\x02\\xD7\\xD8\\x07u\\x02\\x02\\xD8\\xD9\\x07u\\x02\", \"\\x02\\xD9\\x13\\x03\\x02\\x02\\x02\\xDA\\xDB\\x07p\\x02\", \"\\x02\\xDB\\xDC\\x07g\\x02\\x02\\xDC\\xDD\\x07y\\x02\\x02\", \"\\xDD\\xDE\\x07v\\x02\\x02\\xDE\\xDF\\x07{\\x02\\x02\\xDF\", \"\\xE0\\x07r\\x02\\x02\\xE0\\xE1\\x07g\\x02\\x02\\xE1\\x15\", \"\\x03\\x02\\x02\\x02\\xE2\\xE3\\x07e\\x02\\x02\\xE3\\xE4\", \"\\x07q\\x02\\x02\\xE4\\xE5\\x07w\\x02\\x02\\xE5\\xE6\\x07\", \"p\\x02\\x02\\xE6\\xE7\\x07v\\x02\\x02\\xE7\\x17\\x03\\x02\", \"\\x02\\x02\\xE8\\xE9\\x07f\\x02\\x02\\xE9\\xEA\\x07c\\x02\", \"\\x02\\xEA\\xEB\\x07v\\x02\\x02\\xEB\\xEC\\x07g\\x02\\x02\", \"\\xEC\\x19\\x03\\x02\\x02\\x02\\xED\\xEE\\x07f\\x02\\x02\", \"\\xEE\\xEF\\x07g\\x02\\x02\\xEF\\xF0\\x07u\\x02\\x02\\xF0\", \"\\xF1\\x07e\\x02\\x02\\xF1\\x1B\\x03\\x02\\x02\\x02\\xF2\", \"\\xF3\\x07g\\x02\\x02\\xF3\\xF4\\x07n\\x02\\x02\\xF4\\xF5\", \"\\x07u\\x02\\x02\\xF5\\xF6\\x07g\\x02\\x02\\xF6\\x1D\\x03\", \"\\x02\\x02\\x02\\xF7\\xF8\\x07g\\x02\\x02\\xF8\\xF9\\x07\", \"z\\x02\\x02\\xF9\\xFA\\x07k\\x02\\x02\\xFA\\xFB\\x07u\\x02\", \"\\x02\\xFB\\xFC\\x07v\\x02\\x02\\xFC\\xFD\\x07u\\x02\\x02\", \"\\xFD\\x1F\\x03\\x02\\x02\\x02\\xFE\\xFF\\x07g\\x02\\x02\", \"\\xFF\\u0100\\x07z\\x02\\x02\\u0100\\u0101\\x07v\\x02\\x02\\u0101\", \"\\u0102\\x07g\\x02\\x02\\u0102\\u0103\\x07p\\x02\\x02\\u0103\\u0104\", \"\\x07f\\x02\\x02\\u0104\\u0105\\x07u\\x02\\x02\\u0105!\\x03\\x02\", \"\\x02\\x02\\u0106\\u0107\\x07h\\x02\\x02\\u0107\\u0108\\x07c\\x02\", \"\\x02\\u0108\\u0109\\x07n\\x02\\x02\\u0109\\u010A\\x07u\\x02\\x02\", \"\\u010A\\u010B\\x07g\\x02\\x02\\u010B#\\x03\\x02\\x02\\x02\\u010C\", \"\\u010D\\x07h\\x02\\x02\\u010D\\u010E\\x07n\\x02\\x02\\u010E\\u010F\", \"\\x07q\\x02\\x02\\u010F\\u0110\\x07c\\x02\\x02\\u0110\\u0111\\x07\", \"v\\x02\\x02\\u0111%\\x03\\x02\\x02\\x02\\u0112\\u0113\\x07h\\x02\", \"\\x02\\u0113\\u0114\\x07q\\x02\\x02\\u0114\\u0115\\x07t\\x02\\x02\", \"\\u0115\\u0116\\x07c\\x02\\x02\\u0116\\u0117\\x07n\\x02\\x02\\u0117\", \"\\u0118\\x07n\\x02\\x02\\u0118'\\x03\\x02\\x02\\x02\\u0119\\u011A\", \"\\x07h\\x02\\x02\\u011A\\u011B\\x07q\\x02\\x02\\u011B\\u011C\\x07\", \"t\\x02\\x02\\u011C\\u011D\\x07g\\x02\\x02\\u011D\\u011E\\x07z\\x02\", \"\\x02\\u011E)\\x03\\x02\\x02\\x02\\u011F\\u0120\\x07h\\x02\\x02\", \"\\u0120\\u0121\\x07t\\x02\\x02\\u0121\\u0122\\x07q\\x02\\x02\\u0122\", \"\\u0123\\x07o\\x02\\x02\\u0123+\\x03\\x02\\x02\\x02\\u0124\\u0125\", \"\\x07k\\x02\\x02\\u0125\\u0126\\x07h\\x02\\x02\\u0126-\\x03\\x02\", \"\\x02\\x02\\u0127\\u0128\\x07k\\x02\\x02\\u0128\\u0129\\x07o\\x02\", \"\\x02\\u0129\\u012A\\x07r\\x02\\x02\\u012A\\u012B\\x07n\\x02\\x02\", \"\\u012B\\u012C\\x07k\\x02\\x02\\u012C\\u012D\\x07g\\x02\\x02\\u012D\", \"\\u012E\\x07u\\x02\\x02\\u012E/\\x03\\x02\\x02\\x02\\u012F\\u0130\", \"\\x07k\\x02\\x02\\u0130\\u0131\\x07o\\x02\\x02\\u0131\\u0132\\x07\", \"r\\x02\\x02\\u0132\\u0133\\x07q\\x02\\x02\\u0133\\u0134\\x07t\\x02\", \"\\x02\\u0134\\u0135\\x07v\\x02\\x02\\u01351\\x03\\x02\\x02\\x02\", \"\\u0136\\u0137\\x07k\\x02\\x02\\u0137\\u0138\\x07p\\x02\\x02\\u0138\", \"3\\x03\\x02\\x02\\x02\\u0139\\u013A\\x07k\\x02\\x02\\u013A\\u013B\", \"\\x07p\\x02\\x02\\u013B\\u013C\\x07u\\x02\\x02\\u013C\\u013D\\x07\", \"v\\x02\\x02\\u013D\\u013E\\x07c\\x02\\x02\\u013E\\u013F\\x07p\\x02\", \"\\x02\\u013F\\u0140\\x07e\\x02\\x02\\u0140\\u0141\\x07g\\x02\\x02\", \"\\u0141\\u0142\\x07q\\x02\\x02\\u0142\\u0143\\x07h\\x02\\x02\\u0143\", \"5\\x03\\x02\\x02\\x02\\u0144\\u0145\\x07k\\x02\\x02\\u0145\\u0146\", \"\\x07p\\x02\\x02\\u0146\\u0147\\x07v\\x02\\x02\\u01477\\x03\\x02\", \"\\x02\\x02\\u0148\\u0149\\x07o\\x02\\x02\\u0149\\u014A\\x07c\\x02\", \"\\x02\\u014A\\u014B\\x07z\\x02\\x02\\u014B9\\x03\\x02\\x02\\x02\", \"\\u014C\\u014D\\x07o\\x02\\x02\\u014D\\u014E\\x07k\\x02\\x02\\u014E\", \"\\u014F\\x07p\\x02\\x02\\u014F;\\x03\\x02\\x02\\x02\\u0150\\u0151\", \"\\x07o\\x02\\x02\\u0151\\u0152\\x07q\\x02\\x02\\u0152\\u0153\\x07\", \"f\\x02\\x02\\u0153\\u0154\\x07w\\x02\\x02\\u0154\\u0155\\x07n\\x02\", \"\\x02\\u0155\\u0156\\x07g\\x02\\x02\\u0156=\\x03\\x02\\x02\\x02\", \"\\u0157\\u0158\\x07p\\x02\\x02\\u0158\\u0159\\x07q\\x02\\x02\\u0159\", \"\\u015A\\x07v\\x02\\x02\\u015A?\\x03\\x02\\x02\\x02\\u015B\\u015C\", \"\\x07p\\x02\\x02\\u015C\\u015D\\x07q\\x02\\x02\\u015D\\u015E\\x07\", \"p\\x02\\x02\\u015E\\u015F\\x07g\\x02\\x02\\u015FA\\x03\\x02\\x02\", \"\\x02\\u0160\\u0161\\x07q\\x02\\x02\\u0161\\u0162\\x07t\\x02\\x02\", \"\\u0162C\\x03\\x02\\x02\\x02\\u0163\\u0164\\x07q\\x02\\x02\\u0164\", \"\\u0165\\x07t\\x02\\x02\\u0165\\u0166\\x07f\\x02\\x02\\u0166\\u0167\", \"\\x07g\\x02\\x02\\u0167\\u0168\\x07t\\x02\\x02\\u0168E\\x03\\x02\", \"\\x02\\x02\\u0169\\u016A\\x07r\\x02\\x02\\u016A\\u016B\\x07t\\x02\", \"\\x02\\u016B\\u016C\\x07g\\x02\\x02\\u016C\\u016D\\x07f\\x02\\x02\", \"\\u016D\\u016E\\x07k\\x02\\x02\\u016E\\u016F\\x07e\\x02\\x02\\u016F\", \"\\u0170\\x07c\\x02\\x02\\u0170\\u0171\\x07v\\x02\\x02\\u0171\\u0172\", \"\\x07g\\x02\\x02\\u0172G\\x03\\x02\\x02\\x02\\u0173\\u0174\\x07\", \"t\\x02\\x02\\u0174\\u0175\\x07c\\x02\\x02\\u0175\\u0176\\x07p\\x02\", \"\\x02\\u0176\\u0177\\x07m\\x02\\x02\\u0177I\\x03\\x02\\x02\\x02\", \"\\u0178\\u0179\\x07t\\x02\\x02\\u0179\\u017A\\x07g\\x02\\x02\\u017A\", \"\\u017B\\x07u\\x02\\x02\\u017B\\u017C\\x07w\\x02\\x02\\u017C\\u017D\", \"\\x07n\\x02\\x02\\u017D\\u017E\\x07v\\x02\\x02\\u017EK\\x03\\x02\", \"\\x02\\x02\\u017F\\u0180\\x07u\\x02\\x02\\u0180\\u0181\\x07g\\x02\", \"\\x02\\u0181\\u0182\\x07n\\x02\\x02\\u0182\\u0183\\x07g\\x02\\x02\", \"\\u0183\\u0184\\x07e\\x02\\x02\\u0184\\u0185\\x07v\\x02\\x02\\u0185\", \"M\\x03\\x02\\x02\\x02\\u0186\\u0187\\x07u\\x02\\x02\\u0187\\u0188\", \"\\x07v\\x02\\x02\\u0188\\u0189\\x07t\\x02\\x02\\u0189\\u018A\\x07\", \"k\\x02\\x02\\u018A\\u018B\\x07e\\x02\\x02\\u018B\\u018C\\x07v\\x02\", \"\\x02\\u018C\\u018D\\x07e\\x02\\x02\\u018D\\u018E\\x07q\\x02\\x02\", \"\\u018E\\u018F\\x07w\\x02\\x02\\u018F\\u0190\\x07p\\x02\\x02\\u0190\", \"\\u0191\\x07v\\x02\\x02\\u0191O\\x03\\x02\\x02\\x02\\u0192\\u0193\", \"\\x07u\\x02\\x02\\u0193\\u0194\\x07v\\x02\\x02\\u0194\\u0195\\x07\", \"t\\x02\\x02\\u0195\\u0196\\x07k\\x02\\x02\\u0196\\u0197\\x07e\\x02\", \"\\x02\\u0197\\u0198\\x07v\\x02\\x02\\u0198\\u0199\\x07u\\x02\\x02\", \"\\u0199\\u019A\\x07w\\x02\\x02\\u019A\\u019B\\x07o\\x02\\x02\\u019B\", \"Q\\x03\\x02\\x02\\x02\\u019C\\u019D\\x07u\\x02\\x02\\u019D\\u019E\", \"\\x07v\\x02\\x02\\u019E\\u019F\\x07t\\x02\\x02\\u019F\\u01A0\\x07\", \"k\\x02\\x02\\u01A0\\u01A1\\x07e\\x02\\x02\\u01A1\\u01A2\\x07v\\x02\", \"\\x02\\u01A2\\u01A3\\x07e\\x02\\x02\\u01A3\\u01A4\\x07q\\x02\\x02\", \"\\u01A4\\u01A5\\x07p\\x02\\x02\\u01A5\\u01A6\\x07e\\x02\\x02\\u01A6\", \"\\u01A7\\x07c\\x02\\x02\\u01A7\\u01A8\\x07v\\x02\\x02\\u01A8S\\x03\", \"\\x02\\x02\\x02\\u01A9\\u01AA\\x07e\\x02\\x02\\u01AA\\u01AB\\x07\", \"q\\x02\\x02\\u01AB\\u01AC\\x07p\\x02\\x02\\u01AC\\u01AD\\x07e\\x02\", \"\\x02\\u01AD\\u01AE\\x07c\\x02\\x02\\u01AE\\u01AF\\x07v\\x02\\x02\", \"\\u01AFU\\x03\\x02\\x02\\x02\\u01B0\\u01B1\\x07u\\x02\\x02\\u01B1\", \"\\u01B2\\x07v\\x02\\x02\\u01B2\\u01B3\\x07t\\x02\\x02\\u01B3\\u01B4\", \"\\x07k\\x02\\x02\\u01B4\\u01B5\\x07p\\x02\\x02\\u01B5\\u01B6\\x07\", \"i\\x02\\x02\\u01B6W\\x03\\x02\\x02\\x02\\u01B7\\u01B8\\x07u\\x02\", \"\\x02\\u01B8\\u01B9\\x07w\\x02\\x02\\u01B9\\u01BA\\x07o\\x02\\x02\", \"\\u01BAY\\x03\\x02\\x02\\x02\\u01BB\\u01BC\\x07u\\x02\\x02\\u01BC\", \"\\u01BD\\x07w\\x02\\x02\\u01BD\\u01BE\\x07r\\x02\\x02\\u01BE\\u01BF\", \"\\x07g\\x02\\x02\\u01BF\\u01C0\\x07t\\x02\\x02\\u01C0[\\x03\\x02\", \"\\x02\\x02\\u01C1\\u01C2\\x07v\\x02\\x02\\u01C2\\u01C3\\x07j\\x02\", \"\\x02\\u01C3\\u01C4\\x07g\\x02\\x02\\u01C4\\u01C5\\x07p\\x02\\x02\", \"\\u01C5]\\x03\\x02\\x02\\x02\\u01C6\\u01C7\\x07v\\x02\\x02\\u01C7\", \"\\u01C8\\x07j\\x02\\x02\\u01C8\\u01C9\\x07k\\x02\\x02\\u01C9\\u01CA\", \"\\x07u\\x02\\x02\\u01CA_\\x03\\x02\\x02\\x02\\u01CB\\u01CC\\x07\", \"v\\x02\\x02\\u01CC\\u01CD\\x07t\\x02\\x02\\u01CD\\u01CE\\x07w\\x02\", \"\\x02\\u01CE\\u01CF\\x07g\\x02\\x02\\u01CFa\\x03\\x02\\x02\\x02\", \"\\u01D0\\u01D1\\x07y\\x02\\x02\\u01D1\\u01D2\\x07j\\x02\\x02\\u01D2\", \"\\u01D3\\x07g\\x02\\x02\\u01D3\\u01D4\\x07t\\x02\\x02\\u01D4\\u01D5\", \"\\x07g\\x02\\x02\\u01D5c\\x03\\x02\\x02\\x02\\u01D6\\u01D7\\x07\", \">\\x02\\x02\\u01D7e\\x03\\x02\\x02\\x02\\u01D8\\u01D9\\x07>\\x02\", \"\\x02\\u01D9\\u01DA\\x07?\\x02\\x02\\u01DAg\\x03\\x02\\x02\\x02\", \"\\u01DB\\u01DC\\x07?\\x02\\x02\\u01DCi\\x03\\x02\\x02\\x02\\u01DD\", \"\\u01DE\\x07@\\x02\\x02\\u01DEk\\x03\\x02\\x02\\x02\\u01DF\\u01E0\", \"\\x07@\\x02\\x02\\u01E0\\u01E1\\x07?\\x02\\x02\\u01E1m\\x03\\x02\", \"\\x02\\x02\\u01E2\\u01E3\\x07a\\x02\\x02\\u01E3o\\x03\\x02\\x02\", \"\\x02\\u01E4\\u01E5\\x07/\\x02\\x02\\u01E5q\\x03\\x02\\x02\\x02\", \"\\u01E6\\u01E7\\x07.\\x02\\x02\\u01E7s\\x03\\x02\\x02\\x02\\u01E8\", \"\\u01E9\\x07=\\x02\\x02\\u01E9u\\x03\\x02\\x02\\x02\\u01EA\\u01EB\", \"\\x07#\\x02\\x02\\u01EB\\u01EC\\x07?\\x02\\x02\\u01ECw\\x03\\x02\", \"\\x02\\x02\\u01ED\\u01EE\\x071\\x02\\x02\\u01EEy\\x03\\x02\\x02\", \"\\x02\\u01EF\\u01F0\\x070\\x02\\x02\\u01F0{\\x03\\x02\\x02\\x02\", \"\\u01F1\\u01F2\\x070\\x02\\x02\\u01F2\\u01F3\\x070\\x02\\x02\\u01F3\", \"}\\x03\\x02\\x02\\x02\\u01F4\\u01F5\\x07*\\x02\\x02\\u01F5\\x7F\", \"\\x03\\x02\\x02\\x02\\u01F6\\u01F7\\x07+\\x02\\x02\\u01F7\\x81\", \"\\x03\\x02\\x02\\x02\\u01F8\\u01F9\\x07]\\x02\\x02\\u01F9\\x83\", \"\\x03\\x02\\x02\\x02\\u01FA\\u01FB\\x07_\\x02\\x02\\u01FB\\x85\", \"\\x03\\x02\\x02\\x02\\u01FC\\u01FD\\x07}\\x02\\x02\\u01FD\\x87\", \"\\x03\\x02\\x02\\x02\\u01FE\\u01FF\\x07\\x7F\\x02\\x02\\u01FF\\x89\", \"\\x03\\x02\\x02\\x02\\u0200\\u0201\\x07,\\x02\\x02\\u0201\\x8B\", \"\\x03\\x02\\x02\\x02\\u0202\\u0203\\x07'\\x02\\x02\\u0203\\x8D\", \"\\x03\\x02\\x02\\x02\\u0204\\u0205\\x07-\\x02\\x02\\u0205\\x8F\", \"\\x03\\x02\\x02\\x02\\u0206\\u0207\\x07~\\x02\\x02\\u0207\\x91\", \"\\x03\\x02\\x02\\x02\\u0208\\u0209\\x07<\\x02\\x02\\u0209\\u020A\", \"\\x07<\\x02\\x02\\u020A\\x93\\x03\\x02\\x02\\x02\\u020B\\u020C\", \"\\t\\x02\\x02\\x02\\u020C\\x95\\x03\\x02\\x02\\x02\\u020D\\u020E\", \"\\t\\x03\\x02\\x02\\u020E\\x97\\x03\\x02\\x02\\x02\\u020F\\u0210\", \"\\t\\x04\\x02\\x02\\u0210\\x99\\x03\\x02\\x02\\x02\\u0211\\u0212\", \"\\t\\x05\\x02\\x02\\u0212\\x9B\\x03\\x02\\x02\\x02\\u0213\\u0217\", \"\\x05\\x96K\\x02\\u0214\\u0216\\x05\\x9AM\\x02\\u0215\\u0214\\x03\", \"\\x02\\x02\\x02\\u0216\\u0219\\x03\\x02\\x02\\x02\\u0217\\u0215\\x03\", \"\\x02\\x02\\x02\\u0217\\u0218\\x03\\x02\\x02\\x02\\u0218\\x9D\\x03\", \"\\x02\\x02\\x02\\u0219\\u0217\\x03\\x02\\x02\\x02\\u021A\\u021E\\x05\", \"\\x98L\\x02\\u021B\\u021D\\x05\\x9AM\\x02\\u021C\\u021B\\x03\\x02\", \"\\x02\\x02\\u021D\\u0220\\x03\\x02\\x02\\x02\\u021E\\u021C\\x03\\x02\", \"\\x02\\x02\\u021E\\u021F\\x03\\x02\\x02\\x02\\u021F\\x9F\\x03\\x02\", \"\\x02\\x02\\u0220\\u021E\\x03\\x02\\x02\\x02\\u0221\\u0222\\x07B\", \"\\x02\\x02\\u0222\\u0223\\x05\\x9CN\\x02\\u0223\\xA1\\x03\\x02\", \"\\x02\\x02\\u0224\\u0225\\x07B\\x02\\x02\\u0225\\u0226\\x05\\x9E\", \"O\\x02\\u0226\\xA3\\x03\\x02\\x02\\x02\\u0227\\u0229\\x05\\x94\", \"J\\x02\\u0228\\u0227\\x03\\x02\\x02\\x02\\u0229\\u022A\\x03\\x02\", \"\\x02\\x02\\u022A\\u0228\\x03\\x02\\x02\\x02\\u022A\\u022B\\x03\\x02\", \"\\x02\\x02\\u022B\\xA5\\x03\\x02\\x02\\x02\\u022C\\u022D\\x05\\xA4\", \"R\\x02\\u022D\\u022E\\x070\\x02\\x02\\u022E\\u022F\\x05\\xA4R\\x02\", \"\\u022F\\xA7\\x03\\x02\\x02\\x02\\u0230\\u0236\\x07$\\x02\\x02\", \"\\u0231\\u0235\\n\\x06\\x02\\x02\\u0232\\u0233\\x07^\\x02\\x02\\u0233\", \"\\u0235\\t\\x07\\x02\\x02\\u0234\\u0231\\x03\\x02\\x02\\x02\\u0234\", \"\\u0232\\x03\\x02\\x02\\x02\\u0235\\u0238\\x03\\x02\\x02\\x02\\u0236\", \"\\u0234\\x03\\x02\\x02\\x02\\u0236\\u0237\\x03\\x02\\x02\\x02\\u0237\", \"\\u0239\\x03\\x02\\x02\\x02\\u0238\\u0236\\x03\\x02\\x02\\x02\\u0239\", \"\\u023A\\x07$\\x02\\x02\\u023A\\xA9\\x03\\x02\\x02\\x02\\u023B\", \"\\u023D\\t\\b\\x02\\x02\\u023C\\u023B\\x03\\x02\\x02\\x02\\u023D\\u023E\", \"\\x03\\x02\\x02\\x02\\u023E\\u023C\\x03\\x02\\x02\\x02\\u023E\\u023F\", \"\\x03\\x02\\x02\\x02\\u023F\\u0240\\x03\\x02\\x02\\x02\\u0240\\u0241\", \"\\bU\\x02\\x02\\u0241\\xAB\\x03\\x02\\x02\\x02\\u0242\\u0243\\x07\", \"1\\x02\\x02\\u0243\\u0244\\x07,\\x02\\x02\\u0244\\u024C\\x03\\x02\", \"\\x02\\x02\\u0245\\u0249\\n\\t\\x02\\x02\\u0246\\u0248\\x0B\\x02\\x02\", \"\\x02\\u0247\\u0246\\x03\\x02\\x02\\x02\\u0248\\u024B\\x03\\x02\\x02\", \"\\x02\\u0249\\u024A\\x03\\x02\\x02\\x02\\u0249\\u0247\\x03\\x02\\x02\", \"\\x02\\u024A\\u024D\\x03\\x02\\x02\\x02\\u024B\\u0249\\x03\\x02\\x02\", \"\\x02\\u024C\\u0245\\x03\\x02\\x02\\x02\\u024C\\u024D\\x03\\x02\\x02\", \"\\x02\\u024D\\u024E\\x03\\x02\\x02\\x02\\u024E\\u024F\\x07,\\x02\", \"\\x02\\u024F\\u0250\\x071\\x02\\x02\\u0250\\u0251\\x03\\x02\\x02\", \"\\x02\\u0251\\u0252\\bV\\x03\\x02\\u0252\\xAD\\x03\\x02\\x02\\x02\", \"\\u0253\\u0254\\x071\\x02\\x02\\u0254\\u0255\\x071\\x02\\x02\\u0255\", \"\\u0259\\x03\\x02\\x02\\x02\\u0256\\u0258\\n\\n\\x02\\x02\\u0257\\u0256\", \"\\x03\\x02\\x02\\x02\\u0258\\u025B\\x03\\x02\\x02\\x02\\u0259\\u0257\", \"\\x03\\x02\\x02\\x02\\u0259\\u025A\\x03\\x02\\x02\\x02\\u025A\\u025C\", \"\\x03\\x02\\x02\\x02\\u025B\\u0259\\x03\\x02\\x02\\x02\\u025C\\u025D\", \"\\bW\\x03\\x02\\u025D\\xAF\\x03\\x02\\x02\\x02\\u025E\\u025F\\x07\", \"1\\x02\\x02\\u025F\\u0260\\x07,\\x02\\x02\\u0260\\u0261\\x07,\\x02\", \"\\x02\\u0261\\u0262\\x03\\x02\\x02\\x02\\u0262\\u0263\\bX\\x04\\x02\", \"\\u0263\\xB1\\x03\\x02\\x02\\x02\\u0264\\u0265\\x07,\\x02\\x02\", \"\\u0265\\u0266\\x071\\x02\\x02\\u0266\\u0267\\x03\\x02\\x02\\x02\", \"\\u0267\\u0268\\bY\\x05\\x02\\u0268\\xB3\\x03\\x02\\x02\\x02\\u0269\", \"\\u026B\\n\\t\\x02\\x02\\u026A\\u0269\\x03\\x02\\x02\\x02\\u026B\\u026C\", \"\\x03\\x02\\x02\\x02\\u026C\\u026A\\x03\\x02\\x02\\x02\\u026C\\u026D\", \"\\x03\\x02\\x02\\x02\\u026D\\u0270\\x03\\x02\\x02\\x02\\u026E\\u0270\", \"\\x07,\\x02\\x02\\u026F\\u026A\\x03\\x02\\x02\\x02\\u026F\\u026E\", \"\\x03\\x02\\x02\\x02\\u0270\\xB5\\x03\\x02\\x02\\x02\\x0F\\x02\", \"\\x03\\u0217\\u021E\\u022A\\u0234\\u0236\\u023E\\u0249\\u024C\\u0259\\u026C\\u026F\", \"\\x06\\x02\\x03\\x02\\x02\\x04\\x02\\x07\\x03\\x02\\x06\\x02\", \"\\x02\"].join(\"\");\n\n\tvar atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);\n\n\tvar decisionsToDFA = atn.decisionToState.map(function (ds, index) {\n\t    return new antlr4.dfa.DFA(ds, index);\n\t});\n\n\tfunction QLLexer(input) {\n\t    antlr4.Lexer.call(this, input);\n\t    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());\n\t    return this;\n\t}\n\n\tQLLexer.prototype = Object.create(antlr4.Lexer.prototype);\n\tQLLexer.prototype.constructor = QLLexer;\n\n\tQLLexer.EOF = antlr4.Token.EOF;\n\tQLLexer.AND = 1;\n\tQLLexer.ANY = 2;\n\tQLLexer.AS = 3;\n\tQLLexer.ASC = 4;\n\tQLLexer.AVG = 5;\n\tQLLexer.BOOLEAN = 6;\n\tQLLexer.BY = 7;\n\tQLLexer.CLASS = 8;\n\tQLLexer.NEWTYPE = 9;\n\tQLLexer.COUNT = 10;\n\tQLLexer.DATE = 11;\n\tQLLexer.DESC = 12;\n\tQLLexer.ELSE = 13;\n\tQLLexer.EXISTS = 14;\n\tQLLexer.EXTENDS = 15;\n\tQLLexer.FALSE = 16;\n\tQLLexer.FLOAT = 17;\n\tQLLexer.FORALL = 18;\n\tQLLexer.FOREX = 19;\n\tQLLexer.FROM = 20;\n\tQLLexer.IF = 21;\n\tQLLexer.IMPLIES = 22;\n\tQLLexer.IMPORT = 23;\n\tQLLexer.IN = 24;\n\tQLLexer.INSTANCEOF = 25;\n\tQLLexer.INT = 26;\n\tQLLexer.MAX = 27;\n\tQLLexer.MIN = 28;\n\tQLLexer.MODULE = 29;\n\tQLLexer.NOT = 30;\n\tQLLexer.NONE = 31;\n\tQLLexer.OR = 32;\n\tQLLexer.ORDER = 33;\n\tQLLexer.PREDICATE = 34;\n\tQLLexer.RANK = 35;\n\tQLLexer.RESULT = 36;\n\tQLLexer.SELECT = 37;\n\tQLLexer.STRICTCOUNT = 38;\n\tQLLexer.STRICTSUM = 39;\n\tQLLexer.STRICTCONCAT = 40;\n\tQLLexer.CONCAT = 41;\n\tQLLexer.STRING = 42;\n\tQLLexer.SUM = 43;\n\tQLLexer.SUPER = 44;\n\tQLLexer.THEN = 45;\n\tQLLexer.THIS = 46;\n\tQLLexer.TRUE = 47;\n\tQLLexer.WHERE = 48;\n\tQLLexer.LT = 49;\n\tQLLexer.LE = 50;\n\tQLLexer.EQ = 51;\n\tQLLexer.GT = 52;\n\tQLLexer.GE = 53;\n\tQLLexer.UNDERSCORE = 54;\n\tQLLexer.MINUS = 55;\n\tQLLexer.COMMA = 56;\n\tQLLexer.SEMI = 57;\n\tQLLexer.NE = 58;\n\tQLLexer.SLASH = 59;\n\tQLLexer.DOT = 60;\n\tQLLexer.RANGE = 61;\n\tQLLexer.OPAR = 62;\n\tQLLexer.CPAR = 63;\n\tQLLexer.OBLOCK = 64;\n\tQLLexer.CBLOCK = 65;\n\tQLLexer.OBRACE = 66;\n\tQLLexer.CBRACE = 67;\n\tQLLexer.STAR = 68;\n\tQLLexer.MOD = 69;\n\tQLLexer.PLUS = 70;\n\tQLLexer.BAR = 71;\n\tQLLexer.SELECTION = 72;\n\tQLLexer.Lowerid = 73;\n\tQLLexer.Upperid = 74;\n\tQLLexer.Atlowerid = 75;\n\tQLLexer.Atupperid = 76;\n\tQLLexer.Integer = 77;\n\tQLLexer.Float = 78;\n\tQLLexer.String = 79;\n\tQLLexer.WS = 80;\n\tQLLexer.COMMENT = 81;\n\tQLLexer.LINE_COMMENT = 82;\n\tQLLexer.StartQLDoc = 83;\n\tQLLexer.EndQLDoc = 84;\n\tQLLexer.CONTENT = 85;\n\n\tQLLexer.QLDOC = 1;\n\n\tQLLexer.prototype.channelNames = [\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\"];\n\n\tQLLexer.prototype.modeNames = [\"DEFAULT_MODE\", \"QLDOC\"];\n\n\tQLLexer.prototype.literalNames = [null, \"'and'\", \"'any'\", \"'as'\", \"'asc'\", \"'avg'\", \"'boolean'\", \"'by'\", \"'class'\", \"'newtype'\", \"'count'\", \"'date'\", \"'desc'\", \"'else'\", \"'exists'\", \"'extends'\", \"'false'\", \"'float'\", \"'forall'\", \"'forex'\", \"'from'\", \"'if'\", \"'implies'\", \"'import'\", \"'in'\", \"'instanceof'\", \"'int'\", \"'max'\", \"'min'\", \"'module'\", \"'not'\", \"'none'\", \"'or'\", \"'order'\", \"'predicate'\", \"'rank'\", \"'result'\", \"'select'\", \"'strictcount'\", \"'strictsum'\", \"'strictconcat'\", \"'concat'\", \"'string'\", \"'sum'\", \"'super'\", \"'then'\", \"'this'\", \"'true'\", \"'where'\", \"'<'\", \"'<='\", \"'='\", \"'>'\", \"'>='\", \"'_'\", \"'-'\", \"','\", \"';'\", \"'!='\", \"'/'\", \"'.'\", \"'..'\", \"'('\", \"')'\", \"'['\", \"']'\", \"'{'\", \"'}'\", \"'*'\", \"'%'\", \"'+'\", \"'|'\", \"'::'\", null, null, null, null, null, null, null, null, null, null, \"'/**'\", \"'*/'\"];\n\n\tQLLexer.prototype.symbolicNames = [null, \"AND\", \"ANY\", \"AS\", \"ASC\", \"AVG\", \"BOOLEAN\", \"BY\", \"CLASS\", \"NEWTYPE\", \"COUNT\", \"DATE\", \"DESC\", \"ELSE\", \"EXISTS\", \"EXTENDS\", \"FALSE\", \"FLOAT\", \"FORALL\", \"FOREX\", \"FROM\", \"IF\", \"IMPLIES\", \"IMPORT\", \"IN\", \"INSTANCEOF\", \"INT\", \"MAX\", \"MIN\", \"MODULE\", \"NOT\", \"NONE\", \"OR\", \"ORDER\", \"PREDICATE\", \"RANK\", \"RESULT\", \"SELECT\", \"STRICTCOUNT\", \"STRICTSUM\", \"STRICTCONCAT\", \"CONCAT\", \"STRING\", \"SUM\", \"SUPER\", \"THEN\", \"THIS\", \"TRUE\", \"WHERE\", \"LT\", \"LE\", \"EQ\", \"GT\", \"GE\", \"UNDERSCORE\", \"MINUS\", \"COMMA\", \"SEMI\", \"NE\", \"SLASH\", \"DOT\", \"RANGE\", \"OPAR\", \"CPAR\", \"OBLOCK\", \"CBLOCK\", \"OBRACE\", \"CBRACE\", \"STAR\", \"MOD\", \"PLUS\", \"BAR\", \"SELECTION\", \"Lowerid\", \"Upperid\", \"Atlowerid\", \"Atupperid\", \"Integer\", \"Float\", \"String\", \"WS\", \"COMMENT\", \"LINE_COMMENT\", \"StartQLDoc\", \"EndQLDoc\", \"CONTENT\"];\n\n\tQLLexer.prototype.ruleNames = [\"AND\", \"ANY\", \"AS\", \"ASC\", \"AVG\", \"BOOLEAN\", \"BY\", \"CLASS\", \"NEWTYPE\", \"COUNT\", \"DATE\", \"DESC\", \"ELSE\", \"EXISTS\", \"EXTENDS\", \"FALSE\", \"FLOAT\", \"FORALL\", \"FOREX\", \"FROM\", \"IF\", \"IMPLIES\", \"IMPORT\", \"IN\", \"INSTANCEOF\", \"INT\", \"MAX\", \"MIN\", \"MODULE\", \"NOT\", \"NONE\", \"OR\", \"ORDER\", \"PREDICATE\", \"RANK\", \"RESULT\", \"SELECT\", \"STRICTCOUNT\", \"STRICTSUM\", \"STRICTCONCAT\", \"CONCAT\", \"STRING\", \"SUM\", \"SUPER\", \"THEN\", \"THIS\", \"TRUE\", \"WHERE\", \"LT\", \"LE\", \"EQ\", \"GT\", \"GE\", \"UNDERSCORE\", \"MINUS\", \"COMMA\", \"SEMI\", \"NE\", \"SLASH\", \"DOT\", \"RANGE\", \"OPAR\", \"CPAR\", \"OBLOCK\", \"CBLOCK\", \"OBRACE\", \"CBRACE\", \"STAR\", \"MOD\", \"PLUS\", \"BAR\", \"SELECTION\", \"Digit\", \"Lower\", \"Upper\", \"IdentLetter\", \"Lowerid\", \"Upperid\", \"Atlowerid\", \"Atupperid\", \"Integer\", \"Float\", \"String\", \"WS\", \"COMMENT\", \"LINE_COMMENT\", \"StartQLDoc\", \"EndQLDoc\", \"CONTENT\"];\n\n\tQLLexer.prototype.grammarFileName = \"QLLexer.g4\";\n\n\texports.QLLexer = QLLexer;\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t// Generated from QLParser.g4 by ANTLR 4.7\n\t// jshint ignore: start\n\tvar antlr4 = __webpack_require__(1);\n\tvar QLParserVisitor = __webpack_require__(51).QLParserVisitor;\n\n\tvar grammarFileName = \"QLParser.g4\";\n\n\tvar serializedATN = ['\\x03\\u608B\\uA72A\\u8133\\uB9ED\\u417C\\u3BE7\\u7786\\u5964', '\\x03W\\u02A3\\x04\\x02\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t', '\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\\x07\\t\\x07\\x04', '\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\x0B\\t\\x0B\\x04\\f\\t\\f\\x04', '\\r\\t\\r\\x04\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\\t\\x10\\x04', '\\x11\\t\\x11\\x04\\x12\\t\\x12\\x04\\x13\\t\\x13\\x04\\x14\\t', '\\x14\\x04\\x15\\t\\x15\\x04\\x16\\t\\x16\\x04\\x17\\t\\x17\\x04', '\\x18\\t\\x18\\x04\\x19\\t\\x19\\x04\\x1A\\t\\x1A\\x04\\x1B\\t', '\\x1B\\x04\\x1C\\t\\x1C\\x04\\x1D\\t\\x1D\\x04\\x1E\\t\\x1E\\x04', '\\x1F\\t\\x1F\\x04 \\t \\x04!\\t!\\x04\"\\t\"\\x04#\\t#\\x04$\\t$\\x04', '%\\t%\\x04&\\t&\\x04\\'\\t\\'\\x04(\\t(\\x04)\\t)\\x04*\\t*\\x04+\\t+\\x04', ',\\t,\\x04-\\t-\\x04.\\t.\\x04/\\t/\\x040\\t0\\x041\\t1\\x042\\t2\\x04', '3\\t3\\x044\\t4\\x045\\t5\\x046\\t6\\x047\\t7\\x048\\t8\\x049\\t9\\x04', ':\\t:\\x04;\\t;\\x04<\\t<\\x04=\\t=\\x04>\\t>\\x04?\\t?\\x04@\\t@\\x04', 'A\\tA\\x04B\\tB\\x04C\\tC\\x04D\\tD\\x04E\\tE\\x03\\x02\\x03\\x02', '\\x03\\x02\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03', '\\x03\\x03\\x03\\x03\\x05\\x03\\x95\\n\\x03\\x03\\x04\\x07', '\\x04\\x98\\n\\x04\\f\\x04\\x0E\\x04\\x9B\\x0B\\x04\\x03\\x05', '\\x07\\x05\\x9E\\n\\x05\\f\\x05\\x0E\\x05\\xA1\\x0B\\x05\\x03', '\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x05', '\\x05\\xA9\\n\\x05\\x03\\x05\\x05\\x05\\xAC\\n\\x05\\x03\\x06', '\\x03\\x06\\x03\\x06\\x03\\x06\\x05\\x06\\xB2\\n\\x06\\x03', '\\x07\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\b\\x03\\b\\x03\\b\\x03', '\\b\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03', '\\n\\x03\\n\\x03\\n\\x03\\n\\x05\\n\\xC8\\n\\n\\x03\\x0B\\x03\\x0B', '\\x03\\x0B\\x03\\x0B\\x03\\x0B\\x03\\f\\x03\\f\\x03\\f\\x07\\f', '\\xD2\\n\\f\\f\\f\\x0E\\f\\xD5\\x0B\\f\\x03\\r\\x05\\r\\xD8\\n\\r\\x03', '\\r\\x07\\r\\xDB\\n\\r\\f\\r\\x0E\\r\\xDE\\x0B\\r\\x03\\r\\x03\\r\\x03', '\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\x0E\\x03\\x0E\\x05\\x0E\\xE8', '\\n\\x0E\\x03\\x0F\\x03\\x0F\\x05\\x0F\\xEC\\n\\x0F\\x03\\x0F', '\\x03\\x0F\\x05\\x0F\\xF0\\n\\x0F\\x03\\x0F\\x03\\x0F\\x03', '\\x0F\\x05\\x0F\\xF5\\n\\x0F\\x03\\x10\\x03\\x10\\x03\\x10', '\\x03\\x10\\x03\\x10\\x03\\x10\\x07\\x10\\xFD\\n\\x10\\f\\x10', '\\x0E\\x10\\u0100\\x0B\\x10\\x03\\x10\\x03\\x10\\x07\\x10\\u0104', '\\n\\x10\\f\\x10\\x0E\\x10\\u0107\\x0B\\x10\\x03\\x10\\x03\\x10', '\\x03\\x10\\x05\\x10\\u010C\\n\\x10\\x03\\x11\\x07\\x11\\u010F', '\\n\\x11\\f\\x11\\x0E\\x11\\u0112\\x0B\\x11\\x03\\x11\\x03\\x11', '\\x03\\x11\\x05\\x11\\u0117\\n\\x11\\x03\\x11\\x05\\x11\\u011A', '\\n\\x11\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12', '\\x03\\x12\\x03\\x12\\x03\\x13\\x03\\x13\\x03\\x13\\x03\\x13', '\\x03\\x13\\x03\\x13\\x03\\x13\\x03\\x14\\x03\\x14\\x03\\x14', '\\x03\\x15\\x03\\x15\\x03\\x15\\x05\\x15\\u0130\\n\\x15\\x03', '\\x16\\x03\\x16\\x03\\x17\\x03\\x17\\x03\\x17\\x03\\x17\\x03', '\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x07', '\\x18\\u013E\\n\\x18\\f\\x18\\x0E\\x18\\u0141\\x0B\\x18\\x05\\x18', '\\u0143\\n\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03', '\\x18\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03', '\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03', '\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03', '\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03', '\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x05\\x19\\u0166', '\\n\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19', '\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19', '\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19', '\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19', '\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x07\\x19\\u0183\\n', '\\x19\\f\\x19\\x0E\\x19\\u0186\\x0B\\x19\\x03\\x1A\\x03\\x1A', '\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x05\\x1B', '\\u018F\\n\\x1B\\x05\\x1B\\u0191\\n\\x1B\\x03\\x1B\\x05\\x1B\\u0194', '\\n\\x1B\\x03\\x1C\\x03\\x1C\\x03\\x1D\\x03\\x1D\\x05\\x1D', '\\u019A\\n\\x1D\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x07\\x1E\\u019F', '\\n\\x1E\\f\\x1E\\x0E\\x1E\\u01A2\\x0B\\x1E\\x05\\x1E\\u01A4\\n\\x1E', '\\x03\\x1F\\x03\\x1F\\x05\\x1F\\u01A8\\n\\x1F\\x03\\x1F\\x03', '\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03', '\\x1F\\x05\\x1F\\u01B2\\n\\x1F\\x03 \\x03 \\x03 \\x05 \\u01B7\\n', ' \\x03 \\x03 \\x03 \\x03 \\x03 \\x03 \\x03 \\x03 \\x03 \\x05', ' \\u01C2\\n \\x03 \\x03 \\x03 \\x03 \\x03 \\x03 \\x07 \\u01CA\\n', ' \\f \\x0E \\u01CD\\x0B \\x03 \\x03 \\x05 \\u01D1\\n \\x03 \\x03', ' \\x03 \\x03 \\x03 \\x03 \\x03 \\x03 \\x03 \\x03 \\x03 \\x03', ' \\x03 \\x03 \\x05 \\u01E1\\n \\x03 \\x03 \\x03 \\x07 \\u01E6\\n', ' \\f \\x0E \\u01E9\\x0B \\x03!\\x03!\\x03!\\x05!\\u01EE\\n!\\x03', '!\\x03!\\x03!\\x05!\\u01F3\\n!\\x05!\\u01F5\\n!\\x05!\\u01F7\\n!\\x03', '!\\x03!\\x05!\\u01FB\\n!\\x05!\\u01FD\\n!\\x03\"\\x03\"\\x03\"\\x03', '\"\\x05\"\\u0203\\n\"\\x03#\\x03#\\x03$\\x03$\\x03$\\x05$\\u020A', '\\n$\\x03%\\x03%\\x03&\\x03&\\x03\\'\\x03\\'\\x03(\\x03(\\x03', ')\\x03)\\x03*\\x03*\\x03+\\x03+\\x03+\\x07+\\u021B\\n+\\f+\\x0E', '+\\u021E\\x0B+\\x05+\\u0220\\n+\\x03,\\x03,\\x03,\\x03-\\x03-\\x03', '-\\x07-\\u0228\\n-\\f-\\x0E-\\u022B\\x0B-\\x03.\\x03.\\x03.\\x05', '.\\u0230\\n.\\x03/\\x03/\\x03/\\x03/\\x03/\\x07/\\u0237\\n/\\f/\\x0E', '/\\u023A\\x0B/\\x030\\x030\\x050\\u023E\\n0\\x031\\x031\\x071\\u0242', '\\n1\\f1\\x0E1\\u0245\\x0B1\\x031\\x031\\x032\\x032\\x033\\x03', '3\\x034\\x034\\x035\\x035\\x035\\x035\\x035\\x035\\x075\\u0255', '\\n5\\f5\\x0E5\\u0258\\x0B5\\x035\\x035\\x055\\u025C\\n5\\x036\\x03', '6\\x037\\x037\\x037\\x057\\u0263\\n7\\x038\\x038\\x039\\x039\\x03', '9\\x079\\u026A\\n9\\f9\\x0E9\\u026D\\x0B9\\x03:\\x03:\\x03:\\x07', ':\\u0272\\n:\\f:\\x0E:\\u0275\\x0B:\\x03;\\x03;\\x03;\\x07;\\u027A', '\\n;\\f;\\x0E;\\u027D\\x0B;\\x03<\\x03<\\x03=\\x03=\\x03>\\x03', '>\\x03?\\x03?\\x05?\\u0287\\n?\\x03@\\x03@\\x03@\\x05@\\u028C\\n', '@\\x03@\\x03@\\x05@\\u0290\\n@\\x03A\\x03A\\x03B\\x03B\\x03B\\x05', 'B\\u0297\\nB\\x03B\\x03B\\x03C\\x03C\\x03C\\x03C\\x03D\\x03D\\x03', 'E\\x03E\\x03E\\x02\\x040>F\\x02\\x04\\x06\\b\\n\\f\\x0E\\x10\\x12', '\\x14\\x16\\x18\\x1A\\x1C\\x1E \"$&(*,.02468:<>@BDFHJLNPRTVXZ', '\\\\^`bdfhjlnprtvxz|~\\x80\\x82\\x84\\x86\\x88\\x02\\x0E\\x04', '\\x02\\x04\\x04!!\\x04\\x02\\x10\\x10\\x14\\x15\\x04\\x02', '\\x12\\x1211\\x04\\x0237<<\\x04\\x0299HH\\x04\\x02==FG\\x04', '\\x02FFHH\\x04\\x02\\x06\\x06\\x0E\\x0E\\x03\\x02KL\\x03\\x02', 'KM\\b\\x02\\b\\b\\r\\r\\x13\\x13\\x1C\\x1C,,MM\\t\\x02\\x04\\x04\\x07', '\\x07\\f\\f\\x1D\\x1E%%(+--\\x02\\u02B9\\x02\\x8A\\x03\\x02\\x02', '\\x02\\x04\\x8D\\x03\\x02\\x02\\x02\\x06\\x99\\x03\\x02\\x02', '\\x02\\b\\xAB\\x03\\x02\\x02\\x02\\n\\xAD\\x03\\x02\\x02\\x02', '\\f\\xB3\\x03\\x02\\x02\\x02\\x0E\\xB7\\x03\\x02\\x02\\x02', '\\x10\\xBB\\x03\\x02\\x02\\x02\\x12\\xBF\\x03\\x02\\x02\\x02', '\\x14\\xC9\\x03\\x02\\x02\\x02\\x16\\xCE\\x03\\x02\\x02\\x02', '\\x18\\xD7\\x03\\x02\\x02\\x02\\x1A\\xE7\\x03\\x02\\x02\\x02', '\\x1C\\xEB\\x03\\x02\\x02\\x02\\x1E\\xF6\\x03\\x02\\x02\\x02', ' \\u0119\\x03\\x02\\x02\\x02\"\\u011B\\x03\\x02\\x02\\x02$\\u0122', '\\x03\\x02\\x02\\x02&\\u0129\\x03\\x02\\x02\\x02(\\u012F\\x03', '\\x02\\x02\\x02*\\u0131\\x03\\x02\\x02\\x02,\\u0133\\x03\\x02', '\\x02\\x02.\\u0137\\x03\\x02\\x02\\x020\\u0165\\x03\\x02\\x02', '\\x022\\u0187\\x03\\x02\\x02\\x024\\u0193\\x03\\x02\\x02\\x02', '6\\u0195\\x03\\x02\\x02\\x028\\u0199\\x03\\x02\\x02\\x02:\\u01A3', '\\x03\\x02\\x02\\x02<\\u01B1\\x03\\x02\\x02\\x02>\\u01E0\\x03', '\\x02\\x02\\x02@\\u01FC\\x03\\x02\\x02\\x02B\\u0202\\x03\\x02', '\\x02\\x02D\\u0204\\x03\\x02\\x02\\x02F\\u0209\\x03\\x02\\x02', '\\x02H\\u020B\\x03\\x02\\x02\\x02J\\u020D\\x03\\x02\\x02\\x02', 'L\\u020F\\x03\\x02\\x02\\x02N\\u0211\\x03\\x02\\x02\\x02P\\u0213', '\\x03\\x02\\x02\\x02R\\u0215\\x03\\x02\\x02\\x02T\\u021F\\x03', '\\x02\\x02\\x02V\\u0221\\x03\\x02\\x02\\x02X\\u0224\\x03\\x02', '\\x02\\x02Z\\u022C\\x03\\x02\\x02\\x02\\\\\\u0231\\x03\\x02\\x02', '\\x02^\\u023B\\x03\\x02\\x02\\x02`\\u023F\\x03\\x02\\x02\\x02', 'b\\u0248\\x03\\x02\\x02\\x02d\\u024A\\x03\\x02\\x02\\x02f\\u024C', '\\x03\\x02\\x02\\x02h\\u025B\\x03\\x02\\x02\\x02j\\u025D\\x03', '\\x02\\x02\\x02l\\u0262\\x03\\x02\\x02\\x02n\\u0264\\x03\\x02', '\\x02\\x02p\\u0266\\x03\\x02\\x02\\x02r\\u026E\\x03\\x02\\x02', '\\x02t\\u0276\\x03\\x02\\x02\\x02v\\u027E\\x03\\x02\\x02\\x02', 'x\\u0280\\x03\\x02\\x02\\x02z\\u0282\\x03\\x02\\x02\\x02|\\u0286', '\\x03\\x02\\x02\\x02~\\u028F\\x03\\x02\\x02\\x02\\x80\\u0291', '\\x03\\x02\\x02\\x02\\x82\\u0296\\x03\\x02\\x02\\x02\\x84\\u029A', '\\x03\\x02\\x02\\x02\\x86\\u029E\\x03\\x02\\x02\\x02\\x88\\u02A0', '\\x03\\x02\\x02\\x02\\x8A\\x8B\\x05\\x06\\x04\\x02\\x8B\\x8C', '\\x07\\x02\\x02\\x03\\x8C\\x03\\x03\\x02\\x02\\x02\\x8D\\x8E', '\\x07\\x1F\\x02\\x02\\x8E\\x94\\x05n8\\x02\\x8F\\x90\\x07', 'D\\x02\\x02\\x90\\x91\\x05\\x06\\x04\\x02\\x91\\x92\\x07', 'E\\x02\\x02\\x92\\x95\\x03\\x02\\x02\\x02\\x93\\x95\\x05', '\\f\\x07\\x02\\x94\\x8F\\x03\\x02\\x02\\x02\\x94\\x93\\x03', '\\x02\\x02\\x02\\x95\\x05\\x03\\x02\\x02\\x02\\x96\\x98\\x05', '\\b\\x05\\x02\\x97\\x96\\x03\\x02\\x02\\x02\\x98\\x9B\\x03', '\\x02\\x02\\x02\\x99\\x97\\x03\\x02\\x02\\x02\\x99\\x9A\\x03', '\\x02\\x02\\x02\\x9A\\x07\\x03\\x02\\x02\\x02\\x9B\\x99\\x03', '\\x02\\x02\\x02\\x9C\\x9E\\x05h5\\x02\\x9D\\x9C\\x03\\x02', '\\x02\\x02\\x9E\\xA1\\x03\\x02\\x02\\x02\\x9F\\x9D\\x03\\x02', '\\x02\\x02\\x9F\\xA0\\x03\\x02\\x02\\x02\\xA0\\xA8\\x03\\x02', '\\x02\\x02\\xA1\\x9F\\x03\\x02\\x02\\x02\\xA2\\xA9\\x05\\n', '\\x06\\x02\\xA3\\xA9\\x05\\x12\\n\\x02\\xA4\\xA9\\x05\\x1E', '\\x10\\x02\\xA5\\xA9\\x05\\x14\\x0B\\x02\\xA6\\xA9\\x05\\x1C', '\\x0F\\x02\\xA7\\xA9\\x05\\x04\\x03\\x02\\xA8\\xA2\\x03\\x02', '\\x02\\x02\\xA8\\xA3\\x03\\x02\\x02\\x02\\xA8\\xA4\\x03\\x02', '\\x02\\x02\\xA8\\xA5\\x03\\x02\\x02\\x02\\xA8\\xA6\\x03\\x02', '\\x02\\x02\\xA8\\xA7\\x03\\x02\\x02\\x02\\xA9\\xAC\\x03\\x02', '\\x02\\x02\\xAA\\xAC\\x05`1\\x02\\xAB\\x9F\\x03\\x02\\x02', '\\x02\\xAB\\xAA\\x03\\x02\\x02\\x02\\xAC\\t\\x03\\x02\\x02', '\\x02\\xAD\\xAE\\x07\\x19\\x02\\x02\\xAE\\xB1\\x05r:\\x02', '\\xAF\\xB0\\x07\\x05\\x02\\x02\\xB0\\xB2\\x05n8\\x02\\xB1', '\\xAF\\x03\\x02\\x02\\x02\\xB1\\xB2\\x03\\x02\\x02\\x02\\xB2', '\\x0B\\x03\\x02\\x02\\x02\\xB3\\xB4\\x075\\x02\\x02\\xB4', '\\xB5\\x05t;\\x02\\xB5\\xB6\\x07;\\x02\\x02\\xB6\\r\\x03\\x02', '\\x02\\x02\\xB7\\xB8\\x075\\x02\\x02\\xB8\\xB9\\x05\\x84', 'C\\x02\\xB9\\xBA\\x07;\\x02\\x02\\xBA\\x0F\\x03\\x02\\x02', '\\x02\\xBB\\xBC\\x075\\x02\\x02\\xBC\\xBD\\x05~@\\x02\\xBD', '\\xBE\\x07;\\x02\\x02\\xBE\\x11\\x03\\x02\\x02\\x02\\xBF', '\\xC0\\x05|?\\x02\\xC0\\xC7\\x05\\x80A\\x02\\xC1\\xC2\\x07', '@\\x02\\x02\\xC2\\xC3\\x05T+\\x02\\xC3\\xC4\\x07A\\x02\\x02', '\\xC4\\xC5\\x05(\\x15\\x02\\xC5\\xC8\\x03\\x02\\x02\\x02', '\\xC6\\xC8\\x05\\x0E\\b\\x02\\xC7\\xC1\\x03\\x02\\x02\\x02', '\\xC7\\xC6\\x03\\x02\\x02\\x02\\xC8\\x13\\x03\\x02\\x02\\x02', '\\xC9\\xCA\\x07\\x0B\\x02\\x02\\xCA\\xCB\\x05x=\\x02\\xCB', '\\xCC\\x075\\x02\\x02\\xCC\\xCD\\x05\\x16\\f\\x02\\xCD\\x15', '\\x03\\x02\\x02\\x02\\xCE\\xD3\\x05\\x18\\r\\x02\\xCF\\xD0', '\\x07\"\\x02\\x02\\xD0\\xD2\\x05\\x18\\r\\x02\\xD1\\xCF\\x03', '\\x02\\x02\\x02\\xD2\\xD5\\x03\\x02\\x02\\x02\\xD3\\xD1\\x03', '\\x02\\x02\\x02\\xD3\\xD4\\x03\\x02\\x02\\x02\\xD4\\x17\\x03', '\\x02\\x02\\x02\\xD5\\xD3\\x03\\x02\\x02\\x02\\xD6\\xD8\\x05', '`1\\x02\\xD7\\xD6\\x03\\x02\\x02\\x02\\xD7\\xD8\\x03\\x02', '\\x02\\x02\\xD8\\xDC\\x03\\x02\\x02\\x02\\xD9\\xDB\\x05h', '5\\x02\\xDA\\xD9\\x03\\x02\\x02\\x02\\xDB\\xDE\\x03\\x02', '\\x02\\x02\\xDC\\xDA\\x03\\x02\\x02\\x02\\xDC\\xDD\\x03\\x02', '\\x02\\x02\\xDD\\xDF\\x03\\x02\\x02\\x02\\xDE\\xDC\\x03\\x02', '\\x02\\x02\\xDF\\xE0\\x05x=\\x02\\xE0\\xE1\\x07@\\x02\\x02', '\\xE1\\xE2\\x05T+\\x02\\xE2\\xE3\\x07A\\x02\\x02\\xE3\\xE4', '\\x05\\x1A\\x0E\\x02\\xE4\\x19\\x03\\x02\\x02\\x02\\xE5\\xE8', '\\x03\\x02\\x02\\x02\\xE6\\xE8\\x05,\\x17\\x02\\xE7\\xE5', '\\x03\\x02\\x02\\x02\\xE7\\xE6\\x03\\x02\\x02\\x02\\xE8\\x1B', '\\x03\\x02\\x02\\x02\\xE9\\xEA\\x07\\x16\\x02\\x02\\xEA\\xEC', '\\x05T+\\x02\\xEB\\xE9\\x03\\x02\\x02\\x02\\xEB\\xEC\\x03', '\\x02\\x02\\x02\\xEC\\xEF\\x03\\x02\\x02\\x02\\xED\\xEE\\x07', '2\\x02\\x02\\xEE\\xF0\\x050\\x19\\x02\\xEF\\xED\\x03\\x02', '\\x02\\x02\\xEF\\xF0\\x03\\x02\\x02\\x02\\xF0\\xF1\\x03\\x02', '\\x02\\x02\\xF1\\xF2\\x07\\'\\x02\\x02\\xF2\\xF4\\x05X-\\x02', '\\xF3\\xF5\\x05\\\\/\\x02\\xF4\\xF3\\x03\\x02\\x02\\x02\\xF4', '\\xF5\\x03\\x02\\x02\\x02\\xF5\\x1D\\x03\\x02\\x02\\x02\\xF6', '\\xF7\\x07\\n\\x02\\x02\\xF7\\u010B\\x05x=\\x02\\xF8\\xF9\\x07', '\\x11\\x02\\x02\\xF9\\xFE\\x05~@\\x02\\xFA\\xFB\\x07:\\x02', '\\x02\\xFB\\xFD\\x05~@\\x02\\xFC\\xFA\\x03\\x02\\x02\\x02', '\\xFD\\u0100\\x03\\x02\\x02\\x02\\xFE\\xFC\\x03\\x02\\x02\\x02', '\\xFE\\xFF\\x03\\x02\\x02\\x02\\xFF\\u0101\\x03\\x02\\x02\\x02', '\\u0100\\xFE\\x03\\x02\\x02\\x02\\u0101\\u0105\\x07D\\x02\\x02', '\\u0102\\u0104\\x05 \\x11\\x02\\u0103\\u0102\\x03\\x02\\x02\\x02', '\\u0104\\u0107\\x03\\x02\\x02\\x02\\u0105\\u0103\\x03\\x02\\x02\\x02', '\\u0105\\u0106\\x03\\x02\\x02\\x02\\u0106\\u0108\\x03\\x02\\x02\\x02', '\\u0107\\u0105\\x03\\x02\\x02\\x02\\u0108\\u0109\\x07E\\x02\\x02', '\\u0109\\u010C\\x03\\x02\\x02\\x02\\u010A\\u010C\\x05\\x10\\t\\x02', '\\u010B\\xF8\\x03\\x02\\x02\\x02\\u010B\\u010A\\x03\\x02\\x02\\x02', '\\u010C\\x1F\\x03\\x02\\x02\\x02\\u010D\\u010F\\x05h5\\x02\\u010E', '\\u010D\\x03\\x02\\x02\\x02\\u010F\\u0112\\x03\\x02\\x02\\x02\\u0110', '\\u010E\\x03\\x02\\x02\\x02\\u0110\\u0111\\x03\\x02\\x02\\x02\\u0111', '\\u0116\\x03\\x02\\x02\\x02\\u0112\\u0110\\x03\\x02\\x02\\x02\\u0113', '\\u0117\\x05\"\\x12\\x02\\u0114\\u0117\\x05$\\x13\\x02\\u0115\\u0117', '\\x05&\\x14\\x02\\u0116\\u0113\\x03\\x02\\x02\\x02\\u0116\\u0114', '\\x03\\x02\\x02\\x02\\u0116\\u0115\\x03\\x02\\x02\\x02\\u0117\\u011A', '\\x03\\x02\\x02\\x02\\u0118\\u011A\\x05`1\\x02\\u0119\\u0110\\x03', '\\x02\\x02\\x02\\u0119\\u0118\\x03\\x02\\x02\\x02\\u011A!\\x03', '\\x02\\x02\\x02\\u011B\\u011C\\x05x=\\x02\\u011C\\u011D\\x07@\\x02', '\\x02\\u011D\\u011E\\x07A\\x02\\x02\\u011E\\u011F\\x07D\\x02\\x02', '\\u011F\\u0120\\x050\\x19\\x02\\u0120\\u0121\\x07E\\x02\\x02\\u0121', '#\\x03\\x02\\x02\\x02\\u0122\\u0123\\x05|?\\x02\\u0123\\u0124\\x05', '\\x80A\\x02\\u0124\\u0125\\x07@\\x02\\x02\\u0125\\u0126\\x05T+\\x02', '\\u0126\\u0127\\x07A\\x02\\x02\\u0127\\u0128\\x05(\\x15\\x02\\u0128', '%\\x03\\x02\\x02\\x02\\u0129\\u012A\\x05V,\\x02\\u012A\\u012B\\x07', ';\\x02\\x02\\u012B\\'\\x03\\x02\\x02\\x02\\u012C\\u0130\\x05*\\x16', '\\x02\\u012D\\u0130\\x05,\\x17\\x02\\u012E\\u0130\\x05.\\x18\\x02', '\\u012F\\u012C\\x03\\x02\\x02\\x02\\u012F\\u012D\\x03\\x02\\x02\\x02', '\\u012F\\u012E\\x03\\x02\\x02\\x02\\u0130)\\x03\\x02\\x02\\x02', '\\u0131\\u0132\\x07;\\x02\\x02\\u0132+\\x03\\x02\\x02\\x02\\u0133', '\\u0134\\x07D\\x02\\x02\\u0134\\u0135\\x050\\x19\\x02\\u0135\\u0136', '\\x07E\\x02\\x02\\u0136-\\x03\\x02\\x02\\x02\\u0137\\u0138\\x07', '5\\x02\\x02\\u0138\\u0139\\x05f4\\x02\\u0139\\u0142\\x07@\\x02\\x02', '\\u013A\\u013F\\x05\\x84C\\x02\\u013B\\u013C\\x07:\\x02\\x02\\u013C', '\\u013E\\x05\\x84C\\x02\\u013D\\u013B\\x03\\x02\\x02\\x02\\u013E', '\\u0141\\x03\\x02\\x02\\x02\\u013F\\u013D\\x03\\x02\\x02\\x02\\u013F', '\\u0140\\x03\\x02\\x02\\x02\\u0140\\u0143\\x03\\x02\\x02\\x02\\u0141', '\\u013F\\x03\\x02\\x02\\x02\\u0142\\u013A\\x03\\x02\\x02\\x02\\u0142', '\\u0143\\x03\\x02\\x02\\x02\\u0143\\u0144\\x03\\x02\\x02\\x02\\u0144', '\\u0145\\x07A\\x02\\x02\\u0145\\u0146\\x07@\\x02\\x02\\u0146\\u0147', '\\x05:\\x1E\\x02\\u0147\\u0148\\x07A\\x02\\x02\\u0148/\\x03\\x02', '\\x02\\x02\\u0149\\u014A\\b\\x19\\x01\\x02\\u014A\\u014B\\x052\\x1A', '\\x02\\u014B\\u014C\\x07@\\x02\\x02\\u014C\\u014D\\x07A\\x02\\x02', '\\u014D\\u0166\\x03\\x02\\x02\\x02\\u014E\\u014F\\x07@\\x02\\x02', '\\u014F\\u0150\\x05~@\\x02\\u0150\\u0151\\x07A\\x02\\x02\\u0151\\u0152', '\\x050\\x19\\x10\\u0152\\u0166\\x03\\x02\\x02\\x02\\u0153\\u0166', '\\x05> \\x02\\u0154\\u0155\\x05J&\\x02\\u0155\\u0156\\x050\\x19\\x0E', '\\u0156\\u0166\\x03\\x02\\x02\\x02\\u0157\\u0158\\x07 \\x02\\x02', '\\u0158\\u0166\\x050\\x19\\b\\u0159\\u015A\\x07\\x17\\x02\\x02\\u015A', '\\u015B\\x050\\x19\\x02\\u015B\\u015C\\x07/\\x02\\x02\\u015C\\u015D', '\\x050\\x19\\x02\\u015D\\u015E\\x07\\x0F\\x02\\x02\\u015E\\u015F', '\\x050\\x19\\x07\\u015F\\u0166\\x03\\x02\\x02\\x02\\u0160\\u0161', '\\x056\\x1C\\x02\\u0161\\u0162\\x07@\\x02\\x02\\u0162\\u0163\\x05', '4\\x1B\\x02\\u0163\\u0164\\x07A\\x02\\x02\\u0164\\u0166\\x03\\x02', '\\x02\\x02\\u0165\\u0149\\x03\\x02\\x02\\x02\\u0165\\u014E\\x03\\x02', '\\x02\\x02\\u0165\\u0153\\x03\\x02\\x02\\x02\\u0165\\u0154\\x03\\x02', '\\x02\\x02\\u0165\\u0157\\x03\\x02\\x02\\x02\\u0165\\u0159\\x03\\x02', '\\x02\\x02\\u0165\\u0160\\x03\\x02\\x02\\x02\\u0166\\u0184\\x03\\x02', '\\x02\\x02\\u0167\\u0168\\f\\r\\x02\\x02\\u0168\\u0169\\x05L\\'\\x02', '\\u0169\\u016A\\x050\\x19\\x0E\\u016A\\u0183\\x03\\x02\\x02\\x02', '\\u016B\\u016C\\f\\f\\x02\\x02\\u016C\\u016D\\x05N(\\x02\\u016D\\u016E\\x05', '0\\x19\\r\\u016E\\u0183\\x03\\x02\\x02\\x02\\u016F\\u0170\\f\\n\\x02', '\\x02\\u0170\\u0171\\x05H%\\x02\\u0171\\u0172\\x050\\x19\\x0B\\u0172', '\\u0183\\x03\\x02\\x02\\x02\\u0173\\u0174\\f\\x06\\x02\\x02\\u0174', '\\u0175\\x07\\x03\\x02\\x02\\u0175\\u0183\\x050\\x19\\x07\\u0176', '\\u0177\\f\\x05\\x02\\x02\\u0177\\u0178\\x07\"\\x02\\x02\\u0178\\u0183', '\\x050\\x19\\x06\\u0179\\u017A\\f\\x04\\x02\\x02\\u017A\\u017B\\x07', '\\x18\\x02\\x02\\u017B\\u0183\\x050\\x19\\x04\\u017C\\u017D\\f\\x0B', '\\x02\\x02\\u017D\\u017E\\x07\\x1A\\x02\\x02\\u017E\\u0183\\x05>', ' \\x02\\u017F\\u0180\\f\\t\\x02\\x02\\u0180\\u0181\\x07\\x1B\\x02\\x02', '\\u0181\\u0183\\x05~@\\x02\\u0182\\u0167\\x03\\x02\\x02\\x02\\u0182', '\\u016B\\x03\\x02\\x02\\x02\\u0182\\u016F\\x03\\x02\\x02\\x02\\u0182', '\\u0173\\x03\\x02\\x02\\x02\\u0182\\u0176\\x03\\x02\\x02\\x02\\u0182', '\\u0179\\x03\\x02\\x02\\x02\\u0182\\u017C\\x03\\x02\\x02\\x02\\u0182', '\\u017F\\x03\\x02\\x02\\x02\\u0183\\u0186\\x03\\x02\\x02\\x02\\u0184', '\\u0182\\x03\\x02\\x02\\x02\\u0184\\u0185\\x03\\x02\\x02\\x02\\u0185', '1\\x03\\x02\\x02\\x02\\u0186\\u0184\\x03\\x02\\x02\\x02\\u0187', '\\u0188\\t\\x02\\x02\\x02\\u01883\\x03\\x02\\x02\\x02\\u0189\\u0190', '\\x05T+\\x02\\u018A\\u018B\\x07I\\x02\\x02\\u018B\\u018E\\x050\\x19', '\\x02\\u018C\\u018D\\x07I\\x02\\x02\\u018D\\u018F\\x050\\x19\\x02', '\\u018E\\u018C\\x03\\x02\\x02\\x02\\u018E\\u018F\\x03\\x02\\x02\\x02', '\\u018F\\u0191\\x03\\x02\\x02\\x02\\u0190\\u018A\\x03\\x02\\x02\\x02', '\\u0190\\u0191\\x03\\x02\\x02\\x02\\u0191\\u0194\\x03\\x02\\x02\\x02', '\\u0192\\u0194\\x050\\x19\\x02\\u0193\\u0189\\x03\\x02\\x02\\x02', '\\u0193\\u0192\\x03\\x02\\x02\\x02\\u01945\\x03\\x02\\x02\\x02', '\\u0195\\u0196\\t\\x03\\x02\\x02\\u01967\\x03\\x02\\x02\\x02\\u0197', '\\u019A\\x050\\x19\\x02\\u0198\\u019A\\x078\\x02\\x02\\u0199\\u0197', '\\x03\\x02\\x02\\x02\\u0199\\u0198\\x03\\x02\\x02\\x02\\u019A9', '\\x03\\x02\\x02\\x02\\u019B\\u01A0\\x058\\x1D\\x02\\u019C\\u019D', '\\x07:\\x02\\x02\\u019D\\u019F\\x058\\x1D\\x02\\u019E\\u019C\\x03', '\\x02\\x02\\x02\\u019F\\u01A2\\x03\\x02\\x02\\x02\\u01A0\\u019E\\x03', '\\x02\\x02\\x02\\u01A0\\u01A1\\x03\\x02\\x02\\x02\\u01A1\\u01A4\\x03', '\\x02\\x02\\x02\\u01A2\\u01A0\\x03\\x02\\x02\\x02\\u01A3\\u019B\\x03', '\\x02\\x02\\x02\\u01A3\\u01A4\\x03\\x02\\x02\\x02\\u01A4;\\x03', '\\x02\\x02\\x02\\u01A5\\u01A7\\x05\\x80A\\x02\\u01A6\\u01A8\\x05', 'P)\\x02\\u01A7\\u01A6\\x03\\x02\\x02\\x02\\u01A7\\u01A8\\x03\\x02', '\\x02\\x02\\u01A8\\u01A9\\x03\\x02\\x02\\x02\\u01A9\\u01AA\\x07@', '\\x02\\x02\\u01AA\\u01AB\\x05:\\x1E\\x02\\u01AB\\u01AC\\x07A\\x02', '\\x02\\u01AC\\u01B2\\x03\\x02\\x02\\x02\\u01AD\\u01AE\\x07@\\x02', '\\x02\\u01AE\\u01AF\\x05~@\\x02\\u01AF\\u01B0\\x07A\\x02\\x02\\u01B0', '\\u01B2\\x03\\x02\\x02\\x02\\u01B1\\u01A5\\x03\\x02\\x02\\x02\\u01B1', '\\u01AD\\x03\\x02\\x02\\x02\\u01B2=\\x03\\x02\\x02\\x02\\u01B3', '\\u01B4\\b \\x01\\x02\\u01B4\\u01B6\\x05\\x82B\\x02\\u01B5\\u01B7\\x05', 'P)\\x02\\u01B6\\u01B5\\x03\\x02\\x02\\x02\\u01B6\\u01B7\\x03\\x02', '\\x02\\x02\\u01B7\\u01B8\\x03\\x02\\x02\\x02\\u01B8\\u01B9\\x07@', '\\x02\\x02\\u01B9\\u01BA\\x05:\\x1E\\x02\\u01BA\\u01BB\\x07A\\x02', '\\x02\\u01BB\\u01E1\\x03\\x02\\x02\\x02\\u01BC\\u01E1\\x05B\"\\x02', '\\u01BD\\u01E1\\x05F$\\x02\\u01BE\\u01BF\\x05~@\\x02\\u01BF\\u01C0\\x07', '>\\x02\\x02\\u01C0\\u01C2\\x03\\x02\\x02\\x02\\u01C1\\u01BE\\x03', '\\x02\\x02\\x02\\u01C1\\u01C2\\x03\\x02\\x02\\x02\\u01C2\\u01C3\\x03', '\\x02\\x02\\x02\\u01C3\\u01E1\\x07.\\x02\\x02\\u01C4\\u01D0\\x05', '\\x88E\\x02\\u01C5\\u01C6\\x07B\\x02\\x02\\u01C6\\u01CB\\x050\\x19', '\\x02\\u01C7\\u01C8\\x07:\\x02\\x02\\u01C8\\u01CA\\x050\\x19\\x02', '\\u01C9\\u01C7\\x03\\x02\\x02\\x02\\u01CA\\u01CD\\x03\\x02\\x02\\x02', '\\u01CB\\u01C9\\x03\\x02\\x02\\x02\\u01CB\\u01CC\\x03\\x02\\x02\\x02', '\\u01CC\\u01CE\\x03\\x02\\x02\\x02\\u01CD\\u01CB\\x03\\x02\\x02\\x02', '\\u01CE\\u01CF\\x07C\\x02\\x02\\u01CF\\u01D1\\x03\\x02\\x02\\x02', '\\u01D0\\u01C5\\x03\\x02\\x02\\x02\\u01D0\\u01D1\\x03\\x02\\x02\\x02', '\\u01D1\\u01D2\\x03\\x02\\x02\\x02\\u01D2\\u01D3\\x07@\\x02\\x02', '\\u01D3\\u01D4\\x05@!\\x02\\u01D4\\u01D5\\x07A\\x02\\x02\\u01D5\\u01E1', '\\x03\\x02\\x02\\x02\\u01D6\\u01D7\\x07B\\x02\\x02\\u01D7\\u01D8', '\\x050\\x19\\x02\\u01D8\\u01D9\\x07?\\x02\\x02\\u01D9\\u01DA\\x05', '0\\x19\\x02\\u01DA\\u01DB\\x07C\\x02\\x02\\u01DB\\u01E1\\x03\\x02', '\\x02\\x02\\u01DC\\u01DD\\x07@\\x02\\x02\\u01DD\\u01DE\\x050\\x19', '\\x02\\u01DE\\u01DF\\x07A\\x02\\x02\\u01DF\\u01E1\\x03\\x02\\x02', '\\x02\\u01E0\\u01B3\\x03\\x02\\x02\\x02\\u01E0\\u01BC\\x03\\x02\\x02', '\\x02\\u01E0\\u01BD\\x03\\x02\\x02\\x02\\u01E0\\u01C1\\x03\\x02\\x02', '\\x02\\u01E0\\u01C4\\x03\\x02\\x02\\x02\\u01E0\\u01D6\\x03\\x02\\x02', '\\x02\\u01E0\\u01DC\\x03\\x02\\x02\\x02\\u01E1\\u01E7\\x03\\x02\\x02', '\\x02\\u01E2\\u01E3\\f\\t\\x02\\x02\\u01E3\\u01E4\\x07>\\x02\\x02\\u01E4', '\\u01E6\\x05<\\x1F\\x02\\u01E5\\u01E2\\x03\\x02\\x02\\x02\\u01E6', '\\u01E9\\x03\\x02\\x02\\x02\\u01E7\\u01E5\\x03\\x02\\x02\\x02\\u01E7', '\\u01E8\\x03\\x02\\x02\\x02\\u01E8?\\x03\\x02\\x02\\x02\\u01E9', '\\u01E7\\x03\\x02\\x02\\x02\\u01EA\\u01F6\\x05T+\\x02\\u01EB\\u01ED', '\\x07I\\x02\\x02\\u01EC\\u01EE\\x050\\x19\\x02\\u01ED\\u01EC\\x03', '\\x02\\x02\\x02\\u01ED\\u01EE\\x03\\x02\\x02\\x02\\u01EE\\u01F4\\x03', '\\x02\\x02\\x02\\u01EF\\u01F0\\x07I\\x02\\x02\\u01F0\\u01F2\\x05', 'X-\\x02\\u01F1\\u01F3\\x05\\\\/\\x02\\u01F2\\u01F1\\x03\\x02\\x02\\x02', '\\u01F2\\u01F3\\x03\\x02\\x02\\x02\\u01F3\\u01F5\\x03\\x02\\x02\\x02', '\\u01F4\\u01EF\\x03\\x02\\x02\\x02\\u01F4\\u01F5\\x03\\x02\\x02\\x02', '\\u01F5\\u01F7\\x03\\x02\\x02\\x02\\u01F6\\u01EB\\x03\\x02\\x02\\x02', '\\u01F6\\u01F7\\x03\\x02\\x02\\x02\\u01F7\\u01FD\\x03\\x02\\x02\\x02', '\\u01F8\\u01FA\\x05X-\\x02\\u01F9\\u01FB\\x05\\\\/\\x02\\u01FA\\u01F9\\x03', '\\x02\\x02\\x02\\u01FA\\u01FB\\x03\\x02\\x02\\x02\\u01FB\\u01FD\\x03', '\\x02\\x02\\x02\\u01FC\\u01EA\\x03\\x02\\x02\\x02\\u01FC\\u01F8\\x03', '\\x02\\x02\\x02\\u01FDA\\x03\\x02\\x02\\x02\\u01FE\\u0203\\x07', 'O\\x02\\x02\\u01FF\\u0203\\x07P\\x02\\x02\\u0200\\u0203\\x05D#\\x02', '\\u0201\\u0203\\x07Q\\x02\\x02\\u0202\\u01FE\\x03\\x02\\x02\\x02', '\\u0202\\u01FF\\x03\\x02\\x02\\x02\\u0202\\u0200\\x03\\x02\\x02\\x02', '\\u0202\\u0201\\x03\\x02\\x02\\x02\\u0203C\\x03\\x02\\x02\\x02', '\\u0204\\u0205\\t\\x04\\x02\\x02\\u0205E\\x03\\x02\\x02\\x02\\u0206', '\\u020A\\x070\\x02\\x02\\u0207\\u020A\\x07&\\x02\\x02\\u0208\\u020A', '\\x05\\x86D\\x02\\u0209\\u0206\\x03\\x02\\x02\\x02\\u0209\\u0207', '\\x03\\x02\\x02\\x02\\u0209\\u0208\\x03\\x02\\x02\\x02\\u020AG', '\\x03\\x02\\x02\\x02\\u020B\\u020C\\t\\x05\\x02\\x02\\u020CI\\x03', '\\x02\\x02\\x02\\u020D\\u020E\\t\\x06\\x02\\x02\\u020EK\\x03\\x02', '\\x02\\x02\\u020F\\u0210\\t\\x07\\x02\\x02\\u0210M\\x03\\x02\\x02', '\\x02\\u0211\\u0212\\t\\x06\\x02\\x02\\u0212O\\x03\\x02\\x02\\x02', '\\u0213\\u0214\\t\\b\\x02\\x02\\u0214Q\\x03\\x02\\x02\\x02\\u0215\\u0216', '\\t\\t\\x02\\x02\\u0216S\\x03\\x02\\x02\\x02\\u0217\\u021C\\x05V,', '\\x02\\u0218\\u0219\\x07:\\x02\\x02\\u0219\\u021B\\x05V,\\x02\\u021A', '\\u0218\\x03\\x02\\x02\\x02\\u021B\\u021E\\x03\\x02\\x02\\x02\\u021C', '\\u021A\\x03\\x02\\x02\\x02\\u021C\\u021D\\x03\\x02\\x02\\x02\\u021D', '\\u0220\\x03\\x02\\x02\\x02\\u021E\\u021C\\x03\\x02\\x02\\x02\\u021F', '\\u0217\\x03\\x02\\x02\\x02\\u021F\\u0220\\x03\\x02\\x02\\x02\\u0220', 'U\\x03\\x02\\x02\\x02\\u0221\\u0222\\x05~@\\x02\\u0222\\u0223\\x05', '\\x86D\\x02\\u0223W\\x03\\x02\\x02\\x02\\u0224\\u0229\\x05Z.\\x02', '\\u0225\\u0226\\x07:\\x02\\x02\\u0226\\u0228\\x05Z.\\x02\\u0227\\u0225', '\\x03\\x02\\x02\\x02\\u0228\\u022B\\x03\\x02\\x02\\x02\\u0229\\u0227', '\\x03\\x02\\x02\\x02\\u0229\\u022A\\x03\\x02\\x02\\x02\\u022AY', '\\x03\\x02\\x02\\x02\\u022B\\u0229\\x03\\x02\\x02\\x02\\u022C\\u022F', '\\x050\\x19\\x02\\u022D\\u022E\\x07\\x05\\x02\\x02\\u022E\\u0230', '\\x05d3\\x02\\u022F\\u022D\\x03\\x02\\x02\\x02\\u022F\\u0230\\x03', '\\x02\\x02\\x02\\u0230[\\x03\\x02\\x02\\x02\\u0231\\u0232\\x07', '#\\x02\\x02\\u0232\\u0233\\x07\\t\\x02\\x02\\u0233\\u0238\\x05^0\\x02', '\\u0234\\u0235\\x07:\\x02\\x02\\u0235\\u0237\\x05^0\\x02\\u0236\\u0234', '\\x03\\x02\\x02\\x02\\u0237\\u023A\\x03\\x02\\x02\\x02\\u0238\\u0236', '\\x03\\x02\\x02\\x02\\u0238\\u0239\\x03\\x02\\x02\\x02\\u0239]', '\\x03\\x02\\x02\\x02\\u023A\\u0238\\x03\\x02\\x02\\x02\\u023B\\u023D', '\\x050\\x19\\x02\\u023C\\u023E\\x05R*\\x02\\u023D\\u023C\\x03\\x02', '\\x02\\x02\\u023D\\u023E\\x03\\x02\\x02\\x02\\u023E_\\x03\\x02', '\\x02\\x02\\u023F\\u0243\\x07U\\x02\\x02\\u0240\\u0242\\x05b2\\x02', '\\u0241\\u0240\\x03\\x02\\x02\\x02\\u0242\\u0245\\x03\\x02\\x02\\x02', '\\u0243\\u0241\\x03\\x02\\x02\\x02\\u0243\\u0244\\x03\\x02\\x02\\x02', '\\u0244\\u0246\\x03\\x02\\x02\\x02\\u0245\\u0243\\x03\\x02\\x02\\x02', '\\u0246\\u0247\\x07V\\x02\\x02\\u0247a\\x03\\x02\\x02\\x02\\u0248', '\\u0249\\x07W\\x02\\x02\\u0249c\\x03\\x02\\x02\\x02\\u024A\\u024B', '\\t\\n\\x02\\x02\\u024Be\\x03\\x02\\x02\\x02\\u024C\\u024D\\t\\x0B', '\\x02\\x02\\u024Dg\\x03\\x02\\x02\\x02\\u024E\\u025C\\x05j6\\x02', '\\u024F\\u0250\\x05j6\\x02\\u0250\\u0251\\x07B\\x02\\x02\\u0251\\u0256', '\\x05l7\\x02\\u0252\\u0253\\x07:\\x02\\x02\\u0253\\u0255\\x05l7\\x02', '\\u0254\\u0252\\x03\\x02\\x02\\x02\\u0255\\u0258\\x03\\x02\\x02\\x02', '\\u0256\\u0254\\x03\\x02\\x02\\x02\\u0256\\u0257\\x03\\x02\\x02\\x02', '\\u0257\\u0259\\x03\\x02\\x02\\x02\\u0258\\u0256\\x03\\x02\\x02\\x02', '\\u0259\\u025A\\x07C\\x02\\x02\\u025A\\u025C\\x03\\x02\\x02\\x02', '\\u025B\\u024E\\x03\\x02\\x02\\x02\\u025B\\u024F\\x03\\x02\\x02\\x02', '\\u025Ci\\x03\\x02\\x02\\x02\\u025D\\u025E\\x07K\\x02\\x02\\u025E', 'k\\x03\\x02\\x02\\x02\\u025F\\u0263\\x05d3\\x02\\u0260\\u0263\\x07', '0\\x02\\x02\\u0261\\u0263\\x07&\\x02\\x02\\u0262\\u025F\\x03\\x02', '\\x02\\x02\\u0262\\u0260\\x03\\x02\\x02\\x02\\u0262\\u0261\\x03\\x02', '\\x02\\x02\\u0263m\\x03\\x02\\x02\\x02\\u0264\\u0265\\x05d3\\x02', '\\u0265o\\x03\\x02\\x02\\x02\\u0266\\u026B\\x05d3\\x02\\u0267\\u0268', '\\x07>\\x02\\x02\\u0268\\u026A\\x05d3\\x02\\u0269\\u0267\\x03\\x02', '\\x02\\x02\\u026A\\u026D\\x03\\x02\\x02\\x02\\u026B\\u0269\\x03\\x02', '\\x02\\x02\\u026B\\u026C\\x03\\x02\\x02\\x02\\u026Cq\\x03\\x02', '\\x02\\x02\\u026D\\u026B\\x03\\x02\\x02\\x02\\u026E\\u0273\\x05p', '9\\x02\\u026F\\u0270\\x07J\\x02\\x02\\u0270\\u0272\\x05d3\\x02\\u0271', '\\u026F\\x03\\x02\\x02\\x02\\u0272\\u0275\\x03\\x02\\x02\\x02\\u0273', '\\u0271\\x03\\x02\\x02\\x02\\u0273\\u0274\\x03\\x02\\x02\\x02\\u0274', 's\\x03\\x02\\x02\\x02\\u0275\\u0273\\x03\\x02\\x02\\x02\\u0276', '\\u027B\\x05d3\\x02\\u0277\\u0278\\x07J\\x02\\x02\\u0278\\u027A\\x05', 'd3\\x02\\u0279\\u0277\\x03\\x02\\x02\\x02\\u027A\\u027D\\x03\\x02', '\\x02\\x02\\u027B\\u0279\\x03\\x02\\x02\\x02\\u027B\\u027C\\x03\\x02', '\\x02\\x02\\u027Cu\\x03\\x02\\x02\\x02\\u027D\\u027B\\x03\\x02', '\\x02\\x02\\u027E\\u027F\\t\\f\\x02\\x02\\u027Fw\\x03\\x02\\x02\\x02', '\\u0280\\u0281\\x07L\\x02\\x02\\u0281y\\x03\\x02\\x02\\x02\\u0282', '\\u0283\\x07M\\x02\\x02\\u0283{\\x03\\x02\\x02\\x02\\u0284\\u0287', '\\x07$\\x02\\x02\\u0285\\u0287\\x05~@\\x02\\u0286\\u0284\\x03\\x02', '\\x02\\x02\\u0286\\u0285\\x03\\x02\\x02\\x02\\u0287}\\x03\\x02', '\\x02\\x02\\u0288\\u0289\\x05t;\\x02\\u0289\\u028A\\x07J\\x02\\x02', '\\u028A\\u028C\\x03\\x02\\x02\\x02\\u028B\\u0288\\x03\\x02\\x02\\x02', '\\u028B\\u028C\\x03\\x02\\x02\\x02\\u028C\\u028D\\x03\\x02\\x02\\x02', '\\u028D\\u0290\\x07L\\x02\\x02\\u028E\\u0290\\x05v<\\x02\\u028F\\u028B', '\\x03\\x02\\x02\\x02\\u028F\\u028E\\x03\\x02\\x02\\x02\\u0290\\x7F', '\\x03\\x02\\x02\\x02\\u0291\\u0292\\x07K\\x02\\x02\\u0292\\x81', '\\x03\\x02\\x02\\x02\\u0293\\u0294\\x05t;\\x02\\u0294\\u0295\\x07', 'J\\x02\\x02\\u0295\\u0297\\x03\\x02\\x02\\x02\\u0296\\u0293\\x03', '\\x02\\x02\\x02\\u0296\\u0297\\x03\\x02\\x02\\x02\\u0297\\u0298\\x03', '\\x02\\x02\\x02\\u0298\\u0299\\x05f4\\x02\\u0299\\x83\\x03\\x02', '\\x02\\x02\\u029A\\u029B\\x05\\x82B\\x02\\u029B\\u029C\\x07=\\x02', '\\x02\\u029C\\u029D\\x07O\\x02\\x02\\u029D\\x85\\x03\\x02\\x02', '\\x02\\u029E\\u029F\\x05d3\\x02\\u029F\\x87\\x03\\x02\\x02\\x02', '\\u02A0\\u02A1\\t\\r\\x02\\x02\\u02A1\\x89\\x03\\x02\\x02\\x02C\\x94', '\\x99\\x9F\\xA8\\xAB\\xB1\\xC7\\xD3\\xD7\\xDC\\xE7\\xEB\\xEF', '\\xF4\\xFE\\u0105\\u010B\\u0110\\u0116\\u0119\\u012F\\u013F\\u0142\\u0165\\u0182', '\\u0184\\u018E\\u0190\\u0193\\u0199\\u01A0\\u01A3\\u01A7\\u01B1\\u01B6\\u01C1\\u01CB', '\\u01D0\\u01E0\\u01E7\\u01ED\\u01F2\\u01F4\\u01F6\\u01FA\\u01FC\\u0202\\u0209\\u021C', '\\u021F\\u0229\\u022F\\u0238\\u023D\\u0243\\u0256\\u025B\\u0262\\u026B\\u0273\\u027B', '\\u0286\\u028B\\u028F\\u0296'].join(\"\");\n\n\tvar atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);\n\n\tvar decisionsToDFA = atn.decisionToState.map(function (ds, index) {\n\t    return new antlr4.dfa.DFA(ds, index);\n\t});\n\n\tvar sharedContextCache = new antlr4.PredictionContextCache();\n\n\tvar literalNames = [null, \"'and'\", \"'any'\", \"'as'\", \"'asc'\", \"'avg'\", \"'boolean'\", \"'by'\", \"'class'\", \"'newtype'\", \"'count'\", \"'date'\", \"'desc'\", \"'else'\", \"'exists'\", \"'extends'\", \"'false'\", \"'float'\", \"'forall'\", \"'forex'\", \"'from'\", \"'if'\", \"'implies'\", \"'import'\", \"'in'\", \"'instanceof'\", \"'int'\", \"'max'\", \"'min'\", \"'module'\", \"'not'\", \"'none'\", \"'or'\", \"'order'\", \"'predicate'\", \"'rank'\", \"'result'\", \"'select'\", \"'strictcount'\", \"'strictsum'\", \"'strictconcat'\", \"'concat'\", \"'string'\", \"'sum'\", \"'super'\", \"'then'\", \"'this'\", \"'true'\", \"'where'\", \"'<'\", \"'<='\", \"'='\", \"'>'\", \"'>='\", \"'_'\", \"'-'\", \"','\", \"';'\", \"'!='\", \"'/'\", \"'.'\", \"'..'\", \"'('\", \"')'\", \"'['\", \"']'\", \"'{'\", \"'}'\", \"'*'\", \"'%'\", \"'+'\", \"'|'\", \"'::'\", null, null, null, null, null, null, null, null, null, null, \"'/**'\", \"'*/'\"];\n\n\tvar symbolicNames = [null, \"AND\", \"ANY\", \"AS\", \"ASC\", \"AVG\", \"BOOLEAN\", \"BY\", \"CLASS\", \"NEWTYPE\", \"COUNT\", \"DATE\", \"DESC\", \"ELSE\", \"EXISTS\", \"EXTENDS\", \"FALSE\", \"FLOAT\", \"FORALL\", \"FOREX\", \"FROM\", \"IF\", \"IMPLIES\", \"IMPORT\", \"IN\", \"INSTANCEOF\", \"INT\", \"MAX\", \"MIN\", \"MODULE\", \"NOT\", \"NONE\", \"OR\", \"ORDER\", \"PREDICATE\", \"RANK\", \"RESULT\", \"SELECT\", \"STRICTCOUNT\", \"STRICTSUM\", \"STRICTCONCAT\", \"CONCAT\", \"STRING\", \"SUM\", \"SUPER\", \"THEN\", \"THIS\", \"TRUE\", \"WHERE\", \"LT\", \"LE\", \"EQ\", \"GT\", \"GE\", \"UNDERSCORE\", \"MINUS\", \"COMMA\", \"SEMI\", \"NE\", \"SLASH\", \"DOT\", \"RANGE\", \"OPAR\", \"CPAR\", \"OBLOCK\", \"CBLOCK\", \"OBRACE\", \"CBRACE\", \"STAR\", \"MOD\", \"PLUS\", \"BAR\", \"SELECTION\", \"Lowerid\", \"Upperid\", \"Atlowerid\", \"Atupperid\", \"Integer\", \"Float\", \"String\", \"WS\", \"COMMENT\", \"LINE_COMMENT\", \"StartQLDoc\", \"EndQLDoc\", \"CONTENT\"];\n\n\tvar ruleNames = [\"fileModule\", \"module\", \"moduleBody\", \"moduleMember\", \"imprt\", \"moduleAliasBody\", \"predicateAliasBody\", \"typeAliasBody\", \"classlessPredicate\", \"datatype\", \"datatypeBranches\", \"datatypeBranch\", \"branchBody\", \"select\", \"dataclass\", \"classMember\", \"charpred\", \"memberPredicate\", \"field\", \"optbody\", \"empty\", \"body\", \"higherOrderTerm\", \"exprOrTerm\", \"specialId\", \"quantBody\", \"quantifier\", \"callArg\", \"callArgs\", \"qualifiedRhs\", \"primary\", \"aggBody\", \"literal\", \"bool\", \"variable\", \"compop\", \"unop\", \"mulop\", \"addop\", \"closure\", \"direction\", \"varDecls\", \"varDecl\", \"asExprs\", \"asExpr\", \"orderBys\", \"orderBy\", \"qldoc\", \"qldocSegment\", \"simpleId\", \"literalId\", \"annotation\", \"annotName\", \"annotArg\", \"moduleName\", \"qualModuleExpr\", \"importModuleExpr\", \"moduleExpr\", \"typeLiteral\", \"className\", \"dbtype\", \"returnType\", \"typeExpr\", \"predicateName\", \"aritylessPredicateExpr\", \"predicateExpr\", \"varName\", \"aggId\"];\n\n\tfunction QLParser(input) {\n\t    antlr4.Parser.call(this, input);\n\t    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);\n\t    this.ruleNames = ruleNames;\n\t    this.literalNames = literalNames;\n\t    this.symbolicNames = symbolicNames;\n\t    return this;\n\t}\n\n\tQLParser.prototype = Object.create(antlr4.Parser.prototype);\n\tQLParser.prototype.constructor = QLParser;\n\n\tObject.defineProperty(QLParser.prototype, \"atn\", {\n\t    get: function get() {\n\t        return atn;\n\t    }\n\t});\n\n\tQLParser.EOF = antlr4.Token.EOF;\n\tQLParser.AND = 1;\n\tQLParser.ANY = 2;\n\tQLParser.AS = 3;\n\tQLParser.ASC = 4;\n\tQLParser.AVG = 5;\n\tQLParser.BOOLEAN = 6;\n\tQLParser.BY = 7;\n\tQLParser.CLASS = 8;\n\tQLParser.NEWTYPE = 9;\n\tQLParser.COUNT = 10;\n\tQLParser.DATE = 11;\n\tQLParser.DESC = 12;\n\tQLParser.ELSE = 13;\n\tQLParser.EXISTS = 14;\n\tQLParser.EXTENDS = 15;\n\tQLParser.FALSE = 16;\n\tQLParser.FLOAT = 17;\n\tQLParser.FORALL = 18;\n\tQLParser.FOREX = 19;\n\tQLParser.FROM = 20;\n\tQLParser.IF = 21;\n\tQLParser.IMPLIES = 22;\n\tQLParser.IMPORT = 23;\n\tQLParser.IN = 24;\n\tQLParser.INSTANCEOF = 25;\n\tQLParser.INT = 26;\n\tQLParser.MAX = 27;\n\tQLParser.MIN = 28;\n\tQLParser.MODULE = 29;\n\tQLParser.NOT = 30;\n\tQLParser.NONE = 31;\n\tQLParser.OR = 32;\n\tQLParser.ORDER = 33;\n\tQLParser.PREDICATE = 34;\n\tQLParser.RANK = 35;\n\tQLParser.RESULT = 36;\n\tQLParser.SELECT = 37;\n\tQLParser.STRICTCOUNT = 38;\n\tQLParser.STRICTSUM = 39;\n\tQLParser.STRICTCONCAT = 40;\n\tQLParser.CONCAT = 41;\n\tQLParser.STRING = 42;\n\tQLParser.SUM = 43;\n\tQLParser.SUPER = 44;\n\tQLParser.THEN = 45;\n\tQLParser.THIS = 46;\n\tQLParser.TRUE = 47;\n\tQLParser.WHERE = 48;\n\tQLParser.LT = 49;\n\tQLParser.LE = 50;\n\tQLParser.EQ = 51;\n\tQLParser.GT = 52;\n\tQLParser.GE = 53;\n\tQLParser.UNDERSCORE = 54;\n\tQLParser.MINUS = 55;\n\tQLParser.COMMA = 56;\n\tQLParser.SEMI = 57;\n\tQLParser.NE = 58;\n\tQLParser.SLASH = 59;\n\tQLParser.DOT = 60;\n\tQLParser.RANGE = 61;\n\tQLParser.OPAR = 62;\n\tQLParser.CPAR = 63;\n\tQLParser.OBLOCK = 64;\n\tQLParser.CBLOCK = 65;\n\tQLParser.OBRACE = 66;\n\tQLParser.CBRACE = 67;\n\tQLParser.STAR = 68;\n\tQLParser.MOD = 69;\n\tQLParser.PLUS = 70;\n\tQLParser.BAR = 71;\n\tQLParser.SELECTION = 72;\n\tQLParser.Lowerid = 73;\n\tQLParser.Upperid = 74;\n\tQLParser.Atlowerid = 75;\n\tQLParser.Atupperid = 76;\n\tQLParser.Integer = 77;\n\tQLParser.Float = 78;\n\tQLParser.String = 79;\n\tQLParser.WS = 80;\n\tQLParser.COMMENT = 81;\n\tQLParser.LINE_COMMENT = 82;\n\tQLParser.StartQLDoc = 83;\n\tQLParser.EndQLDoc = 84;\n\tQLParser.CONTENT = 85;\n\n\tQLParser.RULE_fileModule = 0;\n\tQLParser.RULE_module = 1;\n\tQLParser.RULE_moduleBody = 2;\n\tQLParser.RULE_moduleMember = 3;\n\tQLParser.RULE_imprt = 4;\n\tQLParser.RULE_moduleAliasBody = 5;\n\tQLParser.RULE_predicateAliasBody = 6;\n\tQLParser.RULE_typeAliasBody = 7;\n\tQLParser.RULE_classlessPredicate = 8;\n\tQLParser.RULE_datatype = 9;\n\tQLParser.RULE_datatypeBranches = 10;\n\tQLParser.RULE_datatypeBranch = 11;\n\tQLParser.RULE_branchBody = 12;\n\tQLParser.RULE_select = 13;\n\tQLParser.RULE_dataclass = 14;\n\tQLParser.RULE_classMember = 15;\n\tQLParser.RULE_charpred = 16;\n\tQLParser.RULE_memberPredicate = 17;\n\tQLParser.RULE_field = 18;\n\tQLParser.RULE_optbody = 19;\n\tQLParser.RULE_empty = 20;\n\tQLParser.RULE_body = 21;\n\tQLParser.RULE_higherOrderTerm = 22;\n\tQLParser.RULE_exprOrTerm = 23;\n\tQLParser.RULE_specialId = 24;\n\tQLParser.RULE_quantBody = 25;\n\tQLParser.RULE_quantifier = 26;\n\tQLParser.RULE_callArg = 27;\n\tQLParser.RULE_callArgs = 28;\n\tQLParser.RULE_qualifiedRhs = 29;\n\tQLParser.RULE_primary = 30;\n\tQLParser.RULE_aggBody = 31;\n\tQLParser.RULE_literal = 32;\n\tQLParser.RULE_bool = 33;\n\tQLParser.RULE_variable = 34;\n\tQLParser.RULE_compop = 35;\n\tQLParser.RULE_unop = 36;\n\tQLParser.RULE_mulop = 37;\n\tQLParser.RULE_addop = 38;\n\tQLParser.RULE_closure = 39;\n\tQLParser.RULE_direction = 40;\n\tQLParser.RULE_varDecls = 41;\n\tQLParser.RULE_varDecl = 42;\n\tQLParser.RULE_asExprs = 43;\n\tQLParser.RULE_asExpr = 44;\n\tQLParser.RULE_orderBys = 45;\n\tQLParser.RULE_orderBy = 46;\n\tQLParser.RULE_qldoc = 47;\n\tQLParser.RULE_qldocSegment = 48;\n\tQLParser.RULE_simpleId = 49;\n\tQLParser.RULE_literalId = 50;\n\tQLParser.RULE_annotation = 51;\n\tQLParser.RULE_annotName = 52;\n\tQLParser.RULE_annotArg = 53;\n\tQLParser.RULE_moduleName = 54;\n\tQLParser.RULE_qualModuleExpr = 55;\n\tQLParser.RULE_importModuleExpr = 56;\n\tQLParser.RULE_moduleExpr = 57;\n\tQLParser.RULE_typeLiteral = 58;\n\tQLParser.RULE_className = 59;\n\tQLParser.RULE_dbtype = 60;\n\tQLParser.RULE_returnType = 61;\n\tQLParser.RULE_typeExpr = 62;\n\tQLParser.RULE_predicateName = 63;\n\tQLParser.RULE_aritylessPredicateExpr = 64;\n\tQLParser.RULE_predicateExpr = 65;\n\tQLParser.RULE_varName = 66;\n\tQLParser.RULE_aggId = 67;\n\n\tfunction FileModuleContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_fileModule;\n\t    return this;\n\t}\n\n\tFileModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tFileModuleContext.prototype.constructor = FileModuleContext;\n\n\tFileModuleContext.prototype.moduleBody = function () {\n\t    return this.getTypedRuleContext(ModuleBodyContext, 0);\n\t};\n\n\tFileModuleContext.prototype.EOF = function () {\n\t    return this.getToken(QLParser.EOF, 0);\n\t};\n\n\tFileModuleContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitFileModule(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.FileModuleContext = FileModuleContext;\n\n\tQLParser.prototype.fileModule = function () {\n\n\t    var localctx = new FileModuleContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 0, QLParser.RULE_fileModule);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 136;\n\t        this.moduleBody();\n\t        this.state = 137;\n\t        this.match(QLParser.EOF);\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction ModuleContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_module;\n\t    return this;\n\t}\n\n\tModuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tModuleContext.prototype.constructor = ModuleContext;\n\n\tModuleContext.prototype.MODULE = function () {\n\t    return this.getToken(QLParser.MODULE, 0);\n\t};\n\n\tModuleContext.prototype.moduleName = function () {\n\t    return this.getTypedRuleContext(ModuleNameContext, 0);\n\t};\n\n\tModuleContext.prototype.OBRACE = function () {\n\t    return this.getToken(QLParser.OBRACE, 0);\n\t};\n\n\tModuleContext.prototype.moduleBody = function () {\n\t    return this.getTypedRuleContext(ModuleBodyContext, 0);\n\t};\n\n\tModuleContext.prototype.CBRACE = function () {\n\t    return this.getToken(QLParser.CBRACE, 0);\n\t};\n\n\tModuleContext.prototype.moduleAliasBody = function () {\n\t    return this.getTypedRuleContext(ModuleAliasBodyContext, 0);\n\t};\n\n\tModuleContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitModule(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.ModuleContext = ModuleContext;\n\n\tQLParser.prototype.module = function () {\n\n\t    var localctx = new ModuleContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 2, QLParser.RULE_module);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 139;\n\t        this.match(QLParser.MODULE);\n\t        this.state = 140;\n\t        this.moduleName();\n\t        this.state = 146;\n\t        this._errHandler.sync(this);\n\t        switch (this._input.LA(1)) {\n\t            case QLParser.OBRACE:\n\t                this.state = 141;\n\t                this.match(QLParser.OBRACE);\n\t                this.state = 142;\n\t                this.moduleBody();\n\t                this.state = 143;\n\t                this.match(QLParser.CBRACE);\n\t                break;\n\t            case QLParser.EQ:\n\t                this.state = 145;\n\t                this.moduleAliasBody();\n\t                break;\n\t            default:\n\t                throw new antlr4.error.NoViableAltException(this);\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction ModuleBodyContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_moduleBody;\n\t    return this;\n\t}\n\n\tModuleBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tModuleBodyContext.prototype.constructor = ModuleBodyContext;\n\n\tModuleBodyContext.prototype.moduleMember = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(ModuleMemberContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ModuleMemberContext, i);\n\t    }\n\t};\n\n\tModuleBodyContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitModuleBody(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.ModuleBodyContext = ModuleBodyContext;\n\n\tQLParser.prototype.moduleBody = function () {\n\n\t    var localctx = new ModuleBodyContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 4, QLParser.RULE_moduleBody);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 151;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        while ((_la & ~0x1f) == 0 && (1 << _la & (1 << QLParser.BOOLEAN | 1 << QLParser.CLASS | 1 << QLParser.NEWTYPE | 1 << QLParser.DATE | 1 << QLParser.FLOAT | 1 << QLParser.FROM | 1 << QLParser.IMPORT | 1 << QLParser.INT | 1 << QLParser.MODULE)) !== 0 || (_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << QLParser.PREDICATE - 34 | 1 << QLParser.SELECT - 34 | 1 << QLParser.STRING - 34 | 1 << QLParser.WHERE - 34)) !== 0 || (_la - 73 & ~0x1f) == 0 && (1 << _la - 73 & (1 << QLParser.Lowerid - 73 | 1 << QLParser.Upperid - 73 | 1 << QLParser.Atlowerid - 73 | 1 << QLParser.StartQLDoc - 73)) !== 0) {\n\t            this.state = 148;\n\t            this.moduleMember();\n\t            this.state = 153;\n\t            this._errHandler.sync(this);\n\t            _la = this._input.LA(1);\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction ModuleMemberContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_moduleMember;\n\t    return this;\n\t}\n\n\tModuleMemberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tModuleMemberContext.prototype.constructor = ModuleMemberContext;\n\n\tModuleMemberContext.prototype.imprt = function () {\n\t    return this.getTypedRuleContext(ImprtContext, 0);\n\t};\n\n\tModuleMemberContext.prototype.classlessPredicate = function () {\n\t    return this.getTypedRuleContext(ClasslessPredicateContext, 0);\n\t};\n\n\tModuleMemberContext.prototype.dataclass = function () {\n\t    return this.getTypedRuleContext(DataclassContext, 0);\n\t};\n\n\tModuleMemberContext.prototype.datatype = function () {\n\t    return this.getTypedRuleContext(DatatypeContext, 0);\n\t};\n\n\tModuleMemberContext.prototype.select = function () {\n\t    return this.getTypedRuleContext(SelectContext, 0);\n\t};\n\n\tModuleMemberContext.prototype.module = function () {\n\t    return this.getTypedRuleContext(ModuleContext, 0);\n\t};\n\n\tModuleMemberContext.prototype.annotation = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(AnnotationContext);\n\t    } else {\n\t        return this.getTypedRuleContext(AnnotationContext, i);\n\t    }\n\t};\n\n\tModuleMemberContext.prototype.qldoc = function () {\n\t    return this.getTypedRuleContext(QldocContext, 0);\n\t};\n\n\tModuleMemberContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitModuleMember(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.ModuleMemberContext = ModuleMemberContext;\n\n\tQLParser.prototype.moduleMember = function () {\n\n\t    var localctx = new ModuleMemberContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 6, QLParser.RULE_moduleMember);\n\t    try {\n\t        this.state = 169;\n\t        this._errHandler.sync(this);\n\t        switch (this._input.LA(1)) {\n\t            case QLParser.BOOLEAN:\n\t            case QLParser.CLASS:\n\t            case QLParser.NEWTYPE:\n\t            case QLParser.DATE:\n\t            case QLParser.FLOAT:\n\t            case QLParser.FROM:\n\t            case QLParser.IMPORT:\n\t            case QLParser.INT:\n\t            case QLParser.MODULE:\n\t            case QLParser.PREDICATE:\n\t            case QLParser.SELECT:\n\t            case QLParser.STRING:\n\t            case QLParser.WHERE:\n\t            case QLParser.Lowerid:\n\t            case QLParser.Upperid:\n\t            case QLParser.Atlowerid:\n\t                this.enterOuterAlt(localctx, 1);\n\t                this.state = 157;\n\t                this._errHandler.sync(this);\n\t                var _alt = this._interp.adaptivePredict(this._input, 2, this._ctx);\n\t                while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {\n\t                    if (_alt === 1) {\n\t                        this.state = 154;\n\t                        this.annotation();\n\t                    }\n\t                    this.state = 159;\n\t                    this._errHandler.sync(this);\n\t                    _alt = this._interp.adaptivePredict(this._input, 2, this._ctx);\n\t                }\n\n\t                this.state = 166;\n\t                this._errHandler.sync(this);\n\t                switch (this._input.LA(1)) {\n\t                    case QLParser.IMPORT:\n\t                        this.state = 160;\n\t                        this.imprt();\n\t                        break;\n\t                    case QLParser.BOOLEAN:\n\t                    case QLParser.DATE:\n\t                    case QLParser.FLOAT:\n\t                    case QLParser.INT:\n\t                    case QLParser.PREDICATE:\n\t                    case QLParser.STRING:\n\t                    case QLParser.Lowerid:\n\t                    case QLParser.Upperid:\n\t                    case QLParser.Atlowerid:\n\t                        this.state = 161;\n\t                        this.classlessPredicate();\n\t                        break;\n\t                    case QLParser.CLASS:\n\t                        this.state = 162;\n\t                        this.dataclass();\n\t                        break;\n\t                    case QLParser.NEWTYPE:\n\t                        this.state = 163;\n\t                        this.datatype();\n\t                        break;\n\t                    case QLParser.FROM:\n\t                    case QLParser.SELECT:\n\t                    case QLParser.WHERE:\n\t                        this.state = 164;\n\t                        this.select();\n\t                        break;\n\t                    case QLParser.MODULE:\n\t                        this.state = 165;\n\t                        this.module();\n\t                        break;\n\t                    default:\n\t                        throw new antlr4.error.NoViableAltException(this);\n\t                }\n\t                break;\n\t            case QLParser.StartQLDoc:\n\t                this.enterOuterAlt(localctx, 2);\n\t                this.state = 168;\n\t                this.qldoc();\n\t                break;\n\t            default:\n\t                throw new antlr4.error.NoViableAltException(this);\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction ImprtContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_imprt;\n\t    return this;\n\t}\n\n\tImprtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tImprtContext.prototype.constructor = ImprtContext;\n\n\tImprtContext.prototype.IMPORT = function () {\n\t    return this.getToken(QLParser.IMPORT, 0);\n\t};\n\n\tImprtContext.prototype.importModuleExpr = function () {\n\t    return this.getTypedRuleContext(ImportModuleExprContext, 0);\n\t};\n\n\tImprtContext.prototype.AS = function () {\n\t    return this.getToken(QLParser.AS, 0);\n\t};\n\n\tImprtContext.prototype.moduleName = function () {\n\t    return this.getTypedRuleContext(ModuleNameContext, 0);\n\t};\n\n\tImprtContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitImprt(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.ImprtContext = ImprtContext;\n\n\tQLParser.prototype.imprt = function () {\n\n\t    var localctx = new ImprtContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 8, QLParser.RULE_imprt);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 171;\n\t        this.match(QLParser.IMPORT);\n\t        this.state = 172;\n\t        this.importModuleExpr();\n\t        this.state = 175;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if (_la === QLParser.AS) {\n\t            this.state = 173;\n\t            this.match(QLParser.AS);\n\t            this.state = 174;\n\t            this.moduleName();\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction ModuleAliasBodyContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_moduleAliasBody;\n\t    return this;\n\t}\n\n\tModuleAliasBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tModuleAliasBodyContext.prototype.constructor = ModuleAliasBodyContext;\n\n\tModuleAliasBodyContext.prototype.EQ = function () {\n\t    return this.getToken(QLParser.EQ, 0);\n\t};\n\n\tModuleAliasBodyContext.prototype.moduleExpr = function () {\n\t    return this.getTypedRuleContext(ModuleExprContext, 0);\n\t};\n\n\tModuleAliasBodyContext.prototype.SEMI = function () {\n\t    return this.getToken(QLParser.SEMI, 0);\n\t};\n\n\tModuleAliasBodyContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitModuleAliasBody(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.ModuleAliasBodyContext = ModuleAliasBodyContext;\n\n\tQLParser.prototype.moduleAliasBody = function () {\n\n\t    var localctx = new ModuleAliasBodyContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 10, QLParser.RULE_moduleAliasBody);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 177;\n\t        this.match(QLParser.EQ);\n\t        this.state = 178;\n\t        this.moduleExpr();\n\t        this.state = 179;\n\t        this.match(QLParser.SEMI);\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction PredicateAliasBodyContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_predicateAliasBody;\n\t    return this;\n\t}\n\n\tPredicateAliasBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tPredicateAliasBodyContext.prototype.constructor = PredicateAliasBodyContext;\n\n\tPredicateAliasBodyContext.prototype.EQ = function () {\n\t    return this.getToken(QLParser.EQ, 0);\n\t};\n\n\tPredicateAliasBodyContext.prototype.predicateExpr = function () {\n\t    return this.getTypedRuleContext(PredicateExprContext, 0);\n\t};\n\n\tPredicateAliasBodyContext.prototype.SEMI = function () {\n\t    return this.getToken(QLParser.SEMI, 0);\n\t};\n\n\tPredicateAliasBodyContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitPredicateAliasBody(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.PredicateAliasBodyContext = PredicateAliasBodyContext;\n\n\tQLParser.prototype.predicateAliasBody = function () {\n\n\t    var localctx = new PredicateAliasBodyContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 12, QLParser.RULE_predicateAliasBody);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 181;\n\t        this.match(QLParser.EQ);\n\t        this.state = 182;\n\t        this.predicateExpr();\n\t        this.state = 183;\n\t        this.match(QLParser.SEMI);\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction TypeAliasBodyContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_typeAliasBody;\n\t    return this;\n\t}\n\n\tTypeAliasBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tTypeAliasBodyContext.prototype.constructor = TypeAliasBodyContext;\n\n\tTypeAliasBodyContext.prototype.EQ = function () {\n\t    return this.getToken(QLParser.EQ, 0);\n\t};\n\n\tTypeAliasBodyContext.prototype.typeExpr = function () {\n\t    return this.getTypedRuleContext(TypeExprContext, 0);\n\t};\n\n\tTypeAliasBodyContext.prototype.SEMI = function () {\n\t    return this.getToken(QLParser.SEMI, 0);\n\t};\n\n\tTypeAliasBodyContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitTypeAliasBody(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.TypeAliasBodyContext = TypeAliasBodyContext;\n\n\tQLParser.prototype.typeAliasBody = function () {\n\n\t    var localctx = new TypeAliasBodyContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 14, QLParser.RULE_typeAliasBody);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 185;\n\t        this.match(QLParser.EQ);\n\t        this.state = 186;\n\t        this.typeExpr();\n\t        this.state = 187;\n\t        this.match(QLParser.SEMI);\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction ClasslessPredicateContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_classlessPredicate;\n\t    return this;\n\t}\n\n\tClasslessPredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tClasslessPredicateContext.prototype.constructor = ClasslessPredicateContext;\n\n\tClasslessPredicateContext.prototype.returnType = function () {\n\t    return this.getTypedRuleContext(ReturnTypeContext, 0);\n\t};\n\n\tClasslessPredicateContext.prototype.predicateName = function () {\n\t    return this.getTypedRuleContext(PredicateNameContext, 0);\n\t};\n\n\tClasslessPredicateContext.prototype.OPAR = function () {\n\t    return this.getToken(QLParser.OPAR, 0);\n\t};\n\n\tClasslessPredicateContext.prototype.varDecls = function () {\n\t    return this.getTypedRuleContext(VarDeclsContext, 0);\n\t};\n\n\tClasslessPredicateContext.prototype.CPAR = function () {\n\t    return this.getToken(QLParser.CPAR, 0);\n\t};\n\n\tClasslessPredicateContext.prototype.optbody = function () {\n\t    return this.getTypedRuleContext(OptbodyContext, 0);\n\t};\n\n\tClasslessPredicateContext.prototype.predicateAliasBody = function () {\n\t    return this.getTypedRuleContext(PredicateAliasBodyContext, 0);\n\t};\n\n\tClasslessPredicateContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitClasslessPredicate(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.ClasslessPredicateContext = ClasslessPredicateContext;\n\n\tQLParser.prototype.classlessPredicate = function () {\n\n\t    var localctx = new ClasslessPredicateContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 16, QLParser.RULE_classlessPredicate);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 189;\n\t        this.returnType();\n\t        this.state = 190;\n\t        this.predicateName();\n\t        this.state = 197;\n\t        this._errHandler.sync(this);\n\t        switch (this._input.LA(1)) {\n\t            case QLParser.OPAR:\n\t                this.state = 191;\n\t                this.match(QLParser.OPAR);\n\t                this.state = 192;\n\t                this.varDecls();\n\t                this.state = 193;\n\t                this.match(QLParser.CPAR);\n\t                this.state = 194;\n\t                this.optbody();\n\t                break;\n\t            case QLParser.EQ:\n\t                this.state = 196;\n\t                this.predicateAliasBody();\n\t                break;\n\t            default:\n\t                throw new antlr4.error.NoViableAltException(this);\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction DatatypeContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_datatype;\n\t    return this;\n\t}\n\n\tDatatypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tDatatypeContext.prototype.constructor = DatatypeContext;\n\n\tDatatypeContext.prototype.NEWTYPE = function () {\n\t    return this.getToken(QLParser.NEWTYPE, 0);\n\t};\n\n\tDatatypeContext.prototype.className = function () {\n\t    return this.getTypedRuleContext(ClassNameContext, 0);\n\t};\n\n\tDatatypeContext.prototype.EQ = function () {\n\t    return this.getToken(QLParser.EQ, 0);\n\t};\n\n\tDatatypeContext.prototype.datatypeBranches = function () {\n\t    return this.getTypedRuleContext(DatatypeBranchesContext, 0);\n\t};\n\n\tDatatypeContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitDatatype(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.DatatypeContext = DatatypeContext;\n\n\tQLParser.prototype.datatype = function () {\n\n\t    var localctx = new DatatypeContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 18, QLParser.RULE_datatype);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 199;\n\t        this.match(QLParser.NEWTYPE);\n\t        this.state = 200;\n\t        this.className();\n\t        this.state = 201;\n\t        this.match(QLParser.EQ);\n\t        this.state = 202;\n\t        this.datatypeBranches();\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction DatatypeBranchesContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_datatypeBranches;\n\t    return this;\n\t}\n\n\tDatatypeBranchesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tDatatypeBranchesContext.prototype.constructor = DatatypeBranchesContext;\n\n\tDatatypeBranchesContext.prototype.datatypeBranch = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(DatatypeBranchContext);\n\t    } else {\n\t        return this.getTypedRuleContext(DatatypeBranchContext, i);\n\t    }\n\t};\n\n\tDatatypeBranchesContext.prototype.OR = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTokens(QLParser.OR);\n\t    } else {\n\t        return this.getToken(QLParser.OR, i);\n\t    }\n\t};\n\n\tDatatypeBranchesContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitDatatypeBranches(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.DatatypeBranchesContext = DatatypeBranchesContext;\n\n\tQLParser.prototype.datatypeBranches = function () {\n\n\t    var localctx = new DatatypeBranchesContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 20, QLParser.RULE_datatypeBranches);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 204;\n\t        this.datatypeBranch();\n\t        this.state = 209;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        while (_la === QLParser.OR) {\n\t            this.state = 205;\n\t            this.match(QLParser.OR);\n\t            this.state = 206;\n\t            this.datatypeBranch();\n\t            this.state = 211;\n\t            this._errHandler.sync(this);\n\t            _la = this._input.LA(1);\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction DatatypeBranchContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_datatypeBranch;\n\t    return this;\n\t}\n\n\tDatatypeBranchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tDatatypeBranchContext.prototype.constructor = DatatypeBranchContext;\n\n\tDatatypeBranchContext.prototype.className = function () {\n\t    return this.getTypedRuleContext(ClassNameContext, 0);\n\t};\n\n\tDatatypeBranchContext.prototype.OPAR = function () {\n\t    return this.getToken(QLParser.OPAR, 0);\n\t};\n\n\tDatatypeBranchContext.prototype.varDecls = function () {\n\t    return this.getTypedRuleContext(VarDeclsContext, 0);\n\t};\n\n\tDatatypeBranchContext.prototype.CPAR = function () {\n\t    return this.getToken(QLParser.CPAR, 0);\n\t};\n\n\tDatatypeBranchContext.prototype.branchBody = function () {\n\t    return this.getTypedRuleContext(BranchBodyContext, 0);\n\t};\n\n\tDatatypeBranchContext.prototype.qldoc = function () {\n\t    return this.getTypedRuleContext(QldocContext, 0);\n\t};\n\n\tDatatypeBranchContext.prototype.annotation = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(AnnotationContext);\n\t    } else {\n\t        return this.getTypedRuleContext(AnnotationContext, i);\n\t    }\n\t};\n\n\tDatatypeBranchContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitDatatypeBranch(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.DatatypeBranchContext = DatatypeBranchContext;\n\n\tQLParser.prototype.datatypeBranch = function () {\n\n\t    var localctx = new DatatypeBranchContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 22, QLParser.RULE_datatypeBranch);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 213;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if (_la === QLParser.StartQLDoc) {\n\t            this.state = 212;\n\t            this.qldoc();\n\t        }\n\n\t        this.state = 218;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        while (_la === QLParser.Lowerid) {\n\t            this.state = 215;\n\t            this.annotation();\n\t            this.state = 220;\n\t            this._errHandler.sync(this);\n\t            _la = this._input.LA(1);\n\t        }\n\t        this.state = 221;\n\t        this.className();\n\t        this.state = 222;\n\t        this.match(QLParser.OPAR);\n\t        this.state = 223;\n\t        this.varDecls();\n\t        this.state = 224;\n\t        this.match(QLParser.CPAR);\n\t        this.state = 225;\n\t        this.branchBody();\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction BranchBodyContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_branchBody;\n\t    return this;\n\t}\n\n\tBranchBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tBranchBodyContext.prototype.constructor = BranchBodyContext;\n\n\tBranchBodyContext.prototype.body = function () {\n\t    return this.getTypedRuleContext(BodyContext, 0);\n\t};\n\n\tBranchBodyContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitBranchBody(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.BranchBodyContext = BranchBodyContext;\n\n\tQLParser.prototype.branchBody = function () {\n\n\t    var localctx = new BranchBodyContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 24, QLParser.RULE_branchBody);\n\t    try {\n\t        this.state = 229;\n\t        this._errHandler.sync(this);\n\t        switch (this._input.LA(1)) {\n\t            case QLParser.EOF:\n\t            case QLParser.BOOLEAN:\n\t            case QLParser.CLASS:\n\t            case QLParser.NEWTYPE:\n\t            case QLParser.DATE:\n\t            case QLParser.FLOAT:\n\t            case QLParser.FROM:\n\t            case QLParser.IMPORT:\n\t            case QLParser.INT:\n\t            case QLParser.MODULE:\n\t            case QLParser.OR:\n\t            case QLParser.PREDICATE:\n\t            case QLParser.SELECT:\n\t            case QLParser.STRING:\n\t            case QLParser.WHERE:\n\t            case QLParser.CBRACE:\n\t            case QLParser.Lowerid:\n\t            case QLParser.Upperid:\n\t            case QLParser.Atlowerid:\n\t            case QLParser.StartQLDoc:\n\t                this.enterOuterAlt(localctx, 1);\n\n\t                break;\n\t            case QLParser.OBRACE:\n\t                this.enterOuterAlt(localctx, 2);\n\t                this.state = 228;\n\t                this.body();\n\t                break;\n\t            default:\n\t                throw new antlr4.error.NoViableAltException(this);\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction SelectContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_select;\n\t    return this;\n\t}\n\n\tSelectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tSelectContext.prototype.constructor = SelectContext;\n\n\tSelectContext.prototype.SELECT = function () {\n\t    return this.getToken(QLParser.SELECT, 0);\n\t};\n\n\tSelectContext.prototype.asExprs = function () {\n\t    return this.getTypedRuleContext(AsExprsContext, 0);\n\t};\n\n\tSelectContext.prototype.FROM = function () {\n\t    return this.getToken(QLParser.FROM, 0);\n\t};\n\n\tSelectContext.prototype.varDecls = function () {\n\t    return this.getTypedRuleContext(VarDeclsContext, 0);\n\t};\n\n\tSelectContext.prototype.WHERE = function () {\n\t    return this.getToken(QLParser.WHERE, 0);\n\t};\n\n\tSelectContext.prototype.exprOrTerm = function () {\n\t    return this.getTypedRuleContext(ExprOrTermContext, 0);\n\t};\n\n\tSelectContext.prototype.orderBys = function () {\n\t    return this.getTypedRuleContext(OrderBysContext, 0);\n\t};\n\n\tSelectContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitSelect(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.SelectContext = SelectContext;\n\n\tQLParser.prototype.select = function () {\n\n\t    var localctx = new SelectContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 26, QLParser.RULE_select);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 233;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if (_la === QLParser.FROM) {\n\t            this.state = 231;\n\t            this.match(QLParser.FROM);\n\t            this.state = 232;\n\t            this.varDecls();\n\t        }\n\n\t        this.state = 237;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if (_la === QLParser.WHERE) {\n\t            this.state = 235;\n\t            this.match(QLParser.WHERE);\n\t            this.state = 236;\n\t            this.exprOrTerm(0);\n\t        }\n\n\t        this.state = 239;\n\t        this.match(QLParser.SELECT);\n\t        this.state = 240;\n\t        this.asExprs();\n\t        this.state = 242;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if (_la === QLParser.ORDER) {\n\t            this.state = 241;\n\t            this.orderBys();\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction DataclassContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_dataclass;\n\t    return this;\n\t}\n\n\tDataclassContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tDataclassContext.prototype.constructor = DataclassContext;\n\n\tDataclassContext.prototype.CLASS = function () {\n\t    return this.getToken(QLParser.CLASS, 0);\n\t};\n\n\tDataclassContext.prototype.className = function () {\n\t    return this.getTypedRuleContext(ClassNameContext, 0);\n\t};\n\n\tDataclassContext.prototype.EXTENDS = function () {\n\t    return this.getToken(QLParser.EXTENDS, 0);\n\t};\n\n\tDataclassContext.prototype.typeExpr = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(TypeExprContext);\n\t    } else {\n\t        return this.getTypedRuleContext(TypeExprContext, i);\n\t    }\n\t};\n\n\tDataclassContext.prototype.OBRACE = function () {\n\t    return this.getToken(QLParser.OBRACE, 0);\n\t};\n\n\tDataclassContext.prototype.CBRACE = function () {\n\t    return this.getToken(QLParser.CBRACE, 0);\n\t};\n\n\tDataclassContext.prototype.typeAliasBody = function () {\n\t    return this.getTypedRuleContext(TypeAliasBodyContext, 0);\n\t};\n\n\tDataclassContext.prototype.COMMA = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTokens(QLParser.COMMA);\n\t    } else {\n\t        return this.getToken(QLParser.COMMA, i);\n\t    }\n\t};\n\n\tDataclassContext.prototype.classMember = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(ClassMemberContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ClassMemberContext, i);\n\t    }\n\t};\n\n\tDataclassContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitDataclass(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.DataclassContext = DataclassContext;\n\n\tQLParser.prototype.dataclass = function () {\n\n\t    var localctx = new DataclassContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 28, QLParser.RULE_dataclass);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 244;\n\t        this.match(QLParser.CLASS);\n\t        this.state = 245;\n\t        this.className();\n\t        this.state = 265;\n\t        this._errHandler.sync(this);\n\t        switch (this._input.LA(1)) {\n\t            case QLParser.EXTENDS:\n\t                this.state = 246;\n\t                this.match(QLParser.EXTENDS);\n\t                this.state = 247;\n\t                this.typeExpr();\n\t                this.state = 252;\n\t                this._errHandler.sync(this);\n\t                _la = this._input.LA(1);\n\t                while (_la === QLParser.COMMA) {\n\t                    this.state = 248;\n\t                    this.match(QLParser.COMMA);\n\t                    this.state = 249;\n\t                    this.typeExpr();\n\t                    this.state = 254;\n\t                    this._errHandler.sync(this);\n\t                    _la = this._input.LA(1);\n\t                }\n\t                this.state = 255;\n\t                this.match(QLParser.OBRACE);\n\t                this.state = 259;\n\t                this._errHandler.sync(this);\n\t                _la = this._input.LA(1);\n\t                while ((_la & ~0x1f) == 0 && (1 << _la & (1 << QLParser.BOOLEAN | 1 << QLParser.DATE | 1 << QLParser.FLOAT | 1 << QLParser.INT)) !== 0 || _la === QLParser.PREDICATE || _la === QLParser.STRING || (_la - 73 & ~0x1f) == 0 && (1 << _la - 73 & (1 << QLParser.Lowerid - 73 | 1 << QLParser.Upperid - 73 | 1 << QLParser.Atlowerid - 73 | 1 << QLParser.StartQLDoc - 73)) !== 0) {\n\t                    this.state = 256;\n\t                    this.classMember();\n\t                    this.state = 261;\n\t                    this._errHandler.sync(this);\n\t                    _la = this._input.LA(1);\n\t                }\n\t                this.state = 262;\n\t                this.match(QLParser.CBRACE);\n\t                break;\n\t            case QLParser.EQ:\n\t                this.state = 264;\n\t                this.typeAliasBody();\n\t                break;\n\t            default:\n\t                throw new antlr4.error.NoViableAltException(this);\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction ClassMemberContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_classMember;\n\t    return this;\n\t}\n\n\tClassMemberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tClassMemberContext.prototype.constructor = ClassMemberContext;\n\n\tClassMemberContext.prototype.charpred = function () {\n\t    return this.getTypedRuleContext(CharpredContext, 0);\n\t};\n\n\tClassMemberContext.prototype.memberPredicate = function () {\n\t    return this.getTypedRuleContext(MemberPredicateContext, 0);\n\t};\n\n\tClassMemberContext.prototype.field = function () {\n\t    return this.getTypedRuleContext(FieldContext, 0);\n\t};\n\n\tClassMemberContext.prototype.annotation = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(AnnotationContext);\n\t    } else {\n\t        return this.getTypedRuleContext(AnnotationContext, i);\n\t    }\n\t};\n\n\tClassMemberContext.prototype.qldoc = function () {\n\t    return this.getTypedRuleContext(QldocContext, 0);\n\t};\n\n\tClassMemberContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitClassMember(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.ClassMemberContext = ClassMemberContext;\n\n\tQLParser.prototype.classMember = function () {\n\n\t    var localctx = new ClassMemberContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 30, QLParser.RULE_classMember);\n\t    try {\n\t        this.state = 279;\n\t        this._errHandler.sync(this);\n\t        switch (this._input.LA(1)) {\n\t            case QLParser.BOOLEAN:\n\t            case QLParser.DATE:\n\t            case QLParser.FLOAT:\n\t            case QLParser.INT:\n\t            case QLParser.PREDICATE:\n\t            case QLParser.STRING:\n\t            case QLParser.Lowerid:\n\t            case QLParser.Upperid:\n\t            case QLParser.Atlowerid:\n\t                this.enterOuterAlt(localctx, 1);\n\t                this.state = 270;\n\t                this._errHandler.sync(this);\n\t                var _alt = this._interp.adaptivePredict(this._input, 17, this._ctx);\n\t                while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {\n\t                    if (_alt === 1) {\n\t                        this.state = 267;\n\t                        this.annotation();\n\t                    }\n\t                    this.state = 272;\n\t                    this._errHandler.sync(this);\n\t                    _alt = this._interp.adaptivePredict(this._input, 17, this._ctx);\n\t                }\n\n\t                this.state = 276;\n\t                this._errHandler.sync(this);\n\t                var la_ = this._interp.adaptivePredict(this._input, 18, this._ctx);\n\t                switch (la_) {\n\t                    case 1:\n\t                        this.state = 273;\n\t                        this.charpred();\n\t                        break;\n\n\t                    case 2:\n\t                        this.state = 274;\n\t                        this.memberPredicate();\n\t                        break;\n\n\t                    case 3:\n\t                        this.state = 275;\n\t                        this.field();\n\t                        break;\n\n\t                }\n\t                break;\n\t            case QLParser.StartQLDoc:\n\t                this.enterOuterAlt(localctx, 2);\n\t                this.state = 278;\n\t                this.qldoc();\n\t                break;\n\t            default:\n\t                throw new antlr4.error.NoViableAltException(this);\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction CharpredContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_charpred;\n\t    return this;\n\t}\n\n\tCharpredContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tCharpredContext.prototype.constructor = CharpredContext;\n\n\tCharpredContext.prototype.className = function () {\n\t    return this.getTypedRuleContext(ClassNameContext, 0);\n\t};\n\n\tCharpredContext.prototype.OPAR = function () {\n\t    return this.getToken(QLParser.OPAR, 0);\n\t};\n\n\tCharpredContext.prototype.CPAR = function () {\n\t    return this.getToken(QLParser.CPAR, 0);\n\t};\n\n\tCharpredContext.prototype.OBRACE = function () {\n\t    return this.getToken(QLParser.OBRACE, 0);\n\t};\n\n\tCharpredContext.prototype.exprOrTerm = function () {\n\t    return this.getTypedRuleContext(ExprOrTermContext, 0);\n\t};\n\n\tCharpredContext.prototype.CBRACE = function () {\n\t    return this.getToken(QLParser.CBRACE, 0);\n\t};\n\n\tCharpredContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitCharpred(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.CharpredContext = CharpredContext;\n\n\tQLParser.prototype.charpred = function () {\n\n\t    var localctx = new CharpredContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 32, QLParser.RULE_charpred);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 281;\n\t        this.className();\n\t        this.state = 282;\n\t        this.match(QLParser.OPAR);\n\t        this.state = 283;\n\t        this.match(QLParser.CPAR);\n\t        this.state = 284;\n\t        this.match(QLParser.OBRACE);\n\t        this.state = 285;\n\t        this.exprOrTerm(0);\n\t        this.state = 286;\n\t        this.match(QLParser.CBRACE);\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction MemberPredicateContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_memberPredicate;\n\t    return this;\n\t}\n\n\tMemberPredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tMemberPredicateContext.prototype.constructor = MemberPredicateContext;\n\n\tMemberPredicateContext.prototype.returnType = function () {\n\t    return this.getTypedRuleContext(ReturnTypeContext, 0);\n\t};\n\n\tMemberPredicateContext.prototype.predicateName = function () {\n\t    return this.getTypedRuleContext(PredicateNameContext, 0);\n\t};\n\n\tMemberPredicateContext.prototype.OPAR = function () {\n\t    return this.getToken(QLParser.OPAR, 0);\n\t};\n\n\tMemberPredicateContext.prototype.varDecls = function () {\n\t    return this.getTypedRuleContext(VarDeclsContext, 0);\n\t};\n\n\tMemberPredicateContext.prototype.CPAR = function () {\n\t    return this.getToken(QLParser.CPAR, 0);\n\t};\n\n\tMemberPredicateContext.prototype.optbody = function () {\n\t    return this.getTypedRuleContext(OptbodyContext, 0);\n\t};\n\n\tMemberPredicateContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitMemberPredicate(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.MemberPredicateContext = MemberPredicateContext;\n\n\tQLParser.prototype.memberPredicate = function () {\n\n\t    var localctx = new MemberPredicateContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 34, QLParser.RULE_memberPredicate);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 288;\n\t        this.returnType();\n\t        this.state = 289;\n\t        this.predicateName();\n\t        this.state = 290;\n\t        this.match(QLParser.OPAR);\n\t        this.state = 291;\n\t        this.varDecls();\n\t        this.state = 292;\n\t        this.match(QLParser.CPAR);\n\t        this.state = 293;\n\t        this.optbody();\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction FieldContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_field;\n\t    return this;\n\t}\n\n\tFieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tFieldContext.prototype.constructor = FieldContext;\n\n\tFieldContext.prototype.varDecl = function () {\n\t    return this.getTypedRuleContext(VarDeclContext, 0);\n\t};\n\n\tFieldContext.prototype.SEMI = function () {\n\t    return this.getToken(QLParser.SEMI, 0);\n\t};\n\n\tFieldContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitField(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.FieldContext = FieldContext;\n\n\tQLParser.prototype.field = function () {\n\n\t    var localctx = new FieldContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 36, QLParser.RULE_field);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 295;\n\t        this.varDecl();\n\t        this.state = 296;\n\t        this.match(QLParser.SEMI);\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction OptbodyContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_optbody;\n\t    return this;\n\t}\n\n\tOptbodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tOptbodyContext.prototype.constructor = OptbodyContext;\n\n\tOptbodyContext.prototype.empty = function () {\n\t    return this.getTypedRuleContext(EmptyContext, 0);\n\t};\n\n\tOptbodyContext.prototype.body = function () {\n\t    return this.getTypedRuleContext(BodyContext, 0);\n\t};\n\n\tOptbodyContext.prototype.higherOrderTerm = function () {\n\t    return this.getTypedRuleContext(HigherOrderTermContext, 0);\n\t};\n\n\tOptbodyContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitOptbody(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.OptbodyContext = OptbodyContext;\n\n\tQLParser.prototype.optbody = function () {\n\n\t    var localctx = new OptbodyContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 38, QLParser.RULE_optbody);\n\t    try {\n\t        this.state = 301;\n\t        this._errHandler.sync(this);\n\t        switch (this._input.LA(1)) {\n\t            case QLParser.SEMI:\n\t                this.enterOuterAlt(localctx, 1);\n\t                this.state = 298;\n\t                this.empty();\n\t                break;\n\t            case QLParser.OBRACE:\n\t                this.enterOuterAlt(localctx, 2);\n\t                this.state = 299;\n\t                this.body();\n\t                break;\n\t            case QLParser.EQ:\n\t                this.enterOuterAlt(localctx, 3);\n\t                this.state = 300;\n\t                this.higherOrderTerm();\n\t                break;\n\t            default:\n\t                throw new antlr4.error.NoViableAltException(this);\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction EmptyContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_empty;\n\t    return this;\n\t}\n\n\tEmptyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tEmptyContext.prototype.constructor = EmptyContext;\n\n\tEmptyContext.prototype.SEMI = function () {\n\t    return this.getToken(QLParser.SEMI, 0);\n\t};\n\n\tEmptyContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitEmpty(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.EmptyContext = EmptyContext;\n\n\tQLParser.prototype.empty = function () {\n\n\t    var localctx = new EmptyContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 40, QLParser.RULE_empty);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 303;\n\t        this.match(QLParser.SEMI);\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction BodyContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_body;\n\t    return this;\n\t}\n\n\tBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tBodyContext.prototype.constructor = BodyContext;\n\n\tBodyContext.prototype.OBRACE = function () {\n\t    return this.getToken(QLParser.OBRACE, 0);\n\t};\n\n\tBodyContext.prototype.exprOrTerm = function () {\n\t    return this.getTypedRuleContext(ExprOrTermContext, 0);\n\t};\n\n\tBodyContext.prototype.CBRACE = function () {\n\t    return this.getToken(QLParser.CBRACE, 0);\n\t};\n\n\tBodyContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitBody(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.BodyContext = BodyContext;\n\n\tQLParser.prototype.body = function () {\n\n\t    var localctx = new BodyContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 42, QLParser.RULE_body);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 305;\n\t        this.match(QLParser.OBRACE);\n\t        this.state = 306;\n\t        this.exprOrTerm(0);\n\t        this.state = 307;\n\t        this.match(QLParser.CBRACE);\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction HigherOrderTermContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_higherOrderTerm;\n\t    this.name = null; // LiteralIdContext\n\t    return this;\n\t}\n\n\tHigherOrderTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tHigherOrderTermContext.prototype.constructor = HigherOrderTermContext;\n\n\tHigherOrderTermContext.prototype.EQ = function () {\n\t    return this.getToken(QLParser.EQ, 0);\n\t};\n\n\tHigherOrderTermContext.prototype.OPAR = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTokens(QLParser.OPAR);\n\t    } else {\n\t        return this.getToken(QLParser.OPAR, i);\n\t    }\n\t};\n\n\tHigherOrderTermContext.prototype.CPAR = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTokens(QLParser.CPAR);\n\t    } else {\n\t        return this.getToken(QLParser.CPAR, i);\n\t    }\n\t};\n\n\tHigherOrderTermContext.prototype.callArgs = function () {\n\t    return this.getTypedRuleContext(CallArgsContext, 0);\n\t};\n\n\tHigherOrderTermContext.prototype.literalId = function () {\n\t    return this.getTypedRuleContext(LiteralIdContext, 0);\n\t};\n\n\tHigherOrderTermContext.prototype.predicateExpr = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(PredicateExprContext);\n\t    } else {\n\t        return this.getTypedRuleContext(PredicateExprContext, i);\n\t    }\n\t};\n\n\tHigherOrderTermContext.prototype.COMMA = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTokens(QLParser.COMMA);\n\t    } else {\n\t        return this.getToken(QLParser.COMMA, i);\n\t    }\n\t};\n\n\tHigherOrderTermContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitHigherOrderTerm(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.HigherOrderTermContext = HigherOrderTermContext;\n\n\tQLParser.prototype.higherOrderTerm = function () {\n\n\t    var localctx = new HigherOrderTermContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 44, QLParser.RULE_higherOrderTerm);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 309;\n\t        this.match(QLParser.EQ);\n\t        this.state = 310;\n\t        localctx.name = this.literalId();\n\t        this.state = 311;\n\t        this.match(QLParser.OPAR);\n\t        this.state = 320;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if ((_la - 73 & ~0x1f) == 0 && (1 << _la - 73 & (1 << QLParser.Lowerid - 73 | 1 << QLParser.Upperid - 73 | 1 << QLParser.Atlowerid - 73)) !== 0) {\n\t            this.state = 312;\n\t            this.predicateExpr();\n\t            this.state = 317;\n\t            this._errHandler.sync(this);\n\t            _la = this._input.LA(1);\n\t            while (_la === QLParser.COMMA) {\n\t                this.state = 313;\n\t                this.match(QLParser.COMMA);\n\t                this.state = 314;\n\t                this.predicateExpr();\n\t                this.state = 319;\n\t                this._errHandler.sync(this);\n\t                _la = this._input.LA(1);\n\t            }\n\t        }\n\n\t        this.state = 322;\n\t        this.match(QLParser.CPAR);\n\t        this.state = 323;\n\t        this.match(QLParser.OPAR);\n\t        this.state = 324;\n\t        this.callArgs();\n\t        this.state = 325;\n\t        this.match(QLParser.CPAR);\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction ExprOrTermContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_exprOrTerm;\n\t    return this;\n\t}\n\n\tExprOrTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tExprOrTermContext.prototype.constructor = ExprOrTermContext;\n\n\tExprOrTermContext.prototype.copyFrom = function (ctx) {\n\t    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);\n\t};\n\n\tfunction CastContext(parser, ctx) {\n\t    ExprOrTermContext.call(this, parser);\n\t    ExprOrTermContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tCastContext.prototype = Object.create(ExprOrTermContext.prototype);\n\tCastContext.prototype.constructor = CastContext;\n\n\tQLParser.CastContext = CastContext;\n\n\tCastContext.prototype.OPAR = function () {\n\t    return this.getToken(QLParser.OPAR, 0);\n\t};\n\n\tCastContext.prototype.typeExpr = function () {\n\t    return this.getTypedRuleContext(TypeExprContext, 0);\n\t};\n\n\tCastContext.prototype.CPAR = function () {\n\t    return this.getToken(QLParser.CPAR, 0);\n\t};\n\n\tCastContext.prototype.exprOrTerm = function () {\n\t    return this.getTypedRuleContext(ExprOrTermContext, 0);\n\t};\n\tCastContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitCast(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction InContext(parser, ctx) {\n\t    ExprOrTermContext.call(this, parser);\n\t    this.target = null; // ExprOrTermContext;\n\t    this.range = null; // PrimaryContext;\n\t    ExprOrTermContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tInContext.prototype = Object.create(ExprOrTermContext.prototype);\n\tInContext.prototype.constructor = InContext;\n\n\tQLParser.InContext = InContext;\n\n\tInContext.prototype.IN = function () {\n\t    return this.getToken(QLParser.IN, 0);\n\t};\n\n\tInContext.prototype.exprOrTerm = function () {\n\t    return this.getTypedRuleContext(ExprOrTermContext, 0);\n\t};\n\n\tInContext.prototype.primary = function () {\n\t    return this.getTypedRuleContext(PrimaryContext, 0);\n\t};\n\tInContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitIn(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction AddOperationContext(parser, ctx) {\n\t    ExprOrTermContext.call(this, parser);\n\t    this.left = null; // ExprOrTermContext;\n\t    this.right = null; // ExprOrTermContext;\n\t    ExprOrTermContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tAddOperationContext.prototype = Object.create(ExprOrTermContext.prototype);\n\tAddOperationContext.prototype.constructor = AddOperationContext;\n\n\tQLParser.AddOperationContext = AddOperationContext;\n\n\tAddOperationContext.prototype.addop = function () {\n\t    return this.getTypedRuleContext(AddopContext, 0);\n\t};\n\n\tAddOperationContext.prototype.exprOrTerm = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(ExprOrTermContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExprOrTermContext, i);\n\t    }\n\t};\n\tAddOperationContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitAddOperation(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction UnaryContext(parser, ctx) {\n\t    ExprOrTermContext.call(this, parser);\n\t    ExprOrTermContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tUnaryContext.prototype = Object.create(ExprOrTermContext.prototype);\n\tUnaryContext.prototype.constructor = UnaryContext;\n\n\tQLParser.UnaryContext = UnaryContext;\n\n\tUnaryContext.prototype.unop = function () {\n\t    return this.getTypedRuleContext(UnopContext, 0);\n\t};\n\n\tUnaryContext.prototype.exprOrTerm = function () {\n\t    return this.getTypedRuleContext(ExprOrTermContext, 0);\n\t};\n\tUnaryContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitUnary(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction QuantifiedTermContext(parser, ctx) {\n\t    ExprOrTermContext.call(this, parser);\n\t    ExprOrTermContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tQuantifiedTermContext.prototype = Object.create(ExprOrTermContext.prototype);\n\tQuantifiedTermContext.prototype.constructor = QuantifiedTermContext;\n\n\tQLParser.QuantifiedTermContext = QuantifiedTermContext;\n\n\tQuantifiedTermContext.prototype.quantifier = function () {\n\t    return this.getTypedRuleContext(QuantifierContext, 0);\n\t};\n\n\tQuantifiedTermContext.prototype.OPAR = function () {\n\t    return this.getToken(QLParser.OPAR, 0);\n\t};\n\n\tQuantifiedTermContext.prototype.quantBody = function () {\n\t    return this.getTypedRuleContext(QuantBodyContext, 0);\n\t};\n\n\tQuantifiedTermContext.prototype.CPAR = function () {\n\t    return this.getToken(QLParser.CPAR, 0);\n\t};\n\tQuantifiedTermContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitQuantifiedTerm(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction NotContext(parser, ctx) {\n\t    ExprOrTermContext.call(this, parser);\n\t    ExprOrTermContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tNotContext.prototype = Object.create(ExprOrTermContext.prototype);\n\tNotContext.prototype.constructor = NotContext;\n\n\tQLParser.NotContext = NotContext;\n\n\tNotContext.prototype.NOT = function () {\n\t    return this.getToken(QLParser.NOT, 0);\n\t};\n\n\tNotContext.prototype.exprOrTerm = function () {\n\t    return this.getTypedRuleContext(ExprOrTermContext, 0);\n\t};\n\tNotContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitNot(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction DisjunctionContext(parser, ctx) {\n\t    ExprOrTermContext.call(this, parser);\n\t    ExprOrTermContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tDisjunctionContext.prototype = Object.create(ExprOrTermContext.prototype);\n\tDisjunctionContext.prototype.constructor = DisjunctionContext;\n\n\tQLParser.DisjunctionContext = DisjunctionContext;\n\n\tDisjunctionContext.prototype.exprOrTerm = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(ExprOrTermContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExprOrTermContext, i);\n\t    }\n\t};\n\n\tDisjunctionContext.prototype.OR = function () {\n\t    return this.getToken(QLParser.OR, 0);\n\t};\n\tDisjunctionContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitDisjunction(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction ImpliesContext(parser, ctx) {\n\t    ExprOrTermContext.call(this, parser);\n\t    this.left = null; // ExprOrTermContext;\n\t    this.right = null; // ExprOrTermContext;\n\t    ExprOrTermContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tImpliesContext.prototype = Object.create(ExprOrTermContext.prototype);\n\tImpliesContext.prototype.constructor = ImpliesContext;\n\n\tQLParser.ImpliesContext = ImpliesContext;\n\n\tImpliesContext.prototype.IMPLIES = function () {\n\t    return this.getToken(QLParser.IMPLIES, 0);\n\t};\n\n\tImpliesContext.prototype.exprOrTerm = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(ExprOrTermContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExprOrTermContext, i);\n\t    }\n\t};\n\tImpliesContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitImplies(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction ComparisonContext(parser, ctx) {\n\t    ExprOrTermContext.call(this, parser);\n\t    ExprOrTermContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tComparisonContext.prototype = Object.create(ExprOrTermContext.prototype);\n\tComparisonContext.prototype.constructor = ComparisonContext;\n\n\tQLParser.ComparisonContext = ComparisonContext;\n\n\tComparisonContext.prototype.exprOrTerm = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(ExprOrTermContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExprOrTermContext, i);\n\t    }\n\t};\n\n\tComparisonContext.prototype.compop = function () {\n\t    return this.getTypedRuleContext(CompopContext, 0);\n\t};\n\tComparisonContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitComparison(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction SpecialCallContext(parser, ctx) {\n\t    ExprOrTermContext.call(this, parser);\n\t    ExprOrTermContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tSpecialCallContext.prototype = Object.create(ExprOrTermContext.prototype);\n\tSpecialCallContext.prototype.constructor = SpecialCallContext;\n\n\tQLParser.SpecialCallContext = SpecialCallContext;\n\n\tSpecialCallContext.prototype.specialId = function () {\n\t    return this.getTypedRuleContext(SpecialIdContext, 0);\n\t};\n\n\tSpecialCallContext.prototype.OPAR = function () {\n\t    return this.getToken(QLParser.OPAR, 0);\n\t};\n\n\tSpecialCallContext.prototype.CPAR = function () {\n\t    return this.getToken(QLParser.CPAR, 0);\n\t};\n\tSpecialCallContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitSpecialCall(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction ConjunctionContext(parser, ctx) {\n\t    ExprOrTermContext.call(this, parser);\n\t    ExprOrTermContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tConjunctionContext.prototype = Object.create(ExprOrTermContext.prototype);\n\tConjunctionContext.prototype.constructor = ConjunctionContext;\n\n\tQLParser.ConjunctionContext = ConjunctionContext;\n\n\tConjunctionContext.prototype.exprOrTerm = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(ExprOrTermContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExprOrTermContext, i);\n\t    }\n\t};\n\n\tConjunctionContext.prototype.AND = function () {\n\t    return this.getToken(QLParser.AND, 0);\n\t};\n\tConjunctionContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitConjunction(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction InstanceofContext(parser, ctx) {\n\t    ExprOrTermContext.call(this, parser);\n\t    ExprOrTermContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tInstanceofContext.prototype = Object.create(ExprOrTermContext.prototype);\n\tInstanceofContext.prototype.constructor = InstanceofContext;\n\n\tQLParser.InstanceofContext = InstanceofContext;\n\n\tInstanceofContext.prototype.exprOrTerm = function () {\n\t    return this.getTypedRuleContext(ExprOrTermContext, 0);\n\t};\n\n\tInstanceofContext.prototype.INSTANCEOF = function () {\n\t    return this.getToken(QLParser.INSTANCEOF, 0);\n\t};\n\n\tInstanceofContext.prototype.typeExpr = function () {\n\t    return this.getTypedRuleContext(TypeExprContext, 0);\n\t};\n\tInstanceofContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitInstanceof(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction PrimaryTermContext(parser, ctx) {\n\t    ExprOrTermContext.call(this, parser);\n\t    ExprOrTermContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tPrimaryTermContext.prototype = Object.create(ExprOrTermContext.prototype);\n\tPrimaryTermContext.prototype.constructor = PrimaryTermContext;\n\n\tQLParser.PrimaryTermContext = PrimaryTermContext;\n\n\tPrimaryTermContext.prototype.primary = function () {\n\t    return this.getTypedRuleContext(PrimaryContext, 0);\n\t};\n\tPrimaryTermContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitPrimaryTerm(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction IfContext(parser, ctx) {\n\t    ExprOrTermContext.call(this, parser);\n\t    this.cond = null; // ExprOrTermContext;\n\t    this.first = null; // ExprOrTermContext;\n\t    this.second = null; // ExprOrTermContext;\n\t    ExprOrTermContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tIfContext.prototype = Object.create(ExprOrTermContext.prototype);\n\tIfContext.prototype.constructor = IfContext;\n\n\tQLParser.IfContext = IfContext;\n\n\tIfContext.prototype.IF = function () {\n\t    return this.getToken(QLParser.IF, 0);\n\t};\n\n\tIfContext.prototype.THEN = function () {\n\t    return this.getToken(QLParser.THEN, 0);\n\t};\n\n\tIfContext.prototype.ELSE = function () {\n\t    return this.getToken(QLParser.ELSE, 0);\n\t};\n\n\tIfContext.prototype.exprOrTerm = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(ExprOrTermContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExprOrTermContext, i);\n\t    }\n\t};\n\tIfContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitIf(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction MulOperationContext(parser, ctx) {\n\t    ExprOrTermContext.call(this, parser);\n\t    this.left = null; // ExprOrTermContext;\n\t    this.right = null; // ExprOrTermContext;\n\t    ExprOrTermContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tMulOperationContext.prototype = Object.create(ExprOrTermContext.prototype);\n\tMulOperationContext.prototype.constructor = MulOperationContext;\n\n\tQLParser.MulOperationContext = MulOperationContext;\n\n\tMulOperationContext.prototype.mulop = function () {\n\t    return this.getTypedRuleContext(MulopContext, 0);\n\t};\n\n\tMulOperationContext.prototype.exprOrTerm = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(ExprOrTermContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExprOrTermContext, i);\n\t    }\n\t};\n\tMulOperationContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitMulOperation(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.prototype.exprOrTerm = function (_p) {\n\t    if (_p === undefined) {\n\t        _p = 0;\n\t    }\n\t    var _parentctx = this._ctx;\n\t    var _parentState = this.state;\n\t    var localctx = new ExprOrTermContext(this, this._ctx, _parentState);\n\t    var _prevctx = localctx;\n\t    var _startState = 46;\n\t    this.enterRecursionRule(localctx, 46, QLParser.RULE_exprOrTerm, _p);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 355;\n\t        this._errHandler.sync(this);\n\t        var la_ = this._interp.adaptivePredict(this._input, 23, this._ctx);\n\t        switch (la_) {\n\t            case 1:\n\t                localctx = new SpecialCallContext(this, localctx);\n\t                this._ctx = localctx;\n\t                _prevctx = localctx;\n\n\t                this.state = 328;\n\t                this.specialId();\n\t                this.state = 329;\n\t                this.match(QLParser.OPAR);\n\t                this.state = 330;\n\t                this.match(QLParser.CPAR);\n\t                break;\n\n\t            case 2:\n\t                localctx = new CastContext(this, localctx);\n\t                this._ctx = localctx;\n\t                _prevctx = localctx;\n\t                this.state = 332;\n\t                this.match(QLParser.OPAR);\n\t                this.state = 333;\n\t                this.typeExpr();\n\t                this.state = 334;\n\t                this.match(QLParser.CPAR);\n\t                this.state = 335;\n\t                this.exprOrTerm(14);\n\t                break;\n\n\t            case 3:\n\t                localctx = new PrimaryTermContext(this, localctx);\n\t                this._ctx = localctx;\n\t                _prevctx = localctx;\n\t                this.state = 337;\n\t                this.primary(0);\n\t                break;\n\n\t            case 4:\n\t                localctx = new UnaryContext(this, localctx);\n\t                this._ctx = localctx;\n\t                _prevctx = localctx;\n\t                this.state = 338;\n\t                this.unop();\n\t                this.state = 339;\n\t                this.exprOrTerm(12);\n\t                break;\n\n\t            case 5:\n\t                localctx = new NotContext(this, localctx);\n\t                this._ctx = localctx;\n\t                _prevctx = localctx;\n\t                this.state = 341;\n\t                this.match(QLParser.NOT);\n\t                this.state = 342;\n\t                this.exprOrTerm(6);\n\t                break;\n\n\t            case 6:\n\t                localctx = new IfContext(this, localctx);\n\t                this._ctx = localctx;\n\t                _prevctx = localctx;\n\t                this.state = 343;\n\t                this.match(QLParser.IF);\n\t                this.state = 344;\n\t                localctx.cond = this.exprOrTerm(0);\n\t                this.state = 345;\n\t                this.match(QLParser.THEN);\n\t                this.state = 346;\n\t                localctx.first = this.exprOrTerm(0);\n\t                this.state = 347;\n\t                this.match(QLParser.ELSE);\n\t                this.state = 348;\n\t                localctx.second = this.exprOrTerm(5);\n\t                break;\n\n\t            case 7:\n\t                localctx = new QuantifiedTermContext(this, localctx);\n\t                this._ctx = localctx;\n\t                _prevctx = localctx;\n\t                this.state = 350;\n\t                this.quantifier();\n\t                this.state = 351;\n\t                this.match(QLParser.OPAR);\n\t                this.state = 352;\n\t                this.quantBody();\n\t                this.state = 353;\n\t                this.match(QLParser.CPAR);\n\t                break;\n\n\t        }\n\t        this._ctx.stop = this._input.LT(-1);\n\t        this.state = 386;\n\t        this._errHandler.sync(this);\n\t        var _alt = this._interp.adaptivePredict(this._input, 25, this._ctx);\n\t        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {\n\t            if (_alt === 1) {\n\t                if (this._parseListeners !== null) {\n\t                    this.triggerExitRuleEvent();\n\t                }\n\t                _prevctx = localctx;\n\t                this.state = 384;\n\t                this._errHandler.sync(this);\n\t                var la_ = this._interp.adaptivePredict(this._input, 24, this._ctx);\n\t                switch (la_) {\n\t                    case 1:\n\t                        localctx = new MulOperationContext(this, new ExprOrTermContext(this, _parentctx, _parentState));\n\t                        localctx.left = _prevctx;\n\t                        this.pushNewRecursionContext(localctx, _startState, QLParser.RULE_exprOrTerm);\n\t                        this.state = 357;\n\t                        if (!this.precpred(this._ctx, 11)) {\n\t                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 11)\");\n\t                        }\n\t                        this.state = 358;\n\t                        this.mulop();\n\t                        this.state = 359;\n\t                        localctx.right = this.exprOrTerm(12);\n\t                        break;\n\n\t                    case 2:\n\t                        localctx = new AddOperationContext(this, new ExprOrTermContext(this, _parentctx, _parentState));\n\t                        localctx.left = _prevctx;\n\t                        this.pushNewRecursionContext(localctx, _startState, QLParser.RULE_exprOrTerm);\n\t                        this.state = 361;\n\t                        if (!this.precpred(this._ctx, 10)) {\n\t                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 10)\");\n\t                        }\n\t                        this.state = 362;\n\t                        this.addop();\n\t                        this.state = 363;\n\t                        localctx.right = this.exprOrTerm(11);\n\t                        break;\n\n\t                    case 3:\n\t                        localctx = new ComparisonContext(this, new ExprOrTermContext(this, _parentctx, _parentState));\n\t                        this.pushNewRecursionContext(localctx, _startState, QLParser.RULE_exprOrTerm);\n\t                        this.state = 365;\n\t                        if (!this.precpred(this._ctx, 8)) {\n\t                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 8)\");\n\t                        }\n\t                        this.state = 366;\n\t                        this.compop();\n\t                        this.state = 367;\n\t                        this.exprOrTerm(9);\n\t                        break;\n\n\t                    case 4:\n\t                        localctx = new ConjunctionContext(this, new ExprOrTermContext(this, _parentctx, _parentState));\n\t                        this.pushNewRecursionContext(localctx, _startState, QLParser.RULE_exprOrTerm);\n\t                        this.state = 369;\n\t                        if (!this.precpred(this._ctx, 4)) {\n\t                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 4)\");\n\t                        }\n\t                        this.state = 370;\n\t                        this.match(QLParser.AND);\n\t                        this.state = 371;\n\t                        this.exprOrTerm(5);\n\t                        break;\n\n\t                    case 5:\n\t                        localctx = new DisjunctionContext(this, new ExprOrTermContext(this, _parentctx, _parentState));\n\t                        this.pushNewRecursionContext(localctx, _startState, QLParser.RULE_exprOrTerm);\n\t                        this.state = 372;\n\t                        if (!this.precpred(this._ctx, 3)) {\n\t                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 3)\");\n\t                        }\n\t                        this.state = 373;\n\t                        this.match(QLParser.OR);\n\t                        this.state = 374;\n\t                        this.exprOrTerm(4);\n\t                        break;\n\n\t                    case 6:\n\t                        localctx = new ImpliesContext(this, new ExprOrTermContext(this, _parentctx, _parentState));\n\t                        localctx.left = _prevctx;\n\t                        this.pushNewRecursionContext(localctx, _startState, QLParser.RULE_exprOrTerm);\n\t                        this.state = 375;\n\t                        if (!this.precpred(this._ctx, 2)) {\n\t                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 2)\");\n\t                        }\n\t                        this.state = 376;\n\t                        this.match(QLParser.IMPLIES);\n\t                        this.state = 377;\n\t                        localctx.right = this.exprOrTerm(2);\n\t                        break;\n\n\t                    case 7:\n\t                        localctx = new InContext(this, new ExprOrTermContext(this, _parentctx, _parentState));\n\t                        localctx.target = _prevctx;\n\t                        this.pushNewRecursionContext(localctx, _startState, QLParser.RULE_exprOrTerm);\n\t                        this.state = 378;\n\t                        if (!this.precpred(this._ctx, 9)) {\n\t                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 9)\");\n\t                        }\n\t                        this.state = 379;\n\t                        this.match(QLParser.IN);\n\t                        this.state = 380;\n\t                        localctx.range = this.primary(0);\n\t                        break;\n\n\t                    case 8:\n\t                        localctx = new InstanceofContext(this, new ExprOrTermContext(this, _parentctx, _parentState));\n\t                        this.pushNewRecursionContext(localctx, _startState, QLParser.RULE_exprOrTerm);\n\t                        this.state = 381;\n\t                        if (!this.precpred(this._ctx, 7)) {\n\t                            throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 7)\");\n\t                        }\n\t                        this.state = 382;\n\t                        this.match(QLParser.INSTANCEOF);\n\t                        this.state = 383;\n\t                        this.typeExpr();\n\t                        break;\n\n\t                }\n\t            }\n\t            this.state = 388;\n\t            this._errHandler.sync(this);\n\t            _alt = this._interp.adaptivePredict(this._input, 25, this._ctx);\n\t        }\n\t    } catch (error) {\n\t        if (error instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = error;\n\t            this._errHandler.reportError(this, error);\n\t            this._errHandler.recover(this, error);\n\t        } else {\n\t            throw error;\n\t        }\n\t    } finally {\n\t        this.unrollRecursionContexts(_parentctx);\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction SpecialIdContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_specialId;\n\t    return this;\n\t}\n\n\tSpecialIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tSpecialIdContext.prototype.constructor = SpecialIdContext;\n\n\tSpecialIdContext.prototype.ANY = function () {\n\t    return this.getToken(QLParser.ANY, 0);\n\t};\n\n\tSpecialIdContext.prototype.NONE = function () {\n\t    return this.getToken(QLParser.NONE, 0);\n\t};\n\n\tSpecialIdContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitSpecialId(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.SpecialIdContext = SpecialIdContext;\n\n\tQLParser.prototype.specialId = function () {\n\n\t    var localctx = new SpecialIdContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 48, QLParser.RULE_specialId);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 389;\n\t        _la = this._input.LA(1);\n\t        if (!(_la === QLParser.ANY || _la === QLParser.NONE)) {\n\t            this._errHandler.recoverInline(this);\n\t        } else {\n\t            this._errHandler.reportMatch(this);\n\t            this.consume();\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction QuantBodyContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_quantBody;\n\t    return this;\n\t}\n\n\tQuantBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tQuantBodyContext.prototype.constructor = QuantBodyContext;\n\n\tQuantBodyContext.prototype.varDecls = function () {\n\t    return this.getTypedRuleContext(VarDeclsContext, 0);\n\t};\n\n\tQuantBodyContext.prototype.BAR = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTokens(QLParser.BAR);\n\t    } else {\n\t        return this.getToken(QLParser.BAR, i);\n\t    }\n\t};\n\n\tQuantBodyContext.prototype.exprOrTerm = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(ExprOrTermContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExprOrTermContext, i);\n\t    }\n\t};\n\n\tQuantBodyContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitQuantBody(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.QuantBodyContext = QuantBodyContext;\n\n\tQLParser.prototype.quantBody = function () {\n\n\t    var localctx = new QuantBodyContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 50, QLParser.RULE_quantBody);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.state = 401;\n\t        this._errHandler.sync(this);\n\t        var la_ = this._interp.adaptivePredict(this._input, 28, this._ctx);\n\t        switch (la_) {\n\t            case 1:\n\t                this.enterOuterAlt(localctx, 1);\n\t                this.state = 391;\n\t                this.varDecls();\n\t                this.state = 398;\n\t                this._errHandler.sync(this);\n\t                _la = this._input.LA(1);\n\t                if (_la === QLParser.BAR) {\n\t                    this.state = 392;\n\t                    this.match(QLParser.BAR);\n\t                    this.state = 393;\n\t                    this.exprOrTerm(0);\n\t                    this.state = 396;\n\t                    this._errHandler.sync(this);\n\t                    _la = this._input.LA(1);\n\t                    if (_la === QLParser.BAR) {\n\t                        this.state = 394;\n\t                        this.match(QLParser.BAR);\n\t                        this.state = 395;\n\t                        this.exprOrTerm(0);\n\t                    }\n\t                }\n\n\t                break;\n\n\t            case 2:\n\t                this.enterOuterAlt(localctx, 2);\n\t                this.state = 400;\n\t                this.exprOrTerm(0);\n\t                break;\n\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction QuantifierContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_quantifier;\n\t    return this;\n\t}\n\n\tQuantifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tQuantifierContext.prototype.constructor = QuantifierContext;\n\n\tQuantifierContext.prototype.EXISTS = function () {\n\t    return this.getToken(QLParser.EXISTS, 0);\n\t};\n\n\tQuantifierContext.prototype.FORALL = function () {\n\t    return this.getToken(QLParser.FORALL, 0);\n\t};\n\n\tQuantifierContext.prototype.FOREX = function () {\n\t    return this.getToken(QLParser.FOREX, 0);\n\t};\n\n\tQuantifierContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitQuantifier(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.QuantifierContext = QuantifierContext;\n\n\tQLParser.prototype.quantifier = function () {\n\n\t    var localctx = new QuantifierContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 52, QLParser.RULE_quantifier);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 403;\n\t        _la = this._input.LA(1);\n\t        if (!((_la & ~0x1f) == 0 && (1 << _la & (1 << QLParser.EXISTS | 1 << QLParser.FORALL | 1 << QLParser.FOREX)) !== 0)) {\n\t            this._errHandler.recoverInline(this);\n\t        } else {\n\t            this._errHandler.reportMatch(this);\n\t            this.consume();\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction CallArgContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_callArg;\n\t    return this;\n\t}\n\n\tCallArgContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tCallArgContext.prototype.constructor = CallArgContext;\n\n\tCallArgContext.prototype.copyFrom = function (ctx) {\n\t    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);\n\t};\n\n\tfunction ExprArgContext(parser, ctx) {\n\t    CallArgContext.call(this, parser);\n\t    CallArgContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tExprArgContext.prototype = Object.create(CallArgContext.prototype);\n\tExprArgContext.prototype.constructor = ExprArgContext;\n\n\tQLParser.ExprArgContext = ExprArgContext;\n\n\tExprArgContext.prototype.exprOrTerm = function () {\n\t    return this.getTypedRuleContext(ExprOrTermContext, 0);\n\t};\n\tExprArgContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitExprArg(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction DontCareContext(parser, ctx) {\n\t    CallArgContext.call(this, parser);\n\t    CallArgContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tDontCareContext.prototype = Object.create(CallArgContext.prototype);\n\tDontCareContext.prototype.constructor = DontCareContext;\n\n\tQLParser.DontCareContext = DontCareContext;\n\n\tDontCareContext.prototype.UNDERSCORE = function () {\n\t    return this.getToken(QLParser.UNDERSCORE, 0);\n\t};\n\tDontCareContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitDontCare(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.CallArgContext = CallArgContext;\n\n\tQLParser.prototype.callArg = function () {\n\n\t    var localctx = new CallArgContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 54, QLParser.RULE_callArg);\n\t    try {\n\t        this.state = 407;\n\t        this._errHandler.sync(this);\n\t        switch (this._input.LA(1)) {\n\t            case QLParser.ANY:\n\t            case QLParser.AVG:\n\t            case QLParser.BOOLEAN:\n\t            case QLParser.COUNT:\n\t            case QLParser.DATE:\n\t            case QLParser.EXISTS:\n\t            case QLParser.FALSE:\n\t            case QLParser.FLOAT:\n\t            case QLParser.FORALL:\n\t            case QLParser.FOREX:\n\t            case QLParser.IF:\n\t            case QLParser.INT:\n\t            case QLParser.MAX:\n\t            case QLParser.MIN:\n\t            case QLParser.NOT:\n\t            case QLParser.NONE:\n\t            case QLParser.RANK:\n\t            case QLParser.RESULT:\n\t            case QLParser.STRICTCOUNT:\n\t            case QLParser.STRICTSUM:\n\t            case QLParser.STRICTCONCAT:\n\t            case QLParser.CONCAT:\n\t            case QLParser.STRING:\n\t            case QLParser.SUM:\n\t            case QLParser.SUPER:\n\t            case QLParser.THIS:\n\t            case QLParser.TRUE:\n\t            case QLParser.MINUS:\n\t            case QLParser.OPAR:\n\t            case QLParser.OBLOCK:\n\t            case QLParser.PLUS:\n\t            case QLParser.Lowerid:\n\t            case QLParser.Upperid:\n\t            case QLParser.Atlowerid:\n\t            case QLParser.Integer:\n\t            case QLParser.Float:\n\t            case QLParser.String:\n\t                localctx = new ExprArgContext(this, localctx);\n\t                this.enterOuterAlt(localctx, 1);\n\t                this.state = 405;\n\t                this.exprOrTerm(0);\n\t                break;\n\t            case QLParser.UNDERSCORE:\n\t                localctx = new DontCareContext(this, localctx);\n\t                this.enterOuterAlt(localctx, 2);\n\t                this.state = 406;\n\t                this.match(QLParser.UNDERSCORE);\n\t                break;\n\t            default:\n\t                throw new antlr4.error.NoViableAltException(this);\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction CallArgsContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_callArgs;\n\t    return this;\n\t}\n\n\tCallArgsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tCallArgsContext.prototype.constructor = CallArgsContext;\n\n\tCallArgsContext.prototype.callArg = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(CallArgContext);\n\t    } else {\n\t        return this.getTypedRuleContext(CallArgContext, i);\n\t    }\n\t};\n\n\tCallArgsContext.prototype.COMMA = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTokens(QLParser.COMMA);\n\t    } else {\n\t        return this.getToken(QLParser.COMMA, i);\n\t    }\n\t};\n\n\tCallArgsContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitCallArgs(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.CallArgsContext = CallArgsContext;\n\n\tQLParser.prototype.callArgs = function () {\n\n\t    var localctx = new CallArgsContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 56, QLParser.RULE_callArgs);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 417;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if ((_la & ~0x1f) == 0 && (1 << _la & (1 << QLParser.ANY | 1 << QLParser.AVG | 1 << QLParser.BOOLEAN | 1 << QLParser.COUNT | 1 << QLParser.DATE | 1 << QLParser.EXISTS | 1 << QLParser.FALSE | 1 << QLParser.FLOAT | 1 << QLParser.FORALL | 1 << QLParser.FOREX | 1 << QLParser.IF | 1 << QLParser.INT | 1 << QLParser.MAX | 1 << QLParser.MIN | 1 << QLParser.NOT | 1 << QLParser.NONE)) !== 0 || (_la - 35 & ~0x1f) == 0 && (1 << _la - 35 & (1 << QLParser.RANK - 35 | 1 << QLParser.RESULT - 35 | 1 << QLParser.STRICTCOUNT - 35 | 1 << QLParser.STRICTSUM - 35 | 1 << QLParser.STRICTCONCAT - 35 | 1 << QLParser.CONCAT - 35 | 1 << QLParser.STRING - 35 | 1 << QLParser.SUM - 35 | 1 << QLParser.SUPER - 35 | 1 << QLParser.THIS - 35 | 1 << QLParser.TRUE - 35 | 1 << QLParser.UNDERSCORE - 35 | 1 << QLParser.MINUS - 35 | 1 << QLParser.OPAR - 35 | 1 << QLParser.OBLOCK - 35)) !== 0 || (_la - 70 & ~0x1f) == 0 && (1 << _la - 70 & (1 << QLParser.PLUS - 70 | 1 << QLParser.Lowerid - 70 | 1 << QLParser.Upperid - 70 | 1 << QLParser.Atlowerid - 70 | 1 << QLParser.Integer - 70 | 1 << QLParser.Float - 70 | 1 << QLParser.String - 70)) !== 0) {\n\t            this.state = 409;\n\t            this.callArg();\n\t            this.state = 414;\n\t            this._errHandler.sync(this);\n\t            _la = this._input.LA(1);\n\t            while (_la === QLParser.COMMA) {\n\t                this.state = 410;\n\t                this.match(QLParser.COMMA);\n\t                this.state = 411;\n\t                this.callArg();\n\t                this.state = 416;\n\t                this._errHandler.sync(this);\n\t                _la = this._input.LA(1);\n\t            }\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction QualifiedRhsContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_qualifiedRhs;\n\t    return this;\n\t}\n\n\tQualifiedRhsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tQualifiedRhsContext.prototype.constructor = QualifiedRhsContext;\n\n\tQualifiedRhsContext.prototype.copyFrom = function (ctx) {\n\t    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);\n\t};\n\n\tfunction QualCallContext(parser, ctx) {\n\t    QualifiedRhsContext.call(this, parser);\n\t    QualifiedRhsContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tQualCallContext.prototype = Object.create(QualifiedRhsContext.prototype);\n\tQualCallContext.prototype.constructor = QualCallContext;\n\n\tQLParser.QualCallContext = QualCallContext;\n\n\tQualCallContext.prototype.predicateName = function () {\n\t    return this.getTypedRuleContext(PredicateNameContext, 0);\n\t};\n\n\tQualCallContext.prototype.OPAR = function () {\n\t    return this.getToken(QLParser.OPAR, 0);\n\t};\n\n\tQualCallContext.prototype.callArgs = function () {\n\t    return this.getTypedRuleContext(CallArgsContext, 0);\n\t};\n\n\tQualCallContext.prototype.CPAR = function () {\n\t    return this.getToken(QLParser.CPAR, 0);\n\t};\n\n\tQualCallContext.prototype.closure = function () {\n\t    return this.getTypedRuleContext(ClosureContext, 0);\n\t};\n\tQualCallContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitQualCall(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction QualCastContext(parser, ctx) {\n\t    QualifiedRhsContext.call(this, parser);\n\t    QualifiedRhsContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tQualCastContext.prototype = Object.create(QualifiedRhsContext.prototype);\n\tQualCastContext.prototype.constructor = QualCastContext;\n\n\tQLParser.QualCastContext = QualCastContext;\n\n\tQualCastContext.prototype.OPAR = function () {\n\t    return this.getToken(QLParser.OPAR, 0);\n\t};\n\n\tQualCastContext.prototype.typeExpr = function () {\n\t    return this.getTypedRuleContext(TypeExprContext, 0);\n\t};\n\n\tQualCastContext.prototype.CPAR = function () {\n\t    return this.getToken(QLParser.CPAR, 0);\n\t};\n\tQualCastContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitQualCast(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.QualifiedRhsContext = QualifiedRhsContext;\n\n\tQLParser.prototype.qualifiedRhs = function () {\n\n\t    var localctx = new QualifiedRhsContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 58, QLParser.RULE_qualifiedRhs);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.state = 431;\n\t        this._errHandler.sync(this);\n\t        switch (this._input.LA(1)) {\n\t            case QLParser.Lowerid:\n\t                localctx = new QualCallContext(this, localctx);\n\t                this.enterOuterAlt(localctx, 1);\n\t                this.state = 419;\n\t                this.predicateName();\n\t                this.state = 421;\n\t                this._errHandler.sync(this);\n\t                _la = this._input.LA(1);\n\t                if (_la === QLParser.STAR || _la === QLParser.PLUS) {\n\t                    this.state = 420;\n\t                    this.closure();\n\t                }\n\n\t                this.state = 423;\n\t                this.match(QLParser.OPAR);\n\t                this.state = 424;\n\t                this.callArgs();\n\t                this.state = 425;\n\t                this.match(QLParser.CPAR);\n\t                break;\n\t            case QLParser.OPAR:\n\t                localctx = new QualCastContext(this, localctx);\n\t                this.enterOuterAlt(localctx, 2);\n\t                this.state = 427;\n\t                this.match(QLParser.OPAR);\n\t                this.state = 428;\n\t                this.typeExpr();\n\t                this.state = 429;\n\t                this.match(QLParser.CPAR);\n\t                break;\n\t            default:\n\t                throw new antlr4.error.NoViableAltException(this);\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction PrimaryContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_primary;\n\t    return this;\n\t}\n\n\tPrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tPrimaryContext.prototype.constructor = PrimaryContext;\n\n\tPrimaryContext.prototype.copyFrom = function (ctx) {\n\t    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);\n\t};\n\n\tfunction AggContext(parser, ctx) {\n\t    PrimaryContext.call(this, parser);\n\t    PrimaryContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tAggContext.prototype = Object.create(PrimaryContext.prototype);\n\tAggContext.prototype.constructor = AggContext;\n\n\tQLParser.AggContext = AggContext;\n\n\tAggContext.prototype.aggId = function () {\n\t    return this.getTypedRuleContext(AggIdContext, 0);\n\t};\n\n\tAggContext.prototype.OPAR = function () {\n\t    return this.getToken(QLParser.OPAR, 0);\n\t};\n\n\tAggContext.prototype.aggBody = function () {\n\t    return this.getTypedRuleContext(AggBodyContext, 0);\n\t};\n\n\tAggContext.prototype.CPAR = function () {\n\t    return this.getToken(QLParser.CPAR, 0);\n\t};\n\n\tAggContext.prototype.OBLOCK = function () {\n\t    return this.getToken(QLParser.OBLOCK, 0);\n\t};\n\n\tAggContext.prototype.exprOrTerm = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(ExprOrTermContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExprOrTermContext, i);\n\t    }\n\t};\n\n\tAggContext.prototype.CBLOCK = function () {\n\t    return this.getToken(QLParser.CBLOCK, 0);\n\t};\n\n\tAggContext.prototype.COMMA = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTokens(QLParser.COMMA);\n\t    } else {\n\t        return this.getToken(QLParser.COMMA, i);\n\t    }\n\t};\n\n\tAggContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitAgg(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction SuperContext(parser, ctx) {\n\t    PrimaryContext.call(this, parser);\n\t    PrimaryContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tSuperContext.prototype = Object.create(PrimaryContext.prototype);\n\tSuperContext.prototype.constructor = SuperContext;\n\n\tQLParser.SuperContext = SuperContext;\n\n\tSuperContext.prototype.SUPER = function () {\n\t    return this.getToken(QLParser.SUPER, 0);\n\t};\n\n\tSuperContext.prototype.typeExpr = function () {\n\t    return this.getTypedRuleContext(TypeExprContext, 0);\n\t};\n\n\tSuperContext.prototype.DOT = function () {\n\t    return this.getToken(QLParser.DOT, 0);\n\t};\n\tSuperContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitSuper(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction LitContext(parser, ctx) {\n\t    PrimaryContext.call(this, parser);\n\t    PrimaryContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tLitContext.prototype = Object.create(PrimaryContext.prototype);\n\tLitContext.prototype.constructor = LitContext;\n\n\tQLParser.LitContext = LitContext;\n\n\tLitContext.prototype.literal = function () {\n\t    return this.getTypedRuleContext(LiteralContext, 0);\n\t};\n\tLitContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitLit(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction VarContext(parser, ctx) {\n\t    PrimaryContext.call(this, parser);\n\t    PrimaryContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tVarContext.prototype = Object.create(PrimaryContext.prototype);\n\tVarContext.prototype.constructor = VarContext;\n\n\tQLParser.VarContext = VarContext;\n\n\tVarContext.prototype.variable = function () {\n\t    return this.getTypedRuleContext(VariableContext, 0);\n\t};\n\tVarContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitVar(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction ParExprContext(parser, ctx) {\n\t    PrimaryContext.call(this, parser);\n\t    PrimaryContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tParExprContext.prototype = Object.create(PrimaryContext.prototype);\n\tParExprContext.prototype.constructor = ParExprContext;\n\n\tQLParser.ParExprContext = ParExprContext;\n\n\tParExprContext.prototype.OPAR = function () {\n\t    return this.getToken(QLParser.OPAR, 0);\n\t};\n\n\tParExprContext.prototype.exprOrTerm = function () {\n\t    return this.getTypedRuleContext(ExprOrTermContext, 0);\n\t};\n\n\tParExprContext.prototype.CPAR = function () {\n\t    return this.getToken(QLParser.CPAR, 0);\n\t};\n\tParExprContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitParExpr(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction PredicateAtomExprContext(parser, ctx) {\n\t    PrimaryContext.call(this, parser);\n\t    PrimaryContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tPredicateAtomExprContext.prototype = Object.create(PrimaryContext.prototype);\n\tPredicateAtomExprContext.prototype.constructor = PredicateAtomExprContext;\n\n\tQLParser.PredicateAtomExprContext = PredicateAtomExprContext;\n\n\tPredicateAtomExprContext.prototype.aritylessPredicateExpr = function () {\n\t    return this.getTypedRuleContext(AritylessPredicateExprContext, 0);\n\t};\n\n\tPredicateAtomExprContext.prototype.OPAR = function () {\n\t    return this.getToken(QLParser.OPAR, 0);\n\t};\n\n\tPredicateAtomExprContext.prototype.callArgs = function () {\n\t    return this.getTypedRuleContext(CallArgsContext, 0);\n\t};\n\n\tPredicateAtomExprContext.prototype.CPAR = function () {\n\t    return this.getToken(QLParser.CPAR, 0);\n\t};\n\n\tPredicateAtomExprContext.prototype.closure = function () {\n\t    return this.getTypedRuleContext(ClosureContext, 0);\n\t};\n\tPredicateAtomExprContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitPredicateAtomExpr(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction RangeContext(parser, ctx) {\n\t    PrimaryContext.call(this, parser);\n\t    this.lower = null; // ExprOrTermContext;\n\t    this.upper = null; // ExprOrTermContext;\n\t    PrimaryContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tRangeContext.prototype = Object.create(PrimaryContext.prototype);\n\tRangeContext.prototype.constructor = RangeContext;\n\n\tQLParser.RangeContext = RangeContext;\n\n\tRangeContext.prototype.OBLOCK = function () {\n\t    return this.getToken(QLParser.OBLOCK, 0);\n\t};\n\n\tRangeContext.prototype.RANGE = function () {\n\t    return this.getToken(QLParser.RANGE, 0);\n\t};\n\n\tRangeContext.prototype.CBLOCK = function () {\n\t    return this.getToken(QLParser.CBLOCK, 0);\n\t};\n\n\tRangeContext.prototype.exprOrTerm = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(ExprOrTermContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExprOrTermContext, i);\n\t    }\n\t};\n\tRangeContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitRange(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction QualifiedExprContext(parser, ctx) {\n\t    PrimaryContext.call(this, parser);\n\t    PrimaryContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tQualifiedExprContext.prototype = Object.create(PrimaryContext.prototype);\n\tQualifiedExprContext.prototype.constructor = QualifiedExprContext;\n\n\tQLParser.QualifiedExprContext = QualifiedExprContext;\n\n\tQualifiedExprContext.prototype.primary = function () {\n\t    return this.getTypedRuleContext(PrimaryContext, 0);\n\t};\n\n\tQualifiedExprContext.prototype.DOT = function () {\n\t    return this.getToken(QLParser.DOT, 0);\n\t};\n\n\tQualifiedExprContext.prototype.qualifiedRhs = function () {\n\t    return this.getTypedRuleContext(QualifiedRhsContext, 0);\n\t};\n\tQualifiedExprContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitQualifiedExpr(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.prototype.primary = function (_p) {\n\t    if (_p === undefined) {\n\t        _p = 0;\n\t    }\n\t    var _parentctx = this._ctx;\n\t    var _parentState = this.state;\n\t    var localctx = new PrimaryContext(this, this._ctx, _parentState);\n\t    var _prevctx = localctx;\n\t    var _startState = 60;\n\t    this.enterRecursionRule(localctx, 60, QLParser.RULE_primary, _p);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 478;\n\t        this._errHandler.sync(this);\n\t        var la_ = this._interp.adaptivePredict(this._input, 38, this._ctx);\n\t        switch (la_) {\n\t            case 1:\n\t                localctx = new PredicateAtomExprContext(this, localctx);\n\t                this._ctx = localctx;\n\t                _prevctx = localctx;\n\n\t                this.state = 434;\n\t                this.aritylessPredicateExpr();\n\t                this.state = 436;\n\t                this._errHandler.sync(this);\n\t                _la = this._input.LA(1);\n\t                if (_la === QLParser.STAR || _la === QLParser.PLUS) {\n\t                    this.state = 435;\n\t                    this.closure();\n\t                }\n\n\t                this.state = 438;\n\t                this.match(QLParser.OPAR);\n\t                this.state = 439;\n\t                this.callArgs();\n\t                this.state = 440;\n\t                this.match(QLParser.CPAR);\n\t                break;\n\n\t            case 2:\n\t                localctx = new LitContext(this, localctx);\n\t                this._ctx = localctx;\n\t                _prevctx = localctx;\n\t                this.state = 442;\n\t                this.literal();\n\t                break;\n\n\t            case 3:\n\t                localctx = new VarContext(this, localctx);\n\t                this._ctx = localctx;\n\t                _prevctx = localctx;\n\t                this.state = 443;\n\t                this.variable();\n\t                break;\n\n\t            case 4:\n\t                localctx = new SuperContext(this, localctx);\n\t                this._ctx = localctx;\n\t                _prevctx = localctx;\n\t                this.state = 447;\n\t                this._errHandler.sync(this);\n\t                _la = this._input.LA(1);\n\t                if ((_la & ~0x1f) == 0 && (1 << _la & (1 << QLParser.BOOLEAN | 1 << QLParser.DATE | 1 << QLParser.FLOAT | 1 << QLParser.INT)) !== 0 || _la === QLParser.STRING || _la === QLParser.Lowerid || _la === QLParser.Upperid || _la === QLParser.Atlowerid) {\n\t                    this.state = 444;\n\t                    this.typeExpr();\n\t                    this.state = 445;\n\t                    this.match(QLParser.DOT);\n\t                }\n\n\t                this.state = 449;\n\t                this.match(QLParser.SUPER);\n\t                break;\n\n\t            case 5:\n\t                localctx = new AggContext(this, localctx);\n\t                this._ctx = localctx;\n\t                _prevctx = localctx;\n\t                this.state = 450;\n\t                this.aggId();\n\t                this.state = 462;\n\t                this._errHandler.sync(this);\n\t                _la = this._input.LA(1);\n\t                if (_la === QLParser.OBLOCK) {\n\t                    this.state = 451;\n\t                    this.match(QLParser.OBLOCK);\n\t                    this.state = 452;\n\t                    this.exprOrTerm(0);\n\t                    this.state = 457;\n\t                    this._errHandler.sync(this);\n\t                    _la = this._input.LA(1);\n\t                    while (_la === QLParser.COMMA) {\n\t                        this.state = 453;\n\t                        this.match(QLParser.COMMA);\n\t                        this.state = 454;\n\t                        this.exprOrTerm(0);\n\t                        this.state = 459;\n\t                        this._errHandler.sync(this);\n\t                        _la = this._input.LA(1);\n\t                    }\n\t                    this.state = 460;\n\t                    this.match(QLParser.CBLOCK);\n\t                }\n\n\t                this.state = 464;\n\t                this.match(QLParser.OPAR);\n\t                this.state = 465;\n\t                this.aggBody();\n\t                this.state = 466;\n\t                this.match(QLParser.CPAR);\n\t                break;\n\n\t            case 6:\n\t                localctx = new RangeContext(this, localctx);\n\t                this._ctx = localctx;\n\t                _prevctx = localctx;\n\t                this.state = 468;\n\t                this.match(QLParser.OBLOCK);\n\t                this.state = 469;\n\t                localctx.lower = this.exprOrTerm(0);\n\t                this.state = 470;\n\t                this.match(QLParser.RANGE);\n\t                this.state = 471;\n\t                localctx.upper = this.exprOrTerm(0);\n\t                this.state = 472;\n\t                this.match(QLParser.CBLOCK);\n\t                break;\n\n\t            case 7:\n\t                localctx = new ParExprContext(this, localctx);\n\t                this._ctx = localctx;\n\t                _prevctx = localctx;\n\t                this.state = 474;\n\t                this.match(QLParser.OPAR);\n\t                this.state = 475;\n\t                this.exprOrTerm(0);\n\t                this.state = 476;\n\t                this.match(QLParser.CPAR);\n\t                break;\n\n\t        }\n\t        this._ctx.stop = this._input.LT(-1);\n\t        this.state = 485;\n\t        this._errHandler.sync(this);\n\t        var _alt = this._interp.adaptivePredict(this._input, 39, this._ctx);\n\t        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {\n\t            if (_alt === 1) {\n\t                if (this._parseListeners !== null) {\n\t                    this.triggerExitRuleEvent();\n\t                }\n\t                _prevctx = localctx;\n\t                localctx = new QualifiedExprContext(this, new PrimaryContext(this, _parentctx, _parentState));\n\t                this.pushNewRecursionContext(localctx, _startState, QLParser.RULE_primary);\n\t                this.state = 480;\n\t                if (!this.precpred(this._ctx, 7)) {\n\t                    throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 7)\");\n\t                }\n\t                this.state = 481;\n\t                this.match(QLParser.DOT);\n\t                this.state = 482;\n\t                this.qualifiedRhs();\n\t            }\n\t            this.state = 487;\n\t            this._errHandler.sync(this);\n\t            _alt = this._interp.adaptivePredict(this._input, 39, this._ctx);\n\t        }\n\t    } catch (error) {\n\t        if (error instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = error;\n\t            this._errHandler.reportError(this, error);\n\t            this._errHandler.recover(this, error);\n\t        } else {\n\t            throw error;\n\t        }\n\t    } finally {\n\t        this.unrollRecursionContexts(_parentctx);\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction AggBodyContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_aggBody;\n\t    return this;\n\t}\n\n\tAggBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tAggBodyContext.prototype.constructor = AggBodyContext;\n\n\tAggBodyContext.prototype.copyFrom = function (ctx) {\n\t    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);\n\t};\n\n\tfunction ExprAggBodyContext(parser, ctx) {\n\t    AggBodyContext.call(this, parser);\n\t    AggBodyContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tExprAggBodyContext.prototype = Object.create(AggBodyContext.prototype);\n\tExprAggBodyContext.prototype.constructor = ExprAggBodyContext;\n\n\tQLParser.ExprAggBodyContext = ExprAggBodyContext;\n\n\tExprAggBodyContext.prototype.asExprs = function () {\n\t    return this.getTypedRuleContext(AsExprsContext, 0);\n\t};\n\n\tExprAggBodyContext.prototype.orderBys = function () {\n\t    return this.getTypedRuleContext(OrderBysContext, 0);\n\t};\n\tExprAggBodyContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitExprAggBody(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction FullAggBodyContext(parser, ctx) {\n\t    AggBodyContext.call(this, parser);\n\t    AggBodyContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tFullAggBodyContext.prototype = Object.create(AggBodyContext.prototype);\n\tFullAggBodyContext.prototype.constructor = FullAggBodyContext;\n\n\tQLParser.FullAggBodyContext = FullAggBodyContext;\n\n\tFullAggBodyContext.prototype.varDecls = function () {\n\t    return this.getTypedRuleContext(VarDeclsContext, 0);\n\t};\n\n\tFullAggBodyContext.prototype.BAR = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTokens(QLParser.BAR);\n\t    } else {\n\t        return this.getToken(QLParser.BAR, i);\n\t    }\n\t};\n\n\tFullAggBodyContext.prototype.exprOrTerm = function () {\n\t    return this.getTypedRuleContext(ExprOrTermContext, 0);\n\t};\n\n\tFullAggBodyContext.prototype.asExprs = function () {\n\t    return this.getTypedRuleContext(AsExprsContext, 0);\n\t};\n\n\tFullAggBodyContext.prototype.orderBys = function () {\n\t    return this.getTypedRuleContext(OrderBysContext, 0);\n\t};\n\tFullAggBodyContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitFullAggBody(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.AggBodyContext = AggBodyContext;\n\n\tQLParser.prototype.aggBody = function () {\n\n\t    var localctx = new AggBodyContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 62, QLParser.RULE_aggBody);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.state = 506;\n\t        this._errHandler.sync(this);\n\t        var la_ = this._interp.adaptivePredict(this._input, 45, this._ctx);\n\t        switch (la_) {\n\t            case 1:\n\t                localctx = new FullAggBodyContext(this, localctx);\n\t                this.enterOuterAlt(localctx, 1);\n\t                this.state = 488;\n\t                this.varDecls();\n\t                this.state = 500;\n\t                this._errHandler.sync(this);\n\t                _la = this._input.LA(1);\n\t                if (_la === QLParser.BAR) {\n\t                    this.state = 489;\n\t                    this.match(QLParser.BAR);\n\t                    this.state = 491;\n\t                    this._errHandler.sync(this);\n\t                    _la = this._input.LA(1);\n\t                    if ((_la & ~0x1f) == 0 && (1 << _la & (1 << QLParser.ANY | 1 << QLParser.AVG | 1 << QLParser.BOOLEAN | 1 << QLParser.COUNT | 1 << QLParser.DATE | 1 << QLParser.EXISTS | 1 << QLParser.FALSE | 1 << QLParser.FLOAT | 1 << QLParser.FORALL | 1 << QLParser.FOREX | 1 << QLParser.IF | 1 << QLParser.INT | 1 << QLParser.MAX | 1 << QLParser.MIN | 1 << QLParser.NOT | 1 << QLParser.NONE)) !== 0 || (_la - 35 & ~0x1f) == 0 && (1 << _la - 35 & (1 << QLParser.RANK - 35 | 1 << QLParser.RESULT - 35 | 1 << QLParser.STRICTCOUNT - 35 | 1 << QLParser.STRICTSUM - 35 | 1 << QLParser.STRICTCONCAT - 35 | 1 << QLParser.CONCAT - 35 | 1 << QLParser.STRING - 35 | 1 << QLParser.SUM - 35 | 1 << QLParser.SUPER - 35 | 1 << QLParser.THIS - 35 | 1 << QLParser.TRUE - 35 | 1 << QLParser.MINUS - 35 | 1 << QLParser.OPAR - 35 | 1 << QLParser.OBLOCK - 35)) !== 0 || (_la - 70 & ~0x1f) == 0 && (1 << _la - 70 & (1 << QLParser.PLUS - 70 | 1 << QLParser.Lowerid - 70 | 1 << QLParser.Upperid - 70 | 1 << QLParser.Atlowerid - 70 | 1 << QLParser.Integer - 70 | 1 << QLParser.Float - 70 | 1 << QLParser.String - 70)) !== 0) {\n\t                        this.state = 490;\n\t                        this.exprOrTerm(0);\n\t                    }\n\n\t                    this.state = 498;\n\t                    this._errHandler.sync(this);\n\t                    _la = this._input.LA(1);\n\t                    if (_la === QLParser.BAR) {\n\t                        this.state = 493;\n\t                        this.match(QLParser.BAR);\n\t                        this.state = 494;\n\t                        this.asExprs();\n\t                        this.state = 496;\n\t                        this._errHandler.sync(this);\n\t                        _la = this._input.LA(1);\n\t                        if (_la === QLParser.ORDER) {\n\t                            this.state = 495;\n\t                            this.orderBys();\n\t                        }\n\t                    }\n\t                }\n\n\t                break;\n\n\t            case 2:\n\t                localctx = new ExprAggBodyContext(this, localctx);\n\t                this.enterOuterAlt(localctx, 2);\n\t                this.state = 502;\n\t                this.asExprs();\n\t                this.state = 504;\n\t                this._errHandler.sync(this);\n\t                _la = this._input.LA(1);\n\t                if (_la === QLParser.ORDER) {\n\t                    this.state = 503;\n\t                    this.orderBys();\n\t                }\n\n\t                break;\n\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction LiteralContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_literal;\n\t    return this;\n\t}\n\n\tLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tLiteralContext.prototype.constructor = LiteralContext;\n\n\tLiteralContext.prototype.copyFrom = function (ctx) {\n\t    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);\n\t};\n\n\tfunction FloatLitContext(parser, ctx) {\n\t    LiteralContext.call(this, parser);\n\t    LiteralContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tFloatLitContext.prototype = Object.create(LiteralContext.prototype);\n\tFloatLitContext.prototype.constructor = FloatLitContext;\n\n\tQLParser.FloatLitContext = FloatLitContext;\n\n\tFloatLitContext.prototype.Float = function () {\n\t    return this.getToken(QLParser.Float, 0);\n\t};\n\tFloatLitContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitFloatLit(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction IntLitContext(parser, ctx) {\n\t    LiteralContext.call(this, parser);\n\t    LiteralContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tIntLitContext.prototype = Object.create(LiteralContext.prototype);\n\tIntLitContext.prototype.constructor = IntLitContext;\n\n\tQLParser.IntLitContext = IntLitContext;\n\n\tIntLitContext.prototype.Integer = function () {\n\t    return this.getToken(QLParser.Integer, 0);\n\t};\n\tIntLitContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitIntLit(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction BoolLitContext(parser, ctx) {\n\t    LiteralContext.call(this, parser);\n\t    LiteralContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tBoolLitContext.prototype = Object.create(LiteralContext.prototype);\n\tBoolLitContext.prototype.constructor = BoolLitContext;\n\n\tQLParser.BoolLitContext = BoolLitContext;\n\n\tBoolLitContext.prototype.bool = function () {\n\t    return this.getTypedRuleContext(BoolContext, 0);\n\t};\n\tBoolLitContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitBoolLit(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction StringLitContext(parser, ctx) {\n\t    LiteralContext.call(this, parser);\n\t    LiteralContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tStringLitContext.prototype = Object.create(LiteralContext.prototype);\n\tStringLitContext.prototype.constructor = StringLitContext;\n\n\tQLParser.StringLitContext = StringLitContext;\n\n\tStringLitContext.prototype.String = function () {\n\t    return this.getToken(QLParser.String, 0);\n\t};\n\tStringLitContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitStringLit(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.LiteralContext = LiteralContext;\n\n\tQLParser.prototype.literal = function () {\n\n\t    var localctx = new LiteralContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 64, QLParser.RULE_literal);\n\t    try {\n\t        this.state = 512;\n\t        this._errHandler.sync(this);\n\t        switch (this._input.LA(1)) {\n\t            case QLParser.Integer:\n\t                localctx = new IntLitContext(this, localctx);\n\t                this.enterOuterAlt(localctx, 1);\n\t                this.state = 508;\n\t                this.match(QLParser.Integer);\n\t                break;\n\t            case QLParser.Float:\n\t                localctx = new FloatLitContext(this, localctx);\n\t                this.enterOuterAlt(localctx, 2);\n\t                this.state = 509;\n\t                this.match(QLParser.Float);\n\t                break;\n\t            case QLParser.FALSE:\n\t            case QLParser.TRUE:\n\t                localctx = new BoolLitContext(this, localctx);\n\t                this.enterOuterAlt(localctx, 3);\n\t                this.state = 510;\n\t                this.bool();\n\t                break;\n\t            case QLParser.String:\n\t                localctx = new StringLitContext(this, localctx);\n\t                this.enterOuterAlt(localctx, 4);\n\t                this.state = 511;\n\t                this.match(QLParser.String);\n\t                break;\n\t            default:\n\t                throw new antlr4.error.NoViableAltException(this);\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction BoolContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_bool;\n\t    return this;\n\t}\n\n\tBoolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tBoolContext.prototype.constructor = BoolContext;\n\n\tBoolContext.prototype.TRUE = function () {\n\t    return this.getToken(QLParser.TRUE, 0);\n\t};\n\n\tBoolContext.prototype.FALSE = function () {\n\t    return this.getToken(QLParser.FALSE, 0);\n\t};\n\n\tBoolContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitBool(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.BoolContext = BoolContext;\n\n\tQLParser.prototype.bool = function () {\n\n\t    var localctx = new BoolContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 66, QLParser.RULE_bool);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 514;\n\t        _la = this._input.LA(1);\n\t        if (!(_la === QLParser.FALSE || _la === QLParser.TRUE)) {\n\t            this._errHandler.recoverInline(this);\n\t        } else {\n\t            this._errHandler.reportMatch(this);\n\t            this.consume();\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction VariableContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_variable;\n\t    return this;\n\t}\n\n\tVariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tVariableContext.prototype.constructor = VariableContext;\n\n\tVariableContext.prototype.THIS = function () {\n\t    return this.getToken(QLParser.THIS, 0);\n\t};\n\n\tVariableContext.prototype.RESULT = function () {\n\t    return this.getToken(QLParser.RESULT, 0);\n\t};\n\n\tVariableContext.prototype.varName = function () {\n\t    return this.getTypedRuleContext(VarNameContext, 0);\n\t};\n\n\tVariableContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitVariable(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.VariableContext = VariableContext;\n\n\tQLParser.prototype.variable = function () {\n\n\t    var localctx = new VariableContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 68, QLParser.RULE_variable);\n\t    try {\n\t        this.state = 519;\n\t        this._errHandler.sync(this);\n\t        switch (this._input.LA(1)) {\n\t            case QLParser.THIS:\n\t                this.enterOuterAlt(localctx, 1);\n\t                this.state = 516;\n\t                this.match(QLParser.THIS);\n\t                break;\n\t            case QLParser.RESULT:\n\t                this.enterOuterAlt(localctx, 2);\n\t                this.state = 517;\n\t                this.match(QLParser.RESULT);\n\t                break;\n\t            case QLParser.Lowerid:\n\t            case QLParser.Upperid:\n\t                this.enterOuterAlt(localctx, 3);\n\t                this.state = 518;\n\t                this.varName();\n\t                break;\n\t            default:\n\t                throw new antlr4.error.NoViableAltException(this);\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction CompopContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_compop;\n\t    return this;\n\t}\n\n\tCompopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tCompopContext.prototype.constructor = CompopContext;\n\n\tCompopContext.prototype.EQ = function () {\n\t    return this.getToken(QLParser.EQ, 0);\n\t};\n\n\tCompopContext.prototype.NE = function () {\n\t    return this.getToken(QLParser.NE, 0);\n\t};\n\n\tCompopContext.prototype.LT = function () {\n\t    return this.getToken(QLParser.LT, 0);\n\t};\n\n\tCompopContext.prototype.GT = function () {\n\t    return this.getToken(QLParser.GT, 0);\n\t};\n\n\tCompopContext.prototype.LE = function () {\n\t    return this.getToken(QLParser.LE, 0);\n\t};\n\n\tCompopContext.prototype.GE = function () {\n\t    return this.getToken(QLParser.GE, 0);\n\t};\n\n\tCompopContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitCompop(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.CompopContext = CompopContext;\n\n\tQLParser.prototype.compop = function () {\n\n\t    var localctx = new CompopContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 70, QLParser.RULE_compop);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 521;\n\t        _la = this._input.LA(1);\n\t        if (!((_la - 49 & ~0x1f) == 0 && (1 << _la - 49 & (1 << QLParser.LT - 49 | 1 << QLParser.LE - 49 | 1 << QLParser.EQ - 49 | 1 << QLParser.GT - 49 | 1 << QLParser.GE - 49 | 1 << QLParser.NE - 49)) !== 0)) {\n\t            this._errHandler.recoverInline(this);\n\t        } else {\n\t            this._errHandler.reportMatch(this);\n\t            this.consume();\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction UnopContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_unop;\n\t    return this;\n\t}\n\n\tUnopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tUnopContext.prototype.constructor = UnopContext;\n\n\tUnopContext.prototype.PLUS = function () {\n\t    return this.getToken(QLParser.PLUS, 0);\n\t};\n\n\tUnopContext.prototype.MINUS = function () {\n\t    return this.getToken(QLParser.MINUS, 0);\n\t};\n\n\tUnopContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitUnop(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.UnopContext = UnopContext;\n\n\tQLParser.prototype.unop = function () {\n\n\t    var localctx = new UnopContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 72, QLParser.RULE_unop);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 523;\n\t        _la = this._input.LA(1);\n\t        if (!(_la === QLParser.MINUS || _la === QLParser.PLUS)) {\n\t            this._errHandler.recoverInline(this);\n\t        } else {\n\t            this._errHandler.reportMatch(this);\n\t            this.consume();\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction MulopContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_mulop;\n\t    return this;\n\t}\n\n\tMulopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tMulopContext.prototype.constructor = MulopContext;\n\n\tMulopContext.prototype.STAR = function () {\n\t    return this.getToken(QLParser.STAR, 0);\n\t};\n\n\tMulopContext.prototype.SLASH = function () {\n\t    return this.getToken(QLParser.SLASH, 0);\n\t};\n\n\tMulopContext.prototype.MOD = function () {\n\t    return this.getToken(QLParser.MOD, 0);\n\t};\n\n\tMulopContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitMulop(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.MulopContext = MulopContext;\n\n\tQLParser.prototype.mulop = function () {\n\n\t    var localctx = new MulopContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 74, QLParser.RULE_mulop);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 525;\n\t        _la = this._input.LA(1);\n\t        if (!((_la - 59 & ~0x1f) == 0 && (1 << _la - 59 & (1 << QLParser.SLASH - 59 | 1 << QLParser.STAR - 59 | 1 << QLParser.MOD - 59)) !== 0)) {\n\t            this._errHandler.recoverInline(this);\n\t        } else {\n\t            this._errHandler.reportMatch(this);\n\t            this.consume();\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction AddopContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_addop;\n\t    return this;\n\t}\n\n\tAddopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tAddopContext.prototype.constructor = AddopContext;\n\n\tAddopContext.prototype.PLUS = function () {\n\t    return this.getToken(QLParser.PLUS, 0);\n\t};\n\n\tAddopContext.prototype.MINUS = function () {\n\t    return this.getToken(QLParser.MINUS, 0);\n\t};\n\n\tAddopContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitAddop(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.AddopContext = AddopContext;\n\n\tQLParser.prototype.addop = function () {\n\n\t    var localctx = new AddopContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 76, QLParser.RULE_addop);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 527;\n\t        _la = this._input.LA(1);\n\t        if (!(_la === QLParser.MINUS || _la === QLParser.PLUS)) {\n\t            this._errHandler.recoverInline(this);\n\t        } else {\n\t            this._errHandler.reportMatch(this);\n\t            this.consume();\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction ClosureContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_closure;\n\t    return this;\n\t}\n\n\tClosureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tClosureContext.prototype.constructor = ClosureContext;\n\n\tClosureContext.prototype.STAR = function () {\n\t    return this.getToken(QLParser.STAR, 0);\n\t};\n\n\tClosureContext.prototype.PLUS = function () {\n\t    return this.getToken(QLParser.PLUS, 0);\n\t};\n\n\tClosureContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitClosure(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.ClosureContext = ClosureContext;\n\n\tQLParser.prototype.closure = function () {\n\n\t    var localctx = new ClosureContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 78, QLParser.RULE_closure);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 529;\n\t        _la = this._input.LA(1);\n\t        if (!(_la === QLParser.STAR || _la === QLParser.PLUS)) {\n\t            this._errHandler.recoverInline(this);\n\t        } else {\n\t            this._errHandler.reportMatch(this);\n\t            this.consume();\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction DirectionContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_direction;\n\t    return this;\n\t}\n\n\tDirectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tDirectionContext.prototype.constructor = DirectionContext;\n\n\tDirectionContext.prototype.ASC = function () {\n\t    return this.getToken(QLParser.ASC, 0);\n\t};\n\n\tDirectionContext.prototype.DESC = function () {\n\t    return this.getToken(QLParser.DESC, 0);\n\t};\n\n\tDirectionContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitDirection(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.DirectionContext = DirectionContext;\n\n\tQLParser.prototype.direction = function () {\n\n\t    var localctx = new DirectionContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 80, QLParser.RULE_direction);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 531;\n\t        _la = this._input.LA(1);\n\t        if (!(_la === QLParser.ASC || _la === QLParser.DESC)) {\n\t            this._errHandler.recoverInline(this);\n\t        } else {\n\t            this._errHandler.reportMatch(this);\n\t            this.consume();\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction VarDeclsContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_varDecls;\n\t    return this;\n\t}\n\n\tVarDeclsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tVarDeclsContext.prototype.constructor = VarDeclsContext;\n\n\tVarDeclsContext.prototype.varDecl = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(VarDeclContext);\n\t    } else {\n\t        return this.getTypedRuleContext(VarDeclContext, i);\n\t    }\n\t};\n\n\tVarDeclsContext.prototype.COMMA = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTokens(QLParser.COMMA);\n\t    } else {\n\t        return this.getToken(QLParser.COMMA, i);\n\t    }\n\t};\n\n\tVarDeclsContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitVarDecls(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.VarDeclsContext = VarDeclsContext;\n\n\tQLParser.prototype.varDecls = function () {\n\n\t    var localctx = new VarDeclsContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 82, QLParser.RULE_varDecls);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 541;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if ((_la & ~0x1f) == 0 && (1 << _la & (1 << QLParser.BOOLEAN | 1 << QLParser.DATE | 1 << QLParser.FLOAT | 1 << QLParser.INT)) !== 0 || _la === QLParser.STRING || _la === QLParser.Lowerid || _la === QLParser.Upperid || _la === QLParser.Atlowerid) {\n\t            this.state = 533;\n\t            this.varDecl();\n\t            this.state = 538;\n\t            this._errHandler.sync(this);\n\t            _la = this._input.LA(1);\n\t            while (_la === QLParser.COMMA) {\n\t                this.state = 534;\n\t                this.match(QLParser.COMMA);\n\t                this.state = 535;\n\t                this.varDecl();\n\t                this.state = 540;\n\t                this._errHandler.sync(this);\n\t                _la = this._input.LA(1);\n\t            }\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction VarDeclContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_varDecl;\n\t    return this;\n\t}\n\n\tVarDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tVarDeclContext.prototype.constructor = VarDeclContext;\n\n\tVarDeclContext.prototype.typeExpr = function () {\n\t    return this.getTypedRuleContext(TypeExprContext, 0);\n\t};\n\n\tVarDeclContext.prototype.varName = function () {\n\t    return this.getTypedRuleContext(VarNameContext, 0);\n\t};\n\n\tVarDeclContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitVarDecl(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.VarDeclContext = VarDeclContext;\n\n\tQLParser.prototype.varDecl = function () {\n\n\t    var localctx = new VarDeclContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 84, QLParser.RULE_varDecl);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 543;\n\t        this.typeExpr();\n\t        this.state = 544;\n\t        this.varName();\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction AsExprsContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_asExprs;\n\t    return this;\n\t}\n\n\tAsExprsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tAsExprsContext.prototype.constructor = AsExprsContext;\n\n\tAsExprsContext.prototype.asExpr = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(AsExprContext);\n\t    } else {\n\t        return this.getTypedRuleContext(AsExprContext, i);\n\t    }\n\t};\n\n\tAsExprsContext.prototype.COMMA = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTokens(QLParser.COMMA);\n\t    } else {\n\t        return this.getToken(QLParser.COMMA, i);\n\t    }\n\t};\n\n\tAsExprsContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitAsExprs(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.AsExprsContext = AsExprsContext;\n\n\tQLParser.prototype.asExprs = function () {\n\n\t    var localctx = new AsExprsContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 86, QLParser.RULE_asExprs);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 546;\n\t        this.asExpr();\n\t        this.state = 551;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        while (_la === QLParser.COMMA) {\n\t            this.state = 547;\n\t            this.match(QLParser.COMMA);\n\t            this.state = 548;\n\t            this.asExpr();\n\t            this.state = 553;\n\t            this._errHandler.sync(this);\n\t            _la = this._input.LA(1);\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction AsExprContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_asExpr;\n\t    return this;\n\t}\n\n\tAsExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tAsExprContext.prototype.constructor = AsExprContext;\n\n\tAsExprContext.prototype.exprOrTerm = function () {\n\t    return this.getTypedRuleContext(ExprOrTermContext, 0);\n\t};\n\n\tAsExprContext.prototype.AS = function () {\n\t    return this.getToken(QLParser.AS, 0);\n\t};\n\n\tAsExprContext.prototype.simpleId = function () {\n\t    return this.getTypedRuleContext(SimpleIdContext, 0);\n\t};\n\n\tAsExprContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitAsExpr(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.AsExprContext = AsExprContext;\n\n\tQLParser.prototype.asExpr = function () {\n\n\t    var localctx = new AsExprContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 88, QLParser.RULE_asExpr);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 554;\n\t        this.exprOrTerm(0);\n\t        this.state = 557;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if (_la === QLParser.AS) {\n\t            this.state = 555;\n\t            this.match(QLParser.AS);\n\t            this.state = 556;\n\t            this.simpleId();\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction OrderBysContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_orderBys;\n\t    return this;\n\t}\n\n\tOrderBysContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tOrderBysContext.prototype.constructor = OrderBysContext;\n\n\tOrderBysContext.prototype.ORDER = function () {\n\t    return this.getToken(QLParser.ORDER, 0);\n\t};\n\n\tOrderBysContext.prototype.BY = function () {\n\t    return this.getToken(QLParser.BY, 0);\n\t};\n\n\tOrderBysContext.prototype.orderBy = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(OrderByContext);\n\t    } else {\n\t        return this.getTypedRuleContext(OrderByContext, i);\n\t    }\n\t};\n\n\tOrderBysContext.prototype.COMMA = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTokens(QLParser.COMMA);\n\t    } else {\n\t        return this.getToken(QLParser.COMMA, i);\n\t    }\n\t};\n\n\tOrderBysContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitOrderBys(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.OrderBysContext = OrderBysContext;\n\n\tQLParser.prototype.orderBys = function () {\n\n\t    var localctx = new OrderBysContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 90, QLParser.RULE_orderBys);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 559;\n\t        this.match(QLParser.ORDER);\n\t        this.state = 560;\n\t        this.match(QLParser.BY);\n\t        this.state = 561;\n\t        this.orderBy();\n\t        this.state = 566;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        while (_la === QLParser.COMMA) {\n\t            this.state = 562;\n\t            this.match(QLParser.COMMA);\n\t            this.state = 563;\n\t            this.orderBy();\n\t            this.state = 568;\n\t            this._errHandler.sync(this);\n\t            _la = this._input.LA(1);\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction OrderByContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_orderBy;\n\t    return this;\n\t}\n\n\tOrderByContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tOrderByContext.prototype.constructor = OrderByContext;\n\n\tOrderByContext.prototype.exprOrTerm = function () {\n\t    return this.getTypedRuleContext(ExprOrTermContext, 0);\n\t};\n\n\tOrderByContext.prototype.direction = function () {\n\t    return this.getTypedRuleContext(DirectionContext, 0);\n\t};\n\n\tOrderByContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitOrderBy(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.OrderByContext = OrderByContext;\n\n\tQLParser.prototype.orderBy = function () {\n\n\t    var localctx = new OrderByContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 92, QLParser.RULE_orderBy);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 569;\n\t        this.exprOrTerm(0);\n\t        this.state = 571;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if (_la === QLParser.ASC || _la === QLParser.DESC) {\n\t            this.state = 570;\n\t            this.direction();\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction QldocContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_qldoc;\n\t    return this;\n\t}\n\n\tQldocContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tQldocContext.prototype.constructor = QldocContext;\n\n\tQldocContext.prototype.StartQLDoc = function () {\n\t    return this.getToken(QLParser.StartQLDoc, 0);\n\t};\n\n\tQldocContext.prototype.EndQLDoc = function () {\n\t    return this.getToken(QLParser.EndQLDoc, 0);\n\t};\n\n\tQldocContext.prototype.qldocSegment = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(QldocSegmentContext);\n\t    } else {\n\t        return this.getTypedRuleContext(QldocSegmentContext, i);\n\t    }\n\t};\n\n\tQldocContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitQldoc(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.QldocContext = QldocContext;\n\n\tQLParser.prototype.qldoc = function () {\n\n\t    var localctx = new QldocContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 94, QLParser.RULE_qldoc);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 573;\n\t        this.match(QLParser.StartQLDoc);\n\t        this.state = 577;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        while (_la === QLParser.CONTENT) {\n\t            this.state = 574;\n\t            this.qldocSegment();\n\t            this.state = 579;\n\t            this._errHandler.sync(this);\n\t            _la = this._input.LA(1);\n\t        }\n\t        this.state = 580;\n\t        this.match(QLParser.EndQLDoc);\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction QldocSegmentContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_qldocSegment;\n\t    return this;\n\t}\n\n\tQldocSegmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tQldocSegmentContext.prototype.constructor = QldocSegmentContext;\n\n\tQldocSegmentContext.prototype.copyFrom = function (ctx) {\n\t    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);\n\t};\n\n\tfunction QLDocTextSegmentContext(parser, ctx) {\n\t    QldocSegmentContext.call(this, parser);\n\t    QldocSegmentContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tQLDocTextSegmentContext.prototype = Object.create(QldocSegmentContext.prototype);\n\tQLDocTextSegmentContext.prototype.constructor = QLDocTextSegmentContext;\n\n\tQLParser.QLDocTextSegmentContext = QLDocTextSegmentContext;\n\n\tQLDocTextSegmentContext.prototype.CONTENT = function () {\n\t    return this.getToken(QLParser.CONTENT, 0);\n\t};\n\tQLDocTextSegmentContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitQLDocTextSegment(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.QldocSegmentContext = QldocSegmentContext;\n\n\tQLParser.prototype.qldocSegment = function () {\n\n\t    var localctx = new QldocSegmentContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 96, QLParser.RULE_qldocSegment);\n\t    try {\n\t        localctx = new QLDocTextSegmentContext(this, localctx);\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 582;\n\t        this.match(QLParser.CONTENT);\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction SimpleIdContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_simpleId;\n\t    return this;\n\t}\n\n\tSimpleIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tSimpleIdContext.prototype.constructor = SimpleIdContext;\n\n\tSimpleIdContext.prototype.Lowerid = function () {\n\t    return this.getToken(QLParser.Lowerid, 0);\n\t};\n\n\tSimpleIdContext.prototype.Upperid = function () {\n\t    return this.getToken(QLParser.Upperid, 0);\n\t};\n\n\tSimpleIdContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitSimpleId(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.SimpleIdContext = SimpleIdContext;\n\n\tQLParser.prototype.simpleId = function () {\n\n\t    var localctx = new SimpleIdContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 98, QLParser.RULE_simpleId);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 584;\n\t        _la = this._input.LA(1);\n\t        if (!(_la === QLParser.Lowerid || _la === QLParser.Upperid)) {\n\t            this._errHandler.recoverInline(this);\n\t        } else {\n\t            this._errHandler.reportMatch(this);\n\t            this.consume();\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction LiteralIdContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_literalId;\n\t    return this;\n\t}\n\n\tLiteralIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tLiteralIdContext.prototype.constructor = LiteralIdContext;\n\n\tLiteralIdContext.prototype.Lowerid = function () {\n\t    return this.getToken(QLParser.Lowerid, 0);\n\t};\n\n\tLiteralIdContext.prototype.Atlowerid = function () {\n\t    return this.getToken(QLParser.Atlowerid, 0);\n\t};\n\n\tLiteralIdContext.prototype.Upperid = function () {\n\t    return this.getToken(QLParser.Upperid, 0);\n\t};\n\n\tLiteralIdContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitLiteralId(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.LiteralIdContext = LiteralIdContext;\n\n\tQLParser.prototype.literalId = function () {\n\n\t    var localctx = new LiteralIdContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 100, QLParser.RULE_literalId);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 586;\n\t        _la = this._input.LA(1);\n\t        if (!((_la - 73 & ~0x1f) == 0 && (1 << _la - 73 & (1 << QLParser.Lowerid - 73 | 1 << QLParser.Upperid - 73 | 1 << QLParser.Atlowerid - 73)) !== 0)) {\n\t            this._errHandler.recoverInline(this);\n\t        } else {\n\t            this._errHandler.reportMatch(this);\n\t            this.consume();\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction AnnotationContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_annotation;\n\t    return this;\n\t}\n\n\tAnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tAnnotationContext.prototype.constructor = AnnotationContext;\n\n\tAnnotationContext.prototype.copyFrom = function (ctx) {\n\t    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);\n\t};\n\n\tfunction SimpleAnnotationContext(parser, ctx) {\n\t    AnnotationContext.call(this, parser);\n\t    this.name = null; // AnnotNameContext;\n\t    AnnotationContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tSimpleAnnotationContext.prototype = Object.create(AnnotationContext.prototype);\n\tSimpleAnnotationContext.prototype.constructor = SimpleAnnotationContext;\n\n\tQLParser.SimpleAnnotationContext = SimpleAnnotationContext;\n\n\tSimpleAnnotationContext.prototype.annotName = function () {\n\t    return this.getTypedRuleContext(AnnotNameContext, 0);\n\t};\n\tSimpleAnnotationContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitSimpleAnnotation(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tfunction ArgsAnnotationContext(parser, ctx) {\n\t    AnnotationContext.call(this, parser);\n\t    this.name = null; // AnnotNameContext;\n\t    this._annotArg = null; // AnnotArgContext;\n\t    this.args = []; // of AnnotArgContexts;\n\t    AnnotationContext.prototype.copyFrom.call(this, ctx);\n\t    return this;\n\t}\n\n\tArgsAnnotationContext.prototype = Object.create(AnnotationContext.prototype);\n\tArgsAnnotationContext.prototype.constructor = ArgsAnnotationContext;\n\n\tQLParser.ArgsAnnotationContext = ArgsAnnotationContext;\n\n\tArgsAnnotationContext.prototype.OBLOCK = function () {\n\t    return this.getToken(QLParser.OBLOCK, 0);\n\t};\n\n\tArgsAnnotationContext.prototype.CBLOCK = function () {\n\t    return this.getToken(QLParser.CBLOCK, 0);\n\t};\n\n\tArgsAnnotationContext.prototype.annotName = function () {\n\t    return this.getTypedRuleContext(AnnotNameContext, 0);\n\t};\n\n\tArgsAnnotationContext.prototype.annotArg = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(AnnotArgContext);\n\t    } else {\n\t        return this.getTypedRuleContext(AnnotArgContext, i);\n\t    }\n\t};\n\n\tArgsAnnotationContext.prototype.COMMA = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTokens(QLParser.COMMA);\n\t    } else {\n\t        return this.getToken(QLParser.COMMA, i);\n\t    }\n\t};\n\n\tArgsAnnotationContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitArgsAnnotation(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.AnnotationContext = AnnotationContext;\n\n\tQLParser.prototype.annotation = function () {\n\n\t    var localctx = new AnnotationContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 102, QLParser.RULE_annotation);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.state = 601;\n\t        this._errHandler.sync(this);\n\t        var la_ = this._interp.adaptivePredict(this._input, 56, this._ctx);\n\t        switch (la_) {\n\t            case 1:\n\t                localctx = new SimpleAnnotationContext(this, localctx);\n\t                this.enterOuterAlt(localctx, 1);\n\t                this.state = 588;\n\t                localctx.name = this.annotName();\n\t                break;\n\n\t            case 2:\n\t                localctx = new ArgsAnnotationContext(this, localctx);\n\t                this.enterOuterAlt(localctx, 2);\n\t                this.state = 589;\n\t                localctx.name = this.annotName();\n\t                this.state = 590;\n\t                this.match(QLParser.OBLOCK);\n\t                this.state = 591;\n\t                localctx._annotArg = this.annotArg();\n\t                localctx.args.push(localctx._annotArg);\n\t                this.state = 596;\n\t                this._errHandler.sync(this);\n\t                _la = this._input.LA(1);\n\t                while (_la === QLParser.COMMA) {\n\t                    this.state = 592;\n\t                    this.match(QLParser.COMMA);\n\t                    this.state = 593;\n\t                    localctx._annotArg = this.annotArg();\n\t                    localctx.args.push(localctx._annotArg);\n\t                    this.state = 598;\n\t                    this._errHandler.sync(this);\n\t                    _la = this._input.LA(1);\n\t                }\n\t                this.state = 599;\n\t                this.match(QLParser.CBLOCK);\n\t                break;\n\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction AnnotNameContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_annotName;\n\t    return this;\n\t}\n\n\tAnnotNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tAnnotNameContext.prototype.constructor = AnnotNameContext;\n\n\tAnnotNameContext.prototype.Lowerid = function () {\n\t    return this.getToken(QLParser.Lowerid, 0);\n\t};\n\n\tAnnotNameContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitAnnotName(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.AnnotNameContext = AnnotNameContext;\n\n\tQLParser.prototype.annotName = function () {\n\n\t    var localctx = new AnnotNameContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 104, QLParser.RULE_annotName);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 603;\n\t        this.match(QLParser.Lowerid);\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction AnnotArgContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_annotArg;\n\t    return this;\n\t}\n\n\tAnnotArgContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tAnnotArgContext.prototype.constructor = AnnotArgContext;\n\n\tAnnotArgContext.prototype.simpleId = function () {\n\t    return this.getTypedRuleContext(SimpleIdContext, 0);\n\t};\n\n\tAnnotArgContext.prototype.THIS = function () {\n\t    return this.getToken(QLParser.THIS, 0);\n\t};\n\n\tAnnotArgContext.prototype.RESULT = function () {\n\t    return this.getToken(QLParser.RESULT, 0);\n\t};\n\n\tAnnotArgContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitAnnotArg(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.AnnotArgContext = AnnotArgContext;\n\n\tQLParser.prototype.annotArg = function () {\n\n\t    var localctx = new AnnotArgContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 106, QLParser.RULE_annotArg);\n\t    try {\n\t        this.state = 608;\n\t        this._errHandler.sync(this);\n\t        switch (this._input.LA(1)) {\n\t            case QLParser.Lowerid:\n\t            case QLParser.Upperid:\n\t                this.enterOuterAlt(localctx, 1);\n\t                this.state = 605;\n\t                this.simpleId();\n\t                break;\n\t            case QLParser.THIS:\n\t                this.enterOuterAlt(localctx, 2);\n\t                this.state = 606;\n\t                this.match(QLParser.THIS);\n\t                break;\n\t            case QLParser.RESULT:\n\t                this.enterOuterAlt(localctx, 3);\n\t                this.state = 607;\n\t                this.match(QLParser.RESULT);\n\t                break;\n\t            default:\n\t                throw new antlr4.error.NoViableAltException(this);\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction ModuleNameContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_moduleName;\n\t    return this;\n\t}\n\n\tModuleNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tModuleNameContext.prototype.constructor = ModuleNameContext;\n\n\tModuleNameContext.prototype.simpleId = function () {\n\t    return this.getTypedRuleContext(SimpleIdContext, 0);\n\t};\n\n\tModuleNameContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitModuleName(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.ModuleNameContext = ModuleNameContext;\n\n\tQLParser.prototype.moduleName = function () {\n\n\t    var localctx = new ModuleNameContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 108, QLParser.RULE_moduleName);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 610;\n\t        this.simpleId();\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction QualModuleExprContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_qualModuleExpr;\n\t    return this;\n\t}\n\n\tQualModuleExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tQualModuleExprContext.prototype.constructor = QualModuleExprContext;\n\n\tQualModuleExprContext.prototype.simpleId = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(SimpleIdContext);\n\t    } else {\n\t        return this.getTypedRuleContext(SimpleIdContext, i);\n\t    }\n\t};\n\n\tQualModuleExprContext.prototype.DOT = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTokens(QLParser.DOT);\n\t    } else {\n\t        return this.getToken(QLParser.DOT, i);\n\t    }\n\t};\n\n\tQualModuleExprContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitQualModuleExpr(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.QualModuleExprContext = QualModuleExprContext;\n\n\tQLParser.prototype.qualModuleExpr = function () {\n\n\t    var localctx = new QualModuleExprContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 110, QLParser.RULE_qualModuleExpr);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 612;\n\t        this.simpleId();\n\t        this.state = 617;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        while (_la === QLParser.DOT) {\n\t            this.state = 613;\n\t            this.match(QLParser.DOT);\n\t            this.state = 614;\n\t            this.simpleId();\n\t            this.state = 619;\n\t            this._errHandler.sync(this);\n\t            _la = this._input.LA(1);\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction ImportModuleExprContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_importModuleExpr;\n\t    return this;\n\t}\n\n\tImportModuleExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tImportModuleExprContext.prototype.constructor = ImportModuleExprContext;\n\n\tImportModuleExprContext.prototype.qualModuleExpr = function () {\n\t    return this.getTypedRuleContext(QualModuleExprContext, 0);\n\t};\n\n\tImportModuleExprContext.prototype.SELECTION = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTokens(QLParser.SELECTION);\n\t    } else {\n\t        return this.getToken(QLParser.SELECTION, i);\n\t    }\n\t};\n\n\tImportModuleExprContext.prototype.simpleId = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(SimpleIdContext);\n\t    } else {\n\t        return this.getTypedRuleContext(SimpleIdContext, i);\n\t    }\n\t};\n\n\tImportModuleExprContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitImportModuleExpr(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.ImportModuleExprContext = ImportModuleExprContext;\n\n\tQLParser.prototype.importModuleExpr = function () {\n\n\t    var localctx = new ImportModuleExprContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 112, QLParser.RULE_importModuleExpr);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 620;\n\t        this.qualModuleExpr();\n\t        this.state = 625;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        while (_la === QLParser.SELECTION) {\n\t            this.state = 621;\n\t            this.match(QLParser.SELECTION);\n\t            this.state = 622;\n\t            this.simpleId();\n\t            this.state = 627;\n\t            this._errHandler.sync(this);\n\t            _la = this._input.LA(1);\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction ModuleExprContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_moduleExpr;\n\t    return this;\n\t}\n\n\tModuleExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tModuleExprContext.prototype.constructor = ModuleExprContext;\n\n\tModuleExprContext.prototype.simpleId = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTypedRuleContexts(SimpleIdContext);\n\t    } else {\n\t        return this.getTypedRuleContext(SimpleIdContext, i);\n\t    }\n\t};\n\n\tModuleExprContext.prototype.SELECTION = function (i) {\n\t    if (i === undefined) {\n\t        i = null;\n\t    }\n\t    if (i === null) {\n\t        return this.getTokens(QLParser.SELECTION);\n\t    } else {\n\t        return this.getToken(QLParser.SELECTION, i);\n\t    }\n\t};\n\n\tModuleExprContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitModuleExpr(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.ModuleExprContext = ModuleExprContext;\n\n\tQLParser.prototype.moduleExpr = function () {\n\n\t    var localctx = new ModuleExprContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 114, QLParser.RULE_moduleExpr);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 628;\n\t        this.simpleId();\n\t        this.state = 633;\n\t        this._errHandler.sync(this);\n\t        var _alt = this._interp.adaptivePredict(this._input, 60, this._ctx);\n\t        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {\n\t            if (_alt === 1) {\n\t                this.state = 629;\n\t                this.match(QLParser.SELECTION);\n\t                this.state = 630;\n\t                this.simpleId();\n\t            }\n\t            this.state = 635;\n\t            this._errHandler.sync(this);\n\t            _alt = this._interp.adaptivePredict(this._input, 60, this._ctx);\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction TypeLiteralContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_typeLiteral;\n\t    return this;\n\t}\n\n\tTypeLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tTypeLiteralContext.prototype.constructor = TypeLiteralContext;\n\n\tTypeLiteralContext.prototype.Atlowerid = function () {\n\t    return this.getToken(QLParser.Atlowerid, 0);\n\t};\n\n\tTypeLiteralContext.prototype.BOOLEAN = function () {\n\t    return this.getToken(QLParser.BOOLEAN, 0);\n\t};\n\n\tTypeLiteralContext.prototype.DATE = function () {\n\t    return this.getToken(QLParser.DATE, 0);\n\t};\n\n\tTypeLiteralContext.prototype.FLOAT = function () {\n\t    return this.getToken(QLParser.FLOAT, 0);\n\t};\n\n\tTypeLiteralContext.prototype.INT = function () {\n\t    return this.getToken(QLParser.INT, 0);\n\t};\n\n\tTypeLiteralContext.prototype.STRING = function () {\n\t    return this.getToken(QLParser.STRING, 0);\n\t};\n\n\tTypeLiteralContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitTypeLiteral(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.TypeLiteralContext = TypeLiteralContext;\n\n\tQLParser.prototype.typeLiteral = function () {\n\n\t    var localctx = new TypeLiteralContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 116, QLParser.RULE_typeLiteral);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 636;\n\t        _la = this._input.LA(1);\n\t        if (!((_la & ~0x1f) == 0 && (1 << _la & (1 << QLParser.BOOLEAN | 1 << QLParser.DATE | 1 << QLParser.FLOAT | 1 << QLParser.INT)) !== 0 || _la === QLParser.STRING || _la === QLParser.Atlowerid)) {\n\t            this._errHandler.recoverInline(this);\n\t        } else {\n\t            this._errHandler.reportMatch(this);\n\t            this.consume();\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction ClassNameContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_className;\n\t    return this;\n\t}\n\n\tClassNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tClassNameContext.prototype.constructor = ClassNameContext;\n\n\tClassNameContext.prototype.Upperid = function () {\n\t    return this.getToken(QLParser.Upperid, 0);\n\t};\n\n\tClassNameContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitClassName(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.ClassNameContext = ClassNameContext;\n\n\tQLParser.prototype.className = function () {\n\n\t    var localctx = new ClassNameContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 118, QLParser.RULE_className);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 638;\n\t        this.match(QLParser.Upperid);\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction DbtypeContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_dbtype;\n\t    return this;\n\t}\n\n\tDbtypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tDbtypeContext.prototype.constructor = DbtypeContext;\n\n\tDbtypeContext.prototype.Atlowerid = function () {\n\t    return this.getToken(QLParser.Atlowerid, 0);\n\t};\n\n\tDbtypeContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitDbtype(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.DbtypeContext = DbtypeContext;\n\n\tQLParser.prototype.dbtype = function () {\n\n\t    var localctx = new DbtypeContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 120, QLParser.RULE_dbtype);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 640;\n\t        this.match(QLParser.Atlowerid);\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction ReturnTypeContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_returnType;\n\t    return this;\n\t}\n\n\tReturnTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tReturnTypeContext.prototype.constructor = ReturnTypeContext;\n\n\tReturnTypeContext.prototype.PREDICATE = function () {\n\t    return this.getToken(QLParser.PREDICATE, 0);\n\t};\n\n\tReturnTypeContext.prototype.typeExpr = function () {\n\t    return this.getTypedRuleContext(TypeExprContext, 0);\n\t};\n\n\tReturnTypeContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitReturnType(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.ReturnTypeContext = ReturnTypeContext;\n\n\tQLParser.prototype.returnType = function () {\n\n\t    var localctx = new ReturnTypeContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 122, QLParser.RULE_returnType);\n\t    try {\n\t        this.state = 644;\n\t        this._errHandler.sync(this);\n\t        switch (this._input.LA(1)) {\n\t            case QLParser.PREDICATE:\n\t                this.enterOuterAlt(localctx, 1);\n\t                this.state = 642;\n\t                this.match(QLParser.PREDICATE);\n\t                break;\n\t            case QLParser.BOOLEAN:\n\t            case QLParser.DATE:\n\t            case QLParser.FLOAT:\n\t            case QLParser.INT:\n\t            case QLParser.STRING:\n\t            case QLParser.Lowerid:\n\t            case QLParser.Upperid:\n\t            case QLParser.Atlowerid:\n\t                this.enterOuterAlt(localctx, 2);\n\t                this.state = 643;\n\t                this.typeExpr();\n\t                break;\n\t            default:\n\t                throw new antlr4.error.NoViableAltException(this);\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction TypeExprContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_typeExpr;\n\t    return this;\n\t}\n\n\tTypeExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tTypeExprContext.prototype.constructor = TypeExprContext;\n\n\tTypeExprContext.prototype.Upperid = function () {\n\t    return this.getToken(QLParser.Upperid, 0);\n\t};\n\n\tTypeExprContext.prototype.moduleExpr = function () {\n\t    return this.getTypedRuleContext(ModuleExprContext, 0);\n\t};\n\n\tTypeExprContext.prototype.SELECTION = function () {\n\t    return this.getToken(QLParser.SELECTION, 0);\n\t};\n\n\tTypeExprContext.prototype.typeLiteral = function () {\n\t    return this.getTypedRuleContext(TypeLiteralContext, 0);\n\t};\n\n\tTypeExprContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitTypeExpr(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.TypeExprContext = TypeExprContext;\n\n\tQLParser.prototype.typeExpr = function () {\n\n\t    var localctx = new TypeExprContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 124, QLParser.RULE_typeExpr);\n\t    try {\n\t        this.state = 653;\n\t        this._errHandler.sync(this);\n\t        switch (this._input.LA(1)) {\n\t            case QLParser.Lowerid:\n\t            case QLParser.Upperid:\n\t                this.enterOuterAlt(localctx, 1);\n\t                this.state = 649;\n\t                this._errHandler.sync(this);\n\t                var la_ = this._interp.adaptivePredict(this._input, 62, this._ctx);\n\t                if (la_ === 1) {\n\t                    this.state = 646;\n\t                    this.moduleExpr();\n\t                    this.state = 647;\n\t                    this.match(QLParser.SELECTION);\n\t                }\n\t                this.state = 651;\n\t                this.match(QLParser.Upperid);\n\t                break;\n\t            case QLParser.BOOLEAN:\n\t            case QLParser.DATE:\n\t            case QLParser.FLOAT:\n\t            case QLParser.INT:\n\t            case QLParser.STRING:\n\t            case QLParser.Atlowerid:\n\t                this.enterOuterAlt(localctx, 2);\n\t                this.state = 652;\n\t                this.typeLiteral();\n\t                break;\n\t            default:\n\t                throw new antlr4.error.NoViableAltException(this);\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction PredicateNameContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_predicateName;\n\t    return this;\n\t}\n\n\tPredicateNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tPredicateNameContext.prototype.constructor = PredicateNameContext;\n\n\tPredicateNameContext.prototype.Lowerid = function () {\n\t    return this.getToken(QLParser.Lowerid, 0);\n\t};\n\n\tPredicateNameContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitPredicateName(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.PredicateNameContext = PredicateNameContext;\n\n\tQLParser.prototype.predicateName = function () {\n\n\t    var localctx = new PredicateNameContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 126, QLParser.RULE_predicateName);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 655;\n\t        this.match(QLParser.Lowerid);\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction AritylessPredicateExprContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_aritylessPredicateExpr;\n\t    return this;\n\t}\n\n\tAritylessPredicateExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tAritylessPredicateExprContext.prototype.constructor = AritylessPredicateExprContext;\n\n\tAritylessPredicateExprContext.prototype.literalId = function () {\n\t    return this.getTypedRuleContext(LiteralIdContext, 0);\n\t};\n\n\tAritylessPredicateExprContext.prototype.moduleExpr = function () {\n\t    return this.getTypedRuleContext(ModuleExprContext, 0);\n\t};\n\n\tAritylessPredicateExprContext.prototype.SELECTION = function () {\n\t    return this.getToken(QLParser.SELECTION, 0);\n\t};\n\n\tAritylessPredicateExprContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitAritylessPredicateExpr(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.AritylessPredicateExprContext = AritylessPredicateExprContext;\n\n\tQLParser.prototype.aritylessPredicateExpr = function () {\n\n\t    var localctx = new AritylessPredicateExprContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 128, QLParser.RULE_aritylessPredicateExpr);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 660;\n\t        this._errHandler.sync(this);\n\t        var la_ = this._interp.adaptivePredict(this._input, 64, this._ctx);\n\t        if (la_ === 1) {\n\t            this.state = 657;\n\t            this.moduleExpr();\n\t            this.state = 658;\n\t            this.match(QLParser.SELECTION);\n\t        }\n\t        this.state = 662;\n\t        this.literalId();\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction PredicateExprContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_predicateExpr;\n\t    return this;\n\t}\n\n\tPredicateExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tPredicateExprContext.prototype.constructor = PredicateExprContext;\n\n\tPredicateExprContext.prototype.aritylessPredicateExpr = function () {\n\t    return this.getTypedRuleContext(AritylessPredicateExprContext, 0);\n\t};\n\n\tPredicateExprContext.prototype.SLASH = function () {\n\t    return this.getToken(QLParser.SLASH, 0);\n\t};\n\n\tPredicateExprContext.prototype.Integer = function () {\n\t    return this.getToken(QLParser.Integer, 0);\n\t};\n\n\tPredicateExprContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitPredicateExpr(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.PredicateExprContext = PredicateExprContext;\n\n\tQLParser.prototype.predicateExpr = function () {\n\n\t    var localctx = new PredicateExprContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 130, QLParser.RULE_predicateExpr);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 664;\n\t        this.aritylessPredicateExpr();\n\t        this.state = 665;\n\t        this.match(QLParser.SLASH);\n\t        this.state = 666;\n\t        this.match(QLParser.Integer);\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction VarNameContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_varName;\n\t    return this;\n\t}\n\n\tVarNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tVarNameContext.prototype.constructor = VarNameContext;\n\n\tVarNameContext.prototype.simpleId = function () {\n\t    return this.getTypedRuleContext(SimpleIdContext, 0);\n\t};\n\n\tVarNameContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitVarName(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.VarNameContext = VarNameContext;\n\n\tQLParser.prototype.varName = function () {\n\n\t    var localctx = new VarNameContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 132, QLParser.RULE_varName);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 668;\n\t        this.simpleId();\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tfunction AggIdContext(parser, parent, invokingState) {\n\t    if (parent === undefined) {\n\t        parent = null;\n\t    }\n\t    if (invokingState === undefined || invokingState === null) {\n\t        invokingState = -1;\n\t    }\n\t    antlr4.ParserRuleContext.call(this, parent, invokingState);\n\t    this.parser = parser;\n\t    this.ruleIndex = QLParser.RULE_aggId;\n\t    return this;\n\t}\n\n\tAggIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\n\tAggIdContext.prototype.constructor = AggIdContext;\n\n\tAggIdContext.prototype.AVG = function () {\n\t    return this.getToken(QLParser.AVG, 0);\n\t};\n\n\tAggIdContext.prototype.CONCAT = function () {\n\t    return this.getToken(QLParser.CONCAT, 0);\n\t};\n\n\tAggIdContext.prototype.STRICTCONCAT = function () {\n\t    return this.getToken(QLParser.STRICTCONCAT, 0);\n\t};\n\n\tAggIdContext.prototype.COUNT = function () {\n\t    return this.getToken(QLParser.COUNT, 0);\n\t};\n\n\tAggIdContext.prototype.MAX = function () {\n\t    return this.getToken(QLParser.MAX, 0);\n\t};\n\n\tAggIdContext.prototype.MIN = function () {\n\t    return this.getToken(QLParser.MIN, 0);\n\t};\n\n\tAggIdContext.prototype.RANK = function () {\n\t    return this.getToken(QLParser.RANK, 0);\n\t};\n\n\tAggIdContext.prototype.STRICTCOUNT = function () {\n\t    return this.getToken(QLParser.STRICTCOUNT, 0);\n\t};\n\n\tAggIdContext.prototype.STRICTSUM = function () {\n\t    return this.getToken(QLParser.STRICTSUM, 0);\n\t};\n\n\tAggIdContext.prototype.SUM = function () {\n\t    return this.getToken(QLParser.SUM, 0);\n\t};\n\n\tAggIdContext.prototype.ANY = function () {\n\t    return this.getToken(QLParser.ANY, 0);\n\t};\n\n\tAggIdContext.prototype.accept = function (visitor) {\n\t    if (visitor instanceof QLParserVisitor) {\n\t        return visitor.visitAggId(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t};\n\n\tQLParser.AggIdContext = AggIdContext;\n\n\tQLParser.prototype.aggId = function () {\n\n\t    var localctx = new AggIdContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 134, QLParser.RULE_aggId);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 670;\n\t        _la = this._input.LA(1);\n\t        if (!((_la & ~0x1f) == 0 && (1 << _la & (1 << QLParser.ANY | 1 << QLParser.AVG | 1 << QLParser.COUNT | 1 << QLParser.MAX | 1 << QLParser.MIN)) !== 0 || (_la - 35 & ~0x1f) == 0 && (1 << _la - 35 & (1 << QLParser.RANK - 35 | 1 << QLParser.STRICTCOUNT - 35 | 1 << QLParser.STRICTSUM - 35 | 1 << QLParser.STRICTCONCAT - 35 | 1 << QLParser.CONCAT - 35 | 1 << QLParser.SUM - 35)) !== 0)) {\n\t            this._errHandler.recoverInline(this);\n\t        } else {\n\t            this._errHandler.reportMatch(this);\n\t            this.consume();\n\t        }\n\t    } catch (re) {\n\t        if (re instanceof antlr4.error.RecognitionException) {\n\t            localctx.exception = re;\n\t            this._errHandler.reportError(this, re);\n\t            this._errHandler.recover(this, re);\n\t        } else {\n\t            throw re;\n\t        }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t};\n\n\tQLParser.prototype.sempred = function (localctx, ruleIndex, predIndex) {\n\t    switch (ruleIndex) {\n\t        case 23:\n\t            return this.exprOrTerm_sempred(localctx, predIndex);\n\t        case 30:\n\t            return this.primary_sempred(localctx, predIndex);\n\t        default:\n\t            throw \"No predicate with index:\" + ruleIndex;\n\t    }\n\t};\n\n\tQLParser.prototype.exprOrTerm_sempred = function (localctx, predIndex) {\n\t    switch (predIndex) {\n\t        case 0:\n\t            return this.precpred(this._ctx, 11);\n\t        case 1:\n\t            return this.precpred(this._ctx, 10);\n\t        case 2:\n\t            return this.precpred(this._ctx, 8);\n\t        case 3:\n\t            return this.precpred(this._ctx, 4);\n\t        case 4:\n\t            return this.precpred(this._ctx, 3);\n\t        case 5:\n\t            return this.precpred(this._ctx, 2);\n\t        case 6:\n\t            return this.precpred(this._ctx, 9);\n\t        case 7:\n\t            return this.precpred(this._ctx, 7);\n\t        default:\n\t            throw \"No predicate with index:\" + predIndex;\n\t    }\n\t};\n\n\tQLParser.prototype.primary_sempred = function (localctx, predIndex) {\n\t    switch (predIndex) {\n\t        case 8:\n\t            return this.precpred(this._ctx, 7);\n\t        default:\n\t            throw \"No predicate with index:\" + predIndex;\n\t    }\n\t};\n\n\texports.QLParser = QLParser;\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t// Generated from QLParser.g4 by ANTLR 4.7\n\t// jshint ignore: start\n\tvar antlr4 = __webpack_require__(1);\n\n\t// This class defines a complete generic visitor for a parse tree produced by QLParser.\n\n\tfunction QLParserVisitor() {\n\t  antlr4.tree.ParseTreeVisitor.call(this);\n\t  return this;\n\t}\n\n\tQLParserVisitor.prototype = Object.create(antlr4.tree.ParseTreeVisitor.prototype);\n\tQLParserVisitor.prototype.constructor = QLParserVisitor;\n\n\t// Visit a parse tree produced by QLParser#fileModule.\n\tQLParserVisitor.prototype.visitFileModule = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#module.\n\tQLParserVisitor.prototype.visitModule = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#moduleBody.\n\tQLParserVisitor.prototype.visitModuleBody = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#moduleMember.\n\tQLParserVisitor.prototype.visitModuleMember = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#imprt.\n\tQLParserVisitor.prototype.visitImprt = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#moduleAliasBody.\n\tQLParserVisitor.prototype.visitModuleAliasBody = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#predicateAliasBody.\n\tQLParserVisitor.prototype.visitPredicateAliasBody = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#typeAliasBody.\n\tQLParserVisitor.prototype.visitTypeAliasBody = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#classlessPredicate.\n\tQLParserVisitor.prototype.visitClasslessPredicate = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#datatype.\n\tQLParserVisitor.prototype.visitDatatype = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#datatypeBranches.\n\tQLParserVisitor.prototype.visitDatatypeBranches = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#datatypeBranch.\n\tQLParserVisitor.prototype.visitDatatypeBranch = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#branchBody.\n\tQLParserVisitor.prototype.visitBranchBody = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#select.\n\tQLParserVisitor.prototype.visitSelect = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#dataclass.\n\tQLParserVisitor.prototype.visitDataclass = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#classMember.\n\tQLParserVisitor.prototype.visitClassMember = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#charpred.\n\tQLParserVisitor.prototype.visitCharpred = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#memberPredicate.\n\tQLParserVisitor.prototype.visitMemberPredicate = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#field.\n\tQLParserVisitor.prototype.visitField = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#optbody.\n\tQLParserVisitor.prototype.visitOptbody = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#empty.\n\tQLParserVisitor.prototype.visitEmpty = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#body.\n\tQLParserVisitor.prototype.visitBody = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#higherOrderTerm.\n\tQLParserVisitor.prototype.visitHigherOrderTerm = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#Cast.\n\tQLParserVisitor.prototype.visitCast = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#In.\n\tQLParserVisitor.prototype.visitIn = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#AddOperation.\n\tQLParserVisitor.prototype.visitAddOperation = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#Unary.\n\tQLParserVisitor.prototype.visitUnary = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#QuantifiedTerm.\n\tQLParserVisitor.prototype.visitQuantifiedTerm = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#Not.\n\tQLParserVisitor.prototype.visitNot = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#Disjunction.\n\tQLParserVisitor.prototype.visitDisjunction = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#Implies.\n\tQLParserVisitor.prototype.visitImplies = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#Comparison.\n\tQLParserVisitor.prototype.visitComparison = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#SpecialCall.\n\tQLParserVisitor.prototype.visitSpecialCall = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#Conjunction.\n\tQLParserVisitor.prototype.visitConjunction = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#Instanceof.\n\tQLParserVisitor.prototype.visitInstanceof = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#PrimaryTerm.\n\tQLParserVisitor.prototype.visitPrimaryTerm = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#If.\n\tQLParserVisitor.prototype.visitIf = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#MulOperation.\n\tQLParserVisitor.prototype.visitMulOperation = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#specialId.\n\tQLParserVisitor.prototype.visitSpecialId = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#quantBody.\n\tQLParserVisitor.prototype.visitQuantBody = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#quantifier.\n\tQLParserVisitor.prototype.visitQuantifier = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#ExprArg.\n\tQLParserVisitor.prototype.visitExprArg = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#DontCare.\n\tQLParserVisitor.prototype.visitDontCare = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#callArgs.\n\tQLParserVisitor.prototype.visitCallArgs = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#QualCall.\n\tQLParserVisitor.prototype.visitQualCall = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#QualCast.\n\tQLParserVisitor.prototype.visitQualCast = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#Agg.\n\tQLParserVisitor.prototype.visitAgg = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#Super.\n\tQLParserVisitor.prototype.visitSuper = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#Lit.\n\tQLParserVisitor.prototype.visitLit = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#Var.\n\tQLParserVisitor.prototype.visitVar = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#ParExpr.\n\tQLParserVisitor.prototype.visitParExpr = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#PredicateAtomExpr.\n\tQLParserVisitor.prototype.visitPredicateAtomExpr = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#Range.\n\tQLParserVisitor.prototype.visitRange = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#QualifiedExpr.\n\tQLParserVisitor.prototype.visitQualifiedExpr = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#FullAggBody.\n\tQLParserVisitor.prototype.visitFullAggBody = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#ExprAggBody.\n\tQLParserVisitor.prototype.visitExprAggBody = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#IntLit.\n\tQLParserVisitor.prototype.visitIntLit = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#FloatLit.\n\tQLParserVisitor.prototype.visitFloatLit = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#BoolLit.\n\tQLParserVisitor.prototype.visitBoolLit = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#StringLit.\n\tQLParserVisitor.prototype.visitStringLit = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#bool.\n\tQLParserVisitor.prototype.visitBool = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#variable.\n\tQLParserVisitor.prototype.visitVariable = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#compop.\n\tQLParserVisitor.prototype.visitCompop = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#unop.\n\tQLParserVisitor.prototype.visitUnop = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#mulop.\n\tQLParserVisitor.prototype.visitMulop = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#addop.\n\tQLParserVisitor.prototype.visitAddop = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#closure.\n\tQLParserVisitor.prototype.visitClosure = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#direction.\n\tQLParserVisitor.prototype.visitDirection = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#varDecls.\n\tQLParserVisitor.prototype.visitVarDecls = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#varDecl.\n\tQLParserVisitor.prototype.visitVarDecl = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#asExprs.\n\tQLParserVisitor.prototype.visitAsExprs = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#asExpr.\n\tQLParserVisitor.prototype.visitAsExpr = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#orderBys.\n\tQLParserVisitor.prototype.visitOrderBys = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#orderBy.\n\tQLParserVisitor.prototype.visitOrderBy = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#qldoc.\n\tQLParserVisitor.prototype.visitQldoc = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#QLDocTextSegment.\n\tQLParserVisitor.prototype.visitQLDocTextSegment = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#simpleId.\n\tQLParserVisitor.prototype.visitSimpleId = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#literalId.\n\tQLParserVisitor.prototype.visitLiteralId = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#SimpleAnnotation.\n\tQLParserVisitor.prototype.visitSimpleAnnotation = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#ArgsAnnotation.\n\tQLParserVisitor.prototype.visitArgsAnnotation = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#annotName.\n\tQLParserVisitor.prototype.visitAnnotName = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#annotArg.\n\tQLParserVisitor.prototype.visitAnnotArg = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#moduleName.\n\tQLParserVisitor.prototype.visitModuleName = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#qualModuleExpr.\n\tQLParserVisitor.prototype.visitQualModuleExpr = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#importModuleExpr.\n\tQLParserVisitor.prototype.visitImportModuleExpr = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#moduleExpr.\n\tQLParserVisitor.prototype.visitModuleExpr = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#typeLiteral.\n\tQLParserVisitor.prototype.visitTypeLiteral = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#className.\n\tQLParserVisitor.prototype.visitClassName = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#dbtype.\n\tQLParserVisitor.prototype.visitDbtype = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#returnType.\n\tQLParserVisitor.prototype.visitReturnType = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#typeExpr.\n\tQLParserVisitor.prototype.visitTypeExpr = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#predicateName.\n\tQLParserVisitor.prototype.visitPredicateName = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#aritylessPredicateExpr.\n\tQLParserVisitor.prototype.visitAritylessPredicateExpr = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#predicateExpr.\n\tQLParserVisitor.prototype.visitPredicateExpr = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#varName.\n\tQLParserVisitor.prototype.visitVarName = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\t// Visit a parse tree produced by QLParser#aggId.\n\tQLParserVisitor.prototype.visitAggId = function (ctx) {\n\t  return this.visitChildren(ctx);\n\t};\n\n\texports.QLParserVisitor = QLParserVisitor;\n\n/***/ }\n/******/ ]);"}